{"ast":null,"code":"var _jsxFileName = \"/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/components/domains/SubDomainManagement.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\n// src/components/domains/SubDomainManagement.js - UPDATED WITH ADD PROJECT FEATURE\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { authService } from '../../services/authService';\nimport { toast } from 'react-toastify';\nimport { FiPlus, FiEdit, FiTrash2, FiChevronDown, FiChevronRight, FiFolder, FiFolderPlus, FiFileText, FiArrowLeft, FiMoreVertical, FiMove, FiTarget } from 'react-icons/fi';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SubDomainManagement = () => {\n  _s();\n  console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n  const {\n    domainId\n  } = useParams();\n  const navigate = useNavigate();\n  const [domain, setDomain] = useState(null);\n  const [subDomains, setSubDomains] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingSubDomain, setEditingSubDomain] = useState(null);\n  const [selectedParent, setSelectedParent] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n  // NEW: Project creation state\n  const [showProjectModal, setShowProjectModal] = useState(false);\n  const [selectedSubDomainForProject, setSelectedSubDomainForProject] = useState(null);\n  console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n    domainId,\n    domain: domain === null || domain === void 0 ? void 0 : domain.title,\n    subDomainsCount: subDomains.length,\n    loading,\n    selectedParent: selectedParent === null || selectedParent === void 0 ? void 0 : selectedParent.title,\n    expandedCount: expandedNodes.size,\n    showProjectModal,\n    selectedSubDomainForProject: selectedSubDomainForProject === null || selectedSubDomainForProject === void 0 ? void 0 : selectedSubDomainForProject.title\n  });\n  useEffect(() => {\n    if (domainId) {\n      console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n      fetchDomainAndSubDomains();\n    }\n  }, [domainId]);\n  const fetchDomainAndSubDomains = async () => {\n    try {\n      var _domainsResponse$data, _domainsResponse$data2, _domainsResponse$data3, _subDomainsResponse$d, _subDomainsResponse$d2, _subDomainsResponse$d3;\n      setLoading(true);\n      console.log('🔍 SUBDOMAIN FETCH - Starting API calls for domain:', domainId);\n\n      // Get domain details\n      const domainsResponse = await authService.getDomains();\n      console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n      let domainData = null;\n      const domains = ((_domainsResponse$data = domainsResponse.data) === null || _domainsResponse$data === void 0 ? void 0 : _domainsResponse$data.domains) || ((_domainsResponse$data2 = domainsResponse.data) === null || _domainsResponse$data2 === void 0 ? void 0 : (_domainsResponse$data3 = _domainsResponse$data2.data) === null || _domainsResponse$data3 === void 0 ? void 0 : _domainsResponse$data3.domains) || [];\n      if (domains.length > 0) {\n        domainData = domains.find(d => d.id == domainId);\n      }\n      if (!domainData) {\n        domainData = {\n          id: domainId,\n          title: `Domain ${domainId}`,\n          description: 'Domain not found in list',\n          projectCount: 0\n        };\n      }\n      setDomain(domainData);\n\n      // Get subdomains\n      const subDomainsResponse = await authService.getSubDomains({\n        domainId: domainId\n      });\n      console.log('✅ SUBDOMAIN FETCH - SubDomains response:', subDomainsResponse.data);\n      const subDomainsData = ((_subDomainsResponse$d = subDomainsResponse.data) === null || _subDomainsResponse$d === void 0 ? void 0 : _subDomainsResponse$d.subDomains) || ((_subDomainsResponse$d2 = subDomainsResponse.data) === null || _subDomainsResponse$d2 === void 0 ? void 0 : (_subDomainsResponse$d3 = _subDomainsResponse$d2.data) === null || _subDomainsResponse$d3 === void 0 ? void 0 : _subDomainsResponse$d3.subDomains) || [];\n      setSubDomains(subDomainsData);\n\n      // Auto-expand first level\n      if (subDomainsData.length > 0) {\n        const firstLevelIds = subDomainsData.map(sd => sd.id);\n        setExpandedNodes(new Set(firstLevelIds));\n      }\n\n      // Try hierarchy API as fallback\n      try {\n        var _hierarchyResponse$da;\n        const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n        const hierarchyData = ((_hierarchyResponse$da = hierarchyResponse.data) === null || _hierarchyResponse$da === void 0 ? void 0 : _hierarchyResponse$da.data) || hierarchyResponse.data;\n        if (hierarchyData !== null && hierarchyData !== void 0 && hierarchyData.subDomains && hierarchyData.subDomains.length > 0) {\n          setSubDomains(hierarchyData.subDomains);\n          if (hierarchyData.title && !domainData.title.includes('Domain ')) {\n            setDomain(prev => ({\n              ...prev,\n              ...hierarchyData\n            }));\n          }\n        }\n      } catch (hierarchyError) {\n        console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed:', hierarchyError);\n      }\n    } catch (error) {\n      console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n      toast.error('Failed to fetch domain information');\n      setDomain({\n        id: domainId,\n        title: `Domain ${domainId}`,\n        description: 'Error loading domain details',\n        projectCount: 0\n      });\n      setSubDomains([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAddSubDomain = (parent = null) => {\n    console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked, parent:', parent === null || parent === void 0 ? void 0 : parent.title);\n    setSelectedParent(parent);\n    setEditingSubDomain(null);\n    setShowAddModal(true);\n  };\n  const handleEditSubDomain = subDomain => {\n    console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked:', subDomain.title);\n    setSelectedParent(null);\n    setEditingSubDomain(subDomain);\n    setShowAddModal(true);\n  };\n\n  // NEW: Handle adding project to subdomain\n  const handleAddProjectToSubDomain = subDomain => {\n    console.log('📝 ADD PROJECT - Starting for subdomain:', subDomain.title);\n    console.log('📝 ADD PROJECT - SubDomain is leaf:', !subDomain.children || subDomain.children.length === 0);\n    if (subDomain.children && subDomain.children.length > 0) {\n      toast.error('Projects can only be added to leaf sub-domains (those without children)');\n      return;\n    }\n    setSelectedSubDomainForProject(subDomain);\n    setShowProjectModal(true);\n  };\n  const handleDeleteSubDomain = async subDomain => {\n    const hasChildren = subDomain.children && subDomain.children.length > 0;\n    const hasProjects = subDomain.projectCount > 0;\n    let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n    if (hasChildren) {\n      confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n    }\n    if (hasProjects) {\n      confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n    }\n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n    try {\n      console.log('🗑️ SUBDOMAIN DELETE - Deleting:', subDomain.title);\n      const response = await authService.deleteSubDomain(subDomain.id);\n      toast.success('Sub-domain deleted successfully');\n      fetchDomainAndSubDomains();\n    } catch (error) {\n      console.error('❌ SUBDOMAIN DELETE - Error:', error);\n      toast.error('Failed to delete sub-domain');\n    }\n  };\n  const toggleExpanded = nodeId => {\n    const newExpanded = new Set(expandedNodes);\n    if (newExpanded.has(nodeId)) {\n      newExpanded.delete(nodeId);\n    } else {\n      newExpanded.add(nodeId);\n    }\n    setExpandedNodes(newExpanded);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading sub-domains...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"subdomain-management\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"breadcrumb\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"breadcrumb-link\",\n            onClick: () => navigate('/domains'),\n            children: [/*#__PURE__*/_jsxDEV(FiArrowLeft, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), \"Domains\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"breadcrumb-separator\",\n            children: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"breadcrumb-current\",\n            children: (domain === null || domain === void 0 ? void 0 : domain.title) || 'Loading...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"SubDomain Management\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Manage the hierarchical structure of \", (domain === null || domain === void 0 ? void 0 : domain.title) || 'this domain']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-button\",\n          onClick: () => handleAddSubDomain(),\n          children: [/*#__PURE__*/_jsxDEV(FiPlus, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), \"Add Root SubDomain\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quick-guide\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"How to Build Your SubDomain Hierarchy:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"guide-steps\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"guide-step\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"step-number\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"step-text\",\n            children: [\"Click \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\\"Add Root SubDomain\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 47\n            }, this), \" to create top-level categories\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"guide-step\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"step-number\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"step-text\",\n            children: [\"Click the \", /*#__PURE__*/_jsxDEV(FiPlus, {\n              className: \"inline-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 51\n            }, this), \" button next to any subdomain to add children\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"guide-step\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"step-number\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"step-text\",\n            children: [\"Only \", /*#__PURE__*/_jsxDEV(FiTarget, {\n              className: \"inline-icon leaf\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 46\n            }, this), \" leaf subdomains can have projects assigned\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"guide-step\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"step-number\",\n            children: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"step-text\",\n            children: [\"Click \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\\"Add Project\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 47\n            }, this), \" on leaf subdomains to create new projects\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), domain && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"domain-info-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"domain-icon\",\n        children: /*#__PURE__*/_jsxDEV(FiFolder, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"domain-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: domain.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: domain.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"domain-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: subDomains.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this), \" root sub-domains\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: domain.projectCount || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this), \" total projects\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subdomain-tree-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"SubDomain Hierarchy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-legend\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(FiFolder, {\n              className: \"folder-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this), \"Has children\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(FiTarget, {\n              className: \"leaf-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this), \"Leaf (can have projects)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(FiFileText, {\n              className: \"project-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this), \"Add Project\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), subDomains.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subdomain-tree\",\n        children: subDomains.map(subDomain => /*#__PURE__*/_jsxDEV(SubDomainNode, {\n          subDomain: subDomain,\n          level: 0,\n          isExpanded: expandedNodes.has(subDomain.id),\n          onToggleExpanded: toggleExpanded,\n          onEdit: handleEditSubDomain,\n          onDelete: handleDeleteSubDomain,\n          onAddChild: handleAddSubDomain,\n          onAddProject: handleAddProjectToSubDomain // NEW\n          ,\n          expandedNodes: expandedNodes\n        }, subDomain.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-tree-state\",\n        children: [/*#__PURE__*/_jsxDEV(FiFolderPlus, {\n          size: 64\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No SubDomains Yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Start organizing your \", (domain === null || domain === void 0 ? void 0 : domain.title) || 'domain', \" projects by creating subdomains\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state-examples\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Example Structure:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"example-tree\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"example-item\",\n              children: \"\\uD83D\\uDCC2 Machine Learning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"example-item nested\",\n              children: \"\\uD83C\\uDFAF Deep Learning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"example-item nested\",\n              children: \"\\uD83C\\uDFAF Computer Vision\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"example-item\",\n              children: \"\\uD83C\\uDFAF Data Science\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"primary-button large\",\n            onClick: () => handleAddSubDomain(),\n            children: [/*#__PURE__*/_jsxDEV(FiPlus, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 17\n            }, this), \"Create Your First SubDomain\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"help-text\",\n            children: \"\\uD83D\\uDCA1 Tip: Start with broad categories, then add specific subcategories as needed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), showAddModal && /*#__PURE__*/_jsxDEV(SubDomainModal, {\n      subDomain: editingSubDomain,\n      parent: selectedParent,\n      domain: domain,\n      onClose: () => {\n        setShowAddModal(false);\n        setEditingSubDomain(null);\n        setSelectedParent(null);\n      },\n      onSave: () => {\n        setShowAddModal(false);\n        setEditingSubDomain(null);\n        setSelectedParent(null);\n        fetchDomainAndSubDomains();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }, this), showProjectModal && /*#__PURE__*/_jsxDEV(ProjectModal, {\n      subDomain: selectedSubDomainForProject,\n      domain: domain,\n      onClose: () => {\n        setShowProjectModal(false);\n        setSelectedSubDomainForProject(null);\n      },\n      onSave: () => {\n        setShowProjectModal(false);\n        setSelectedSubDomainForProject(null);\n        toast.success('Project created successfully!');\n        fetchDomainAndSubDomains(); // Refresh to update project counts\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n\n// UPDATED SubDomain Node Component\n_s(SubDomainManagement, \"1gciZrlMml05OITi2S8QdGtf/Nc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = SubDomainManagement;\nconst SubDomainNode = ({\n  subDomain,\n  level,\n  isExpanded,\n  onToggleExpanded,\n  onEdit,\n  onDelete,\n  onAddChild,\n  onAddProject,\n  // NEW\n  expandedNodes\n}) => {\n  _s2();\n  const [showMenu, setShowMenu] = useState(false);\n  const hasChildren = subDomain.children && subDomain.children.length > 0;\n  const isLeaf = !hasChildren;\n  console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n    title: subDomain.title,\n    level,\n    hasChildren,\n    isLeaf,\n    isExpanded,\n    projectCount: subDomain.projectCount\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `subdomain-node level-${level}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-main\",\n        children: [hasChildren ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"expand-button\",\n          onClick: () => onToggleExpanded(subDomain.id),\n          children: isExpanded ? /*#__PURE__*/_jsxDEV(FiChevronDown, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(FiChevronRight, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"expand-placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-icon\",\n          children: isLeaf ? /*#__PURE__*/_jsxDEV(FiTarget, {\n            className: \"leaf-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 23\n          }, this) : /*#__PURE__*/_jsxDEV(FiFolder, {\n            className: \"folder-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 60\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"node-title\",\n            children: subDomain.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"node-description\",\n            children: subDomain.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-stats\",\n            children: [hasChildren && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-badge\",\n              children: [subDomain.children.length, \" sub-domains\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this), subDomain.projectCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-badge projects\",\n              children: [subDomain.projectCount, \" projects\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 17\n            }, this), isLeaf && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-badge leaf\",\n              children: \"Can have projects\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-actions\",\n        children: [isLeaf && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button project\",\n          onClick: () => onAddProject(subDomain),\n          title: `Add project to \"${subDomain.title}\"`,\n          children: /*#__PURE__*/_jsxDEV(FiFileText, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button add\",\n          onClick: () => onAddChild(subDomain),\n          title: `Add child subdomain under \"${subDomain.title}\"`,\n          children: /*#__PURE__*/_jsxDEV(FiPlus, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-menu\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowMenu(!showMenu),\n            title: \"More actions\",\n            children: /*#__PURE__*/_jsxDEV(FiMoreVertical, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-menu\",\n            children: [isLeaf && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                onAddProject(subDomain);\n                setShowMenu(false);\n              },\n              className: \"primary-option\",\n              children: [/*#__PURE__*/_jsxDEV(FiFileText, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 21\n              }, this), \" Add Project\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                onEdit(subDomain);\n                setShowMenu(false);\n              },\n              children: [/*#__PURE__*/_jsxDEV(FiEdit, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 19\n              }, this), \" Edit SubDomain\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                onAddChild(subDomain);\n                setShowMenu(false);\n              },\n              children: [/*#__PURE__*/_jsxDEV(FiPlus, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 19\n              }, this), \" Add Child SubDomain\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                onDelete(subDomain);\n                setShowMenu(false);\n              },\n              className: \"danger\",\n              children: [/*#__PURE__*/_jsxDEV(FiTrash2, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 19\n              }, this), \" Delete SubDomain\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this), hasChildren && isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-children\",\n      children: subDomain.children.map(child => /*#__PURE__*/_jsxDEV(SubDomainNode, {\n        subDomain: child,\n        level: level + 1,\n        isExpanded: expandedNodes.has(child.id),\n        onToggleExpanded: onToggleExpanded,\n        onEdit: onEdit,\n        onDelete: onDelete,\n        onAddChild: onAddChild,\n        onAddProject: onAddProject // NEW\n        ,\n        expandedNodes: expandedNodes\n      }, child.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 409,\n    columnNumber: 5\n  }, this);\n};\n\n// SubDomain Modal Component (unchanged)\n_s2(SubDomainNode, \"2FjIcsdimgVhm2IsUWodA2ftTZU=\");\n_c2 = SubDomainNode;\nconst SubDomainModal = ({\n  subDomain,\n  parent,\n  domain,\n  onClose,\n  onSave\n}) => {\n  _s3();\n  const [formData, setFormData] = useState({\n    title: (subDomain === null || subDomain === void 0 ? void 0 : subDomain.title) || '',\n    description: (subDomain === null || subDomain === void 0 ? void 0 : subDomain.description) || ''\n  });\n  const [loading, setLoading] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const requestData = {\n        title: formData.title.trim(),\n        description: formData.description.trim(),\n        domainId: domain.id,\n        parentId: (parent === null || parent === void 0 ? void 0 : parent.id) || null\n      };\n      console.log('💾 SUBDOMAIN SAVE - Request data:', requestData);\n      if (subDomain) {\n        const response = await authService.updateSubDomain(subDomain.id, requestData);\n        toast.success('Sub-domain updated successfully');\n      } else {\n        const response = await authService.createSubDomain(requestData);\n        toast.success('Sub-domain created successfully');\n      }\n      onSave();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('❌ SUBDOMAIN SAVE - Error:', error);\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to save sub-domain';\n      toast.error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getModalTitle = () => {\n    if (subDomain) {\n      return `Edit SubDomain: ${subDomain.title}`;\n    }\n    if (parent) {\n      return `Add SubDomain under: ${parent.title}`;\n    }\n    return `Add Root SubDomain in: ${(domain === null || domain === void 0 ? void 0 : domain.title) || 'Domain'}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: getModalTitle()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"SubDomain Title *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: formData.title,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              title: e.target.value\n            })),\n            placeholder: \"e.g., Machine Learning, Deep Learning\",\n            required: true,\n            minLength: 3,\n            maxLength: 100\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Description (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.description,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              description: e.target.value\n            })),\n            rows: 3,\n            placeholder: \"Describe what this sub-domain covers...\",\n            maxLength: 500\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Domain:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this), \" \", (domain === null || domain === void 0 ? void 0 : domain.title) || 'Unknown', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 66\n          }, this), parent && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Parent SubDomain:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 17\n            }, this), \" \", parent.title, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 66\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Level:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 13\n          }, this), \" \", parent ? `Level ${(parent.level || 0) + 1}` : 'Root Level']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: onClose,\n            disabled: loading,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"primary-button\",\n            disabled: loading || !formData.title.trim(),\n            children: loading ? 'Saving...' : 'Save SubDomain'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 589,\n    columnNumber: 5\n  }, this);\n};\n\n// NEW: Project Modal Component for SubDomain context\n_s3(SubDomainModal, \"GK/DCXfCNFb5ohLoW+l6KsTmPCs=\");\n_c3 = SubDomainModal;\nconst ProjectModal = ({\n  subDomain,\n  domain,\n  onClose,\n  onSave\n}) => {\n  _s4();\n  const [formData, setFormData] = useState({\n    title: '',\n    abstract: '',\n    specifications: '',\n    learningOutcomes: '',\n    subDomainId: (subDomain === null || subDomain === void 0 ? void 0 : subDomain.id) || '',\n    isFeatured: false\n  });\n  const [loading, setLoading] = useState(false);\n  console.log('📝 PROJECT MODAL - Props:', {\n    subDomain: subDomain === null || subDomain === void 0 ? void 0 : subDomain.title,\n    domain: domain === null || domain === void 0 ? void 0 : domain.title,\n    formData\n  });\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      console.log('💾 PROJECT SAVE - Starting API call with data:', formData);\n      const response = await authService.createProject(formData);\n      console.log('✅ PROJECT CREATE - Response:', response.data);\n      onSave();\n    } catch (error) {\n      console.error('❌ PROJECT SAVE - Error:', error);\n      toast.error('Failed to create project');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal large\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Add Project to: \", subDomain === null || subDomain === void 0 ? void 0 : subDomain.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Project Title *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: formData.title,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              title: e.target.value\n            })),\n            placeholder: \"Enter project title...\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Domain:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 13\n          }, this), \" \", (domain === null || domain === void 0 ? void 0 : domain.title) || 'Unknown', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 66\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"SubDomain:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 13\n          }, this), \" \", (subDomain === null || subDomain === void 0 ? void 0 : subDomain.title) || 'Unknown', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 72\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"info-note\",\n            children: [/*#__PURE__*/_jsxDEV(FiTarget, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 710,\n              columnNumber: 15\n            }, this), \" This is a leaf subdomain - perfect for projects!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Abstract *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.abstract,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              abstract: e.target.value\n            })),\n            rows: 4,\n            placeholder: \"Brief description of the project...\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Specifications *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.specifications,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              specifications: e.target.value\n            })),\n            rows: 6,\n            placeholder: \"Technical specifications and requirements...\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Learning Outcomes *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.learningOutcomes,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              learningOutcomes: e.target.value\n            })),\n            rows: 4,\n            placeholder: \"What will students learn from this project...\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group checkbox\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: formData.isFeatured,\n              onChange: e => setFormData(prev => ({\n                ...prev,\n                isFeatured: e.target.checked\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FiTarget, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 15\n            }, this), \"Featured Project\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: onClose,\n            disabled: loading,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"primary-button\",\n            disabled: loading || !formData.title || !formData.abstract,\n            children: loading ? 'Creating...' : 'Create Project'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 763,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 687,\n    columnNumber: 5\n  }, this);\n};\n_s4(ProjectModal, \"xEzGlE7RlMQaW2g8q8xIHb6RJTM=\");\n_c4 = ProjectModal;\nexport default SubDomainManagement;\n\n// // src/components/domains/SubDomainManagement.js - CORRECTED VERSION\n// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import { authService } from '../../services/authService';\n// import { toast } from 'react-toastify';\n// import {\n//   FiPlus,\n//   FiEdit,\n//   FiTrash2,\n//   FiChevronDown,\n//   FiChevronRight,\n//   FiFolder,\n//   FiFolderPlus,\n//   FiFileText,\n//   FiArrowLeft,\n//   FiMoreVertical,\n//   FiMove,\n//   FiTarget\n// } from 'react-icons/fi';\n\n// const SubDomainManagement = () => {\n//   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n\n//   const { domainId } = useParams();\n//   const navigate = useNavigate();\n\n//   const [domain, setDomain] = useState(null);\n//   const [subDomains, setSubDomains] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [showAddModal, setShowAddModal] = useState(false);\n//   const [editingSubDomain, setEditingSubDomain] = useState(null);\n//   const [selectedParent, setSelectedParent] = useState(null);\n//   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n//   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n//     domainId,\n//     domain: domain?.title,\n//     subDomainsCount: subDomains.length,\n//     loading,\n//     selectedParent: selectedParent?.title,\n//     expandedCount: expandedNodes.size\n//   });\n\n//   useEffect(() => {\n//     if (domainId) {\n//       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n//       fetchDomainAndSubDomains();\n//     }\n//   }, [domainId]);\n\n//   const fetchDomainAndSubDomains = async () => {\n//     try {\n//       setLoading(true);\n\n//       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n//       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n\n//       // ✅ CORRECTED: Get domain details first (without query params to get all domains, then filter)\n//       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains (no params)');\n//       const domainsResponse = await authService.getDomains();\n//       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n\n//       // Extract specific domain from response\n//       let domainData = null;\n//       const domains = domainsResponse.data?.domains || domainsResponse.data?.data?.domains || [];\n//       if (domains.length > 0) {\n//         domainData = domains.find(d => d.id == domainId);\n//       }\n\n//       console.log('🎯 SUBDOMAIN FETCH - Found domain:', domainData);\n\n//       // If we don't have domain data, create a placeholder\n//       if (!domainData) {\n//         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n//         domainData = {\n//           id: domainId,\n//           title: `Domain ${domainId}`,\n//           description: 'Domain not found in list',\n//           projectCount: 0\n//         };\n//       }\n\n//       setDomain(domainData);\n\n//       // ✅ CORRECTED: Get subdomains using the correct API\n//       console.log('🌐 SUBDOMAIN FETCH - Calling getSubDomains with domainId');\n//       const subDomainsResponse = await authService.getSubDomains({ domainId: domainId });\n//       console.log('✅ SUBDOMAIN FETCH - SubDomains response:', subDomainsResponse.data);\n\n//       const subDomainsData = subDomainsResponse.data?.subDomains || subDomainsResponse.data?.data?.subDomains || [];\n//       console.log('🎯 SUBDOMAIN FETCH - Extracted subdomains:', subDomainsData);\n\n//       setSubDomains(subDomainsData);\n\n//       // Auto-expand first level\n//       if (subDomainsData.length > 0) {\n//         const firstLevelIds = subDomainsData.map(sd => sd.id);\n//         setExpandedNodes(new Set(firstLevelIds));\n//         console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n//       }\n\n//       // ✅ ALTERNATIVE: Try hierarchy API as fallback\n//       try {\n//         console.log('🌐 SUBDOMAIN FETCH - Also trying getDomainHierarchy as fallback');\n//         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n//         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n\n//         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n//         if (hierarchyData?.subDomains && hierarchyData.subDomains.length > 0) {\n//           console.log('🎯 SUBDOMAIN FETCH - Using hierarchy data instead');\n//           setSubDomains(hierarchyData.subDomains);\n\n//           // Update domain info if more complete\n//           if (hierarchyData.title && !domainData.title.includes('Domain ')) {\n//             setDomain(prev => ({ ...prev, ...hierarchyData }));\n//           }\n//         }\n//       } catch (hierarchyError) {\n//         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed (using subdomains list):', hierarchyError);\n//       }\n\n//     } catch (error) {\n//       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n//       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n//       toast.error('Failed to fetch domain information');\n\n//       // Create fallback domain\n//       setDomain({\n//         id: domainId,\n//         title: `Domain ${domainId}`,\n//         description: 'Error loading domain details',\n//         projectCount: 0\n//       });\n//       setSubDomains([]);\n//     } finally {\n//       setLoading(false);\n//       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n//     }\n//   };\n\n//   const handleAddSubDomain = (parent = null) => {\n//     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n//     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n\n//     setSelectedParent(parent);\n//     setEditingSubDomain(null);\n//     setShowAddModal(true);\n\n//     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n//       showAddModal: true, \n//       selectedParent: parent?.title,\n//       editingSubDomain: null \n//     });\n//   };\n\n//   const handleEditSubDomain = (subDomain) => {\n//     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n//     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n\n//     setSelectedParent(null);\n//     setEditingSubDomain(subDomain);\n//     setShowAddModal(true);\n//   };\n\n//   const handleDeleteSubDomain = async (subDomain) => {\n//     const hasChildren = subDomain.children && subDomain.children.length > 0;\n//     const hasProjects = subDomain.projectCount > 0;\n\n//     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n//     if (hasChildren) {\n//       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n//     }\n//     if (hasProjects) {\n//       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n//     }\n\n//     if (!window.confirm(confirmMessage)) {\n//       return;\n//     }\n\n//     try {\n//       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n//       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n//       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n//       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n\n//       const response = await authService.deleteSubDomain(subDomain.id);\n\n//       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n\n//       toast.success('Sub-domain deleted successfully');\n//       fetchDomainAndSubDomains();\n//     } catch (error) {\n//       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n//       toast.error('Failed to delete sub-domain');\n//     }\n//   };\n\n//   const toggleExpanded = (nodeId) => {\n//     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n\n//     const newExpanded = new Set(expandedNodes);\n//     if (newExpanded.has(nodeId)) {\n//       newExpanded.delete(nodeId);\n//       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n//     } else {\n//       newExpanded.add(nodeId);\n//       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n//     }\n//     setExpandedNodes(newExpanded);\n//   };\n\n//   if (loading) {\n//     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n\n//     return (\n//       <div className=\"loading-container\">\n//         <div className=\"loading-spinner\"></div>\n//         <p>Loading sub-domains...</p>\n//       </div>\n//     );\n//   }\n\n//   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n//   return (\n//     <div className=\"subdomain-management\">\n//       {/* Header with Breadcrumb */}\n//       <div className=\"page-header\">\n//         <div className=\"header-content\">\n//           <div className=\"breadcrumb\">\n//             <button \n//               className=\"breadcrumb-link\"\n//               onClick={() => navigate('/domains')}\n//             >\n//               <FiArrowLeft />\n//               Domains\n//             </button>\n//             <span className=\"breadcrumb-separator\">/</span>\n//             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n//           </div>\n//           <h1>SubDomain Management</h1>\n//           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n//         </div>\n//         <div className=\"header-actions\">\n//           <button \n//             className=\"primary-button\" \n//             onClick={() => handleAddSubDomain()}\n//           >\n//             <FiPlus />\n//             Add Root SubDomain\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Quick Guide */}\n//       <div className=\"quick-guide\">\n//         <h3>How to Build Your SubDomain Hierarchy:</h3>\n//         <div className=\"guide-steps\">\n//           <div className=\"guide-step\">\n//             <span className=\"step-number\">1</span>\n//             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n//           </div>\n//           <div className=\"guide-step\">\n//             <span className=\"step-number\">2</span>\n//             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n//           </div>\n//           <div className=\"guide-step\">\n//             <span className=\"step-number\">3</span>\n//             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Domain Info Card */}\n//       {domain && (\n//         <div className=\"domain-info-card\">\n//           <div className=\"domain-icon\">\n//             <FiFolder />\n//           </div>\n//           <div className=\"domain-details\">\n//             <h3>{domain.title}</h3>\n//             <p>{domain.description}</p>\n//             <div className=\"domain-stats\">\n//               <span className=\"stat-item\">\n//                 <strong>{subDomains.length}</strong> root sub-domains\n//               </span>\n//               <span className=\"stat-item\">\n//                 <strong>{domain.projectCount || 0}</strong> total projects\n//               </span>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* SubDomain Tree */}\n//       <div className=\"subdomain-tree-container\">\n//         <div className=\"tree-header\">\n//           <h2>SubDomain Hierarchy</h2>\n//           <div className=\"tree-legend\">\n//             <span className=\"legend-item\">\n//               <FiFolder className=\"folder-icon\" />\n//               Has children\n//             </span>\n//             <span className=\"legend-item\">\n//               <FiTarget className=\"leaf-icon\" />\n//               Leaf (can have projects)\n//             </span>\n//           </div>\n//         </div>\n\n//         {subDomains.length > 0 ? (\n//           <div className=\"subdomain-tree\">\n//             {subDomains.map((subDomain) => (\n//               <SubDomainNode\n//                 key={subDomain.id}\n//                 subDomain={subDomain}\n//                 level={0}\n//                 isExpanded={expandedNodes.has(subDomain.id)}\n//                 onToggleExpanded={toggleExpanded}\n//                 onEdit={handleEditSubDomain}\n//                 onDelete={handleDeleteSubDomain}\n//                 onAddChild={handleAddSubDomain}\n//                 expandedNodes={expandedNodes}\n//               />\n//             ))}\n//           </div>\n//         ) : (\n//           <div className=\"empty-tree-state\">\n//             <FiFolderPlus size={64} />\n//             <h3>No SubDomains Yet</h3>\n//             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n//             <div className=\"empty-state-examples\">\n//               <h4>Example Structure:</h4>\n//               <div className=\"example-tree\">\n//                 <div className=\"example-item\">📂 Machine Learning</div>\n//                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n//                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n//                 <div className=\"example-item\">🎯 Data Science</div>\n//               </div>\n//             </div>\n//             <div className=\"empty-state-actions\">\n//               <button \n//                 className=\"primary-button large\" \n//                 onClick={() => handleAddSubDomain()}\n//               >\n//                 <FiPlus />\n//                 Create Your First SubDomain\n//               </button>\n//               <p className=\"help-text\">\n//                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n//               </p>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Add/Edit Modal */}\n//       {showAddModal && (\n//         <SubDomainModal\n//           subDomain={editingSubDomain}\n//           parent={selectedParent}\n//           domain={domain}\n//           onClose={() => {\n//             setShowAddModal(false);\n//             setEditingSubDomain(null);\n//             setSelectedParent(null);\n//           }}\n//           onSave={() => {\n//             setShowAddModal(false);\n//             setEditingSubDomain(null);\n//             setSelectedParent(null);\n//             fetchDomainAndSubDomains();\n//           }}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // SubDomain Node Component\n// const SubDomainNode = ({ \n//   subDomain, \n//   level, \n//   isExpanded, \n//   onToggleExpanded, \n//   onEdit, \n//   onDelete, \n//   onAddChild,\n//   expandedNodes \n// }) => {\n//   const [showMenu, setShowMenu] = useState(false);\n//   const hasChildren = subDomain.children && subDomain.children.length > 0;\n//   const isLeaf = !hasChildren;\n\n//   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n//     title: subDomain.title,\n//     level,\n//     hasChildren,\n//     isLeaf,\n//     isExpanded,\n//     projectCount: subDomain.projectCount\n//   });\n\n//   return (\n//     <div className={`subdomain-node level-${level}`}>\n//       <div className=\"node-content\">\n//         <div className=\"node-main\">\n//           {hasChildren ? (\n//             <button \n//               className=\"expand-button\"\n//               onClick={() => onToggleExpanded(subDomain.id)}\n//             >\n//               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n//             </button>\n//           ) : (\n//             <div className=\"expand-placeholder\" />\n//           )}\n\n//           <div className=\"node-icon\">\n//             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n//           </div>\n\n//           <div className=\"node-info\">\n//             <h4 className=\"node-title\">{subDomain.title}</h4>\n//             <p className=\"node-description\">{subDomain.description}</p>\n//             <div className=\"node-stats\">\n//               {hasChildren && (\n//                 <span className=\"stat-badge\">\n//                   {subDomain.children.length} sub-domains\n//                 </span>\n//               )}\n//               {subDomain.projectCount > 0 && (\n//                 <span className=\"stat-badge projects\">\n//                   {subDomain.projectCount} projects\n//                 </span>\n//               )}\n//               {isLeaf && (\n//                 <span className=\"stat-badge leaf\">\n//                   Can have projects\n//                 </span>\n//               )}\n//             </div>\n//           </div>\n//         </div>\n\n//         <div className=\"node-actions\">\n//           <button \n//             className=\"action-button add\" \n//             onClick={() => onAddChild(subDomain)}\n//             title={`Add child subdomain under \"${subDomain.title}\"`}\n//           >\n//             <FiPlus />\n//           </button>\n//           <div className=\"action-menu\">\n//             <button \n//               onClick={() => setShowMenu(!showMenu)}\n//               title=\"More actions\"\n//             >\n//               <FiMoreVertical />\n//             </button>\n//             {showMenu && (\n//               <div className=\"dropdown-menu\">\n//                 <button onClick={() => {\n//                   onEdit(subDomain);\n//                   setShowMenu(false);\n//                 }}>\n//                   <FiEdit /> Edit\n//                 </button>\n//                 <button onClick={() => {\n//                   onAddChild(subDomain);\n//                   setShowMenu(false);\n//                 }}>\n//                   <FiPlus /> Add Child SubDomain\n//                 </button>\n//                 <button onClick={() => {\n//                   onDelete(subDomain);\n//                   setShowMenu(false);\n//                 }} className=\"danger\">\n//                   <FiTrash2 /> Delete\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Children */}\n//       {hasChildren && isExpanded && (\n//         <div className=\"node-children\">\n//           {subDomain.children.map((child) => (\n//             <SubDomainNode\n//               key={child.id}\n//               subDomain={child}\n//               level={level + 1}\n//               isExpanded={expandedNodes.has(child.id)}\n//               onToggleExpanded={onToggleExpanded}\n//               onEdit={onEdit}\n//               onDelete={onDelete}\n//               onAddChild={onAddChild}\n//               expandedNodes={expandedNodes}\n//             />\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// // SubDomain Modal Component - CORRECTED VERSION\n// const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     title: subDomain?.title || '',\n//     description: subDomain?.description || ''\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   console.log('📝 SUBDOMAIN MODAL - Props:', {\n//     isEditing: !!subDomain,\n//     parentTitle: parent?.title,\n//     domainTitle: domain?.title,\n//     formData\n//   });\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     try {\n//       const requestData = {\n//         title: formData.title.trim(),\n//         description: formData.description.trim(),\n//         domainId: domain.id,\n//         parentId: parent?.id || null\n//       };\n\n//       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n//       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n//       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n//       if (subDomain) {\n//         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n//         const response = await authService.updateSubDomain(subDomain.id, requestData);\n//         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n//         toast.success('Sub-domain updated successfully');\n//       } else {\n//         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n//         const response = await authService.createSubDomain(requestData);\n//         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n//         toast.success('Sub-domain created successfully');\n//       }\n\n//       onSave();\n//     } catch (error) {\n//       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n//       console.error('❌ SUBDOMAIN SAVE - Error response:', error.response);\n//       console.error('❌ SUBDOMAIN SAVE - Error data:', error.response?.data);\n\n//       const errorMessage = error.response?.data?.message || \n//                           error.response?.data?.error || \n//                           'Failed to save sub-domain';\n//       toast.error(errorMessage);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getModalTitle = () => {\n//     if (subDomain) {\n//       return `Edit SubDomain: ${subDomain.title}`;\n//     }\n//     if (parent) {\n//       return `Add SubDomain under: ${parent.title}`;\n//     }\n//     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n//   };\n\n//   const getLevel = () => {\n//     if (!parent) return 'Root Level';\n//     return `Level ${(parent.level || 0) + 1}`;\n//   };\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal\">\n//         <div className=\"modal-header\">\n//           <h2>{getModalTitle()}</h2>\n//           <button onClick={onClose}>×</button>\n//         </div>\n\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label>SubDomain Title *</label>\n//             <input\n//               type=\"text\"\n//               value={formData.title}\n//               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n//               placeholder=\"e.g., Machine Learning, Deep Learning\"\n//               required\n//               minLength={3}\n//               maxLength={100}\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label>Description (Optional)</label>\n//             <textarea\n//               value={formData.description}\n//               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n//               rows={3}\n//               placeholder=\"Describe what this sub-domain covers...\"\n//               maxLength={500}\n//             />\n//           </div>\n\n//           <div className=\"modal-info\">\n//             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n//             {parent && (\n//               <>\n//                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n//               </>\n//             )}\n//             <strong>Level:</strong> {getLevel()}\n//           </div>\n\n//           <div className=\"modal-actions\">\n//             <button type=\"button\" onClick={onClose} disabled={loading}>\n//               Cancel\n//             </button>\n//             <button \n//               type=\"submit\" \n//               className=\"primary-button\" \n//               disabled={loading || !formData.title.trim()}\n//             >\n//               {loading ? 'Saving...' : 'Save SubDomain'}\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SubDomainManagement;\n\n// // // src/components/domains/SubDomainManagement.js - CORRECTED VERSION\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams, useNavigate } from 'react-router-dom';\n// // import { authService } from '../../services/authService';\n// // import { toast } from 'react-toastify';\n// // import {\n// //   FiPlus,\n// //   FiEdit,\n// //   FiTrash2,\n// //   FiChevronDown,\n// //   FiChevronRight,\n// //   FiFolder,\n// //   FiFolderPlus,\n// //   FiFileText,\n// //   FiArrowLeft,\n// //   FiMoreVertical,\n// //   FiMove,\n// //   FiTarget\n// // } from 'react-icons/fi';\n\n// // const SubDomainManagement = () => {\n// //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n\n// //   const { domainId } = useParams();\n// //   const navigate = useNavigate();\n\n// //   const [domain, setDomain] = useState(null);\n// //   const [subDomains, setSubDomains] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [showAddModal, setShowAddModal] = useState(false);\n// //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// //   const [selectedParent, setSelectedParent] = useState(null);\n// //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// //     domainId,\n// //     domain: domain?.title,\n// //     subDomainsCount: subDomains.length,\n// //     loading,\n// //     selectedParent: selectedParent?.title,\n// //     expandedCount: expandedNodes.size\n// //   });\n\n// //   useEffect(() => {\n// //     if (domainId) {\n// //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// //       fetchDomainAndSubDomains();\n// //     }\n// //   }, [domainId]);\n\n// //   const fetchDomainAndSubDomains = async () => {\n// //     try {\n// //       setLoading(true);\n\n// //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n\n// //       // ✅ CORRECTED: Get domain details first (without query params to get all domains, then filter)\n// //       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains (no params)');\n// //       const domainsResponse = await authService.getDomains();\n// //       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n\n// //       // Extract specific domain from response\n// //       let domainData = null;\n// //       const domains = domainsResponse.data?.domains || domainsResponse.data?.data?.domains || [];\n// //       if (domains.length > 0) {\n// //         domainData = domains.find(d => d.id == domainId);\n// //       }\n\n// //       console.log('🎯 SUBDOMAIN FETCH - Found domain:', domainData);\n\n// //       // If we don't have domain data, create a placeholder\n// //       if (!domainData) {\n// //         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n// //         domainData = {\n// //           id: domainId,\n// //           title: `Domain ${domainId}`,\n// //           description: 'Domain not found in list',\n// //           projectCount: 0\n// //         };\n// //       }\n\n// //       setDomain(domainData);\n\n// //       // ✅ CORRECTED: Get subdomains using the correct API\n// //       console.log('🌐 SUBDOMAIN FETCH - Calling getSubDomains with domainId');\n// //       const subDomainsResponse = await authService.getSubDomains({ domainId: domainId });\n// //       console.log('✅ SUBDOMAIN FETCH - SubDomains response:', subDomainsResponse.data);\n\n// //       const subDomainsData = subDomainsResponse.data?.subDomains || subDomainsResponse.data?.data?.subDomains || [];\n// //       console.log('🎯 SUBDOMAIN FETCH - Extracted subdomains:', subDomainsData);\n\n// //       setSubDomains(subDomainsData);\n\n// //       // Auto-expand first level\n// //       if (subDomainsData.length > 0) {\n// //         const firstLevelIds = subDomainsData.map(sd => sd.id);\n// //         setExpandedNodes(new Set(firstLevelIds));\n// //         console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// //       }\n\n// //       // ✅ ALTERNATIVE: Try hierarchy API as fallback\n// //       try {\n// //         console.log('🌐 SUBDOMAIN FETCH - Also trying getDomainHierarchy as fallback');\n// //         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n// //         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n\n// //         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n// //         if (hierarchyData?.subDomains && hierarchyData.subDomains.length > 0) {\n// //           console.log('🎯 SUBDOMAIN FETCH - Using hierarchy data instead');\n// //           setSubDomains(hierarchyData.subDomains);\n\n// //           // Update domain info if more complete\n// //           if (hierarchyData.title && !domainData.title.includes('Domain ')) {\n// //             setDomain(prev => ({ ...prev, ...hierarchyData }));\n// //           }\n// //         }\n// //       } catch (hierarchyError) {\n// //         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed (using subdomains list):', hierarchyError);\n// //       }\n\n// //     } catch (error) {\n// //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// //       toast.error('Failed to fetch domain information');\n\n// //       // Create fallback domain\n// //       setDomain({\n// //         id: domainId,\n// //         title: `Domain ${domainId}`,\n// //         description: 'Error loading domain details',\n// //         projectCount: 0\n// //       });\n// //       setSubDomains([]);\n// //     } finally {\n// //       setLoading(false);\n// //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// //     }\n// //   };\n\n// //   const handleAddSubDomain = (parent = null) => {\n// //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n\n// //     setSelectedParent(parent);\n// //     setEditingSubDomain(null);\n// //     setShowAddModal(true);\n\n// //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// //       showAddModal: true, \n// //       selectedParent: parent?.title,\n// //       editingSubDomain: null \n// //     });\n// //   };\n\n// //   const handleEditSubDomain = (subDomain) => {\n// //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n\n// //     setSelectedParent(null);\n// //     setEditingSubDomain(subDomain);\n// //     setShowAddModal(true);\n// //   };\n\n// //   const handleDeleteSubDomain = async (subDomain) => {\n// //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// //     const hasProjects = subDomain.projectCount > 0;\n\n// //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// //     if (hasChildren) {\n// //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// //     }\n// //     if (hasProjects) {\n// //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// //     }\n\n// //     if (!window.confirm(confirmMessage)) {\n// //       return;\n// //     }\n\n// //     try {\n// //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n\n// //       const response = await authService.deleteSubDomain(subDomain.id);\n\n// //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n\n// //       toast.success('Sub-domain deleted successfully');\n// //       fetchDomainAndSubDomains();\n// //     } catch (error) {\n// //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// //       toast.error('Failed to delete sub-domain');\n// //     }\n// //   };\n\n// //   const toggleExpanded = (nodeId) => {\n// //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n\n// //     const newExpanded = new Set(expandedNodes);\n// //     if (newExpanded.has(nodeId)) {\n// //       newExpanded.delete(nodeId);\n// //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// //     } else {\n// //       newExpanded.add(nodeId);\n// //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// //     }\n// //     setExpandedNodes(newExpanded);\n// //   };\n\n// //   if (loading) {\n// //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n\n// //     return (\n// //       <div className=\"loading-container\">\n// //         <div className=\"loading-spinner\"></div>\n// //         <p>Loading sub-domains...</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// //   return (\n// //     <div className=\"subdomain-management\">\n// //       {/* Header with Breadcrumb */}\n// //       <div className=\"page-header\">\n// //         <div className=\"header-content\">\n// //           <div className=\"breadcrumb\">\n// //             <button \n// //               className=\"breadcrumb-link\"\n// //               onClick={() => navigate('/domains')}\n// //             >\n// //               <FiArrowLeft />\n// //               Domains\n// //             </button>\n// //             <span className=\"breadcrumb-separator\">/</span>\n// //             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n// //           </div>\n// //           <h1>SubDomain Management</h1>\n// //           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n// //         </div>\n// //         <div className=\"header-actions\">\n// //           <button \n// //             className=\"primary-button\" \n// //             onClick={() => handleAddSubDomain()}\n// //           >\n// //             <FiPlus />\n// //             Add Root SubDomain\n// //           </button>\n// //         </div>\n// //       </div>\n\n// //       {/* Quick Guide */}\n// //       <div className=\"quick-guide\">\n// //         <h3>How to Build Your SubDomain Hierarchy:</h3>\n// //         <div className=\"guide-steps\">\n// //           <div className=\"guide-step\">\n// //             <span className=\"step-number\">1</span>\n// //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// //           </div>\n// //           <div className=\"guide-step\">\n// //             <span className=\"step-number\">2</span>\n// //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// //           </div>\n// //           <div className=\"guide-step\">\n// //             <span className=\"step-number\">3</span>\n// //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// //           </div>\n// //         </div>\n// //       </div>\n\n// //       {/* Domain Info Card */}\n// //       {domain && (\n// //         <div className=\"domain-info-card\">\n// //           <div className=\"domain-icon\">\n// //             <FiFolder />\n// //           </div>\n// //           <div className=\"domain-details\">\n// //             <h3>{domain.title}</h3>\n// //             <p>{domain.description}</p>\n// //             <div className=\"domain-stats\">\n// //               <span className=\"stat-item\">\n// //                 <strong>{subDomains.length}</strong> root sub-domains\n// //               </span>\n// //               <span className=\"stat-item\">\n// //                 <strong>{domain.projectCount || 0}</strong> total projects\n// //               </span>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       )}\n\n// //       {/* SubDomain Tree */}\n// //       <div className=\"subdomain-tree-container\">\n// //         <div className=\"tree-header\">\n// //           <h2>SubDomain Hierarchy</h2>\n// //           <div className=\"tree-legend\">\n// //             <span className=\"legend-item\">\n// //               <FiFolder className=\"folder-icon\" />\n// //               Has children\n// //             </span>\n// //             <span className=\"legend-item\">\n// //               <FiTarget className=\"leaf-icon\" />\n// //               Leaf (can have projects)\n// //             </span>\n// //           </div>\n// //         </div>\n\n// //         {subDomains.length > 0 ? (\n// //           <div className=\"subdomain-tree\">\n// //             {subDomains.map((subDomain) => (\n// //               <SubDomainNode\n// //                 key={subDomain.id}\n// //                 subDomain={subDomain}\n// //                 level={0}\n// //                 isExpanded={expandedNodes.has(subDomain.id)}\n// //                 onToggleExpanded={toggleExpanded}\n// //                 onEdit={handleEditSubDomain}\n// //                 onDelete={handleDeleteSubDomain}\n// //                 onAddChild={handleAddSubDomain}\n// //                 expandedNodes={expandedNodes}\n// //               />\n// //             ))}\n// //           </div>\n// //         ) : (\n// //           <div className=\"empty-tree-state\">\n// //             <FiFolderPlus size={64} />\n// //             <h3>No SubDomains Yet</h3>\n// //             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n// //             <div className=\"empty-state-examples\">\n// //               <h4>Example Structure:</h4>\n// //               <div className=\"example-tree\">\n// //                 <div className=\"example-item\">📂 Machine Learning</div>\n// //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// //                 <div className=\"example-item\">🎯 Data Science</div>\n// //               </div>\n// //             </div>\n// //             <div className=\"empty-state-actions\">\n// //               <button \n// //                 className=\"primary-button large\" \n// //                 onClick={() => handleAddSubDomain()}\n// //               >\n// //                 <FiPlus />\n// //                 Create Your First SubDomain\n// //               </button>\n// //               <p className=\"help-text\">\n// //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// //               </p>\n// //             </div>\n// //           </div>\n// //         )}\n// //       </div>\n\n// //       {/* Add/Edit Modal */}\n// //       {showAddModal && (\n// //         <SubDomainModal\n// //           subDomain={editingSubDomain}\n// //           parent={selectedParent}\n// //           domain={domain}\n// //           onClose={() => {\n// //             setShowAddModal(false);\n// //             setEditingSubDomain(null);\n// //             setSelectedParent(null);\n// //           }}\n// //           onSave={() => {\n// //             setShowAddModal(false);\n// //             setEditingSubDomain(null);\n// //             setSelectedParent(null);\n// //             fetchDomainAndSubDomains();\n// //           }}\n// //         />\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // // SubDomain Node Component\n// // const SubDomainNode = ({ \n// //   subDomain, \n// //   level, \n// //   isExpanded, \n// //   onToggleExpanded, \n// //   onEdit, \n// //   onDelete, \n// //   onAddChild,\n// //   expandedNodes \n// // }) => {\n// //   const [showMenu, setShowMenu] = useState(false);\n// //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// //   const isLeaf = !hasChildren;\n\n// //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// //     title: subDomain.title,\n// //     level,\n// //     hasChildren,\n// //     isLeaf,\n// //     isExpanded,\n// //     projectCount: subDomain.projectCount\n// //   });\n\n// //   return (\n// //     <div className={`subdomain-node level-${level}`}>\n// //       <div className=\"node-content\">\n// //         <div className=\"node-main\">\n// //           {hasChildren ? (\n// //             <button \n// //               className=\"expand-button\"\n// //               onClick={() => onToggleExpanded(subDomain.id)}\n// //             >\n// //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// //             </button>\n// //           ) : (\n// //             <div className=\"expand-placeholder\" />\n// //           )}\n\n// //           <div className=\"node-icon\">\n// //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// //           </div>\n\n// //           <div className=\"node-info\">\n// //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// //             <p className=\"node-description\">{subDomain.description}</p>\n// //             <div className=\"node-stats\">\n// //               {hasChildren && (\n// //                 <span className=\"stat-badge\">\n// //                   {subDomain.children.length} sub-domains\n// //                 </span>\n// //               )}\n// //               {subDomain.projectCount > 0 && (\n// //                 <span className=\"stat-badge projects\">\n// //                   {subDomain.projectCount} projects\n// //                 </span>\n// //               )}\n// //               {isLeaf && (\n// //                 <span className=\"stat-badge leaf\">\n// //                   Can have projects\n// //                 </span>\n// //               )}\n// //             </div>\n// //           </div>\n// //         </div>\n\n// //         <div className=\"node-actions\">\n// //           <button \n// //             className=\"action-button add\" \n// //             onClick={() => onAddChild(subDomain)}\n// //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// //           >\n// //             <FiPlus />\n// //           </button>\n// //           <div className=\"action-menu\">\n// //             <button \n// //               onClick={() => setShowMenu(!showMenu)}\n// //               title=\"More actions\"\n// //             >\n// //               <FiMoreVertical />\n// //             </button>\n// //             {showMenu && (\n// //               <div className=\"dropdown-menu\">\n// //                 <button onClick={() => {\n// //                   onEdit(subDomain);\n// //                   setShowMenu(false);\n// //                 }}>\n// //                   <FiEdit /> Edit\n// //                 </button>\n// //                 <button onClick={() => {\n// //                   onAddChild(subDomain);\n// //                   setShowMenu(false);\n// //                 }}>\n// //                   <FiPlus /> Add Child SubDomain\n// //                 </button>\n// //                 <button onClick={() => {\n// //                   onDelete(subDomain);\n// //                   setShowMenu(false);\n// //                 }} className=\"danger\">\n// //                   <FiTrash2 /> Delete\n// //                 </button>\n// //               </div>\n// //             )}\n// //           </div>\n// //         </div>\n// //       </div>\n\n// //       {/* Children */}\n// //       {hasChildren && isExpanded && (\n// //         <div className=\"node-children\">\n// //           {subDomain.children.map((child) => (\n// //             <SubDomainNode\n// //               key={child.id}\n// //               subDomain={child}\n// //               level={level + 1}\n// //               isExpanded={expandedNodes.has(child.id)}\n// //               onToggleExpanded={onToggleExpanded}\n// //               onEdit={onEdit}\n// //               onDelete={onDelete}\n// //               onAddChild={onAddChild}\n// //               expandedNodes={expandedNodes}\n// //             />\n// //           ))}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // // SubDomain Modal Component - CORRECTED VERSION\n// // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// //   const [formData, setFormData] = useState({\n// //     title: subDomain?.title || '',\n// //     description: subDomain?.description || ''\n// //   });\n// //   const [loading, setLoading] = useState(false);\n\n// //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// //     isEditing: !!subDomain,\n// //     parentTitle: parent?.title,\n// //     domainTitle: domain?.title,\n// //     formData\n// //   });\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     setLoading(true);\n\n// //     try {\n// //       const requestData = {\n// //         title: formData.title.trim(),\n// //         description: formData.description.trim(),\n// //         domainId: domain.id,\n// //         parentId: parent?.id || null\n// //       };\n\n// //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// //       if (subDomain) {\n// //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// //         toast.success('Sub-domain updated successfully');\n// //       } else {\n// //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// //         const response = await authService.createSubDomain(requestData);\n// //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// //         toast.success('Sub-domain created successfully');\n// //       }\n\n// //       onSave();\n// //     } catch (error) {\n// //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// //       console.error('❌ SUBDOMAIN SAVE - Error response:', error.response);\n// //       console.error('❌ SUBDOMAIN SAVE - Error data:', error.response?.data);\n\n// //       const errorMessage = error.response?.data?.message || \n// //                           error.response?.data?.error || \n// //                           'Failed to save sub-domain';\n// //       toast.error(errorMessage);\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const getModalTitle = () => {\n// //     if (subDomain) {\n// //       return `Edit SubDomain: ${subDomain.title}`;\n// //     }\n// //     if (parent) {\n// //       return `Add SubDomain under: ${parent.title}`;\n// //     }\n// //     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n// //   };\n\n// //   const getLevel = () => {\n// //     if (!parent) return 'Root Level';\n// //     return `Level ${(parent.level || 0) + 1}`;\n// //   };\n\n// //   return (\n// //     <div className=\"modal-overlay\">\n// //       <div className=\"modal\">\n// //         <div className=\"modal-header\">\n// //           <h2>{getModalTitle()}</h2>\n// //           <button onClick={onClose}>×</button>\n// //         </div>\n\n// //         <form onSubmit={handleSubmit}>\n// //           <div className=\"form-group\">\n// //             <label>SubDomain Title *</label>\n// //             <input\n// //               type=\"text\"\n// //               value={formData.title}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// //               required\n// //               minLength={3}\n// //               maxLength={100}\n// //             />\n// //           </div>\n\n// //           <div className=\"form-group\">\n// //             <label>Description (Optional)</label>\n// //             <textarea\n// //               value={formData.description}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// //               rows={3}\n// //               placeholder=\"Describe what this sub-domain covers...\"\n// //               maxLength={500}\n// //             />\n// //           </div>\n\n// //           <div className=\"modal-info\">\n// //             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n// //             {parent && (\n// //               <>\n// //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// //               </>\n// //             )}\n// //             <strong>Level:</strong> {getLevel()}\n// //           </div>\n\n// //           <div className=\"modal-actions\">\n// //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// //               Cancel\n// //             </button>\n// //             <button \n// //               type=\"submit\" \n// //               className=\"primary-button\" \n// //               disabled={loading || !formData.title.trim()}\n// //             >\n// //               {loading ? 'Saving...' : 'Save SubDomain'}\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default SubDomainManagement;\n\n// // // // src/components/domains/SubDomainManagement.js - FIXED VERSION\n// // // import React, { useState, useEffect } from 'react';\n// // // import { useParams, useNavigate } from 'react-router-dom';\n// // // import { authService } from '../../services/authService';\n// // // import { toast } from 'react-toastify';\n// // // import {\n// // //   FiPlus,\n// // //   FiEdit,\n// // //   FiTrash2,\n// // //   FiChevronDown,\n// // //   FiChevronRight,\n// // //   FiFolder,\n// // //   FiFolderPlus,\n// // //   FiFileText,\n// // //   FiArrowLeft,\n// // //   FiMoreVertical,\n// // //   FiMove,\n// // //   FiTarget\n// // // } from 'react-icons/fi';\n\n// // // const SubDomainManagement = () => {\n// // //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n\n// // //   const { domainId } = useParams();\n// // //   const navigate = useNavigate();\n\n// // //   const [domain, setDomain] = useState(null);\n// // //   const [subDomains, setSubDomains] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [showAddModal, setShowAddModal] = useState(false);\n// // //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// // //   const [selectedParent, setSelectedParent] = useState(null);\n// // //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// // //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// // //     domainId,\n// // //     domain: domain?.title,\n// // //     subDomainsCount: subDomains.length,\n// // //     loading,\n// // //     selectedParent: selectedParent?.title,\n// // //     expandedCount: expandedNodes.size\n// // //   });\n\n// // //   useEffect(() => {\n// // //     if (domainId) {\n// // //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// // //       fetchDomainAndSubDomains();\n// // //     }\n// // //   }, [domainId]);\n\n// // //   const fetchDomainAndSubDomains = async () => {\n// // //     try {\n// // //       setLoading(true);\n\n// // //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// // //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n\n// // //       // First, let's try to get domain details\n// // //       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains with filter');\n// // //       const domainsResponse = await authService.getDomains({ id: domainId });\n// // //       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n\n// // //       // Extract domain from response\n// // //       let domainData = null;\n// // //       if (domainsResponse.data?.domains && domainsResponse.data.domains.length > 0) {\n// // //         domainData = domainsResponse.data.domains.find(d => d.id == domainId);\n// // //       } else if (domainsResponse.data?.data?.domains && domainsResponse.data.data.domains.length > 0) {\n// // //         domainData = domainsResponse.data.data.domains.find(d => d.id == domainId);\n// // //       } else if (Array.isArray(domainsResponse.data)) {\n// // //         domainData = domainsResponse.data.find(d => d.id == domainId);\n// // //       }\n\n// // //       console.log('🎯 SUBDOMAIN FETCH - Extracted domain:', domainData);\n\n// // //       // If we don't have domain data, create a placeholder\n// // //       if (!domainData) {\n// // //         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n// // //         domainData = {\n// // //           id: domainId,\n// // //           title: `Domain ${domainId}`,\n// // //           description: 'Loading domain details...',\n// // //           projectCount: 0\n// // //         };\n// // //       }\n\n// // //       setDomain(domainData);\n\n// // //       // Try to get hierarchy if domain exists\n// // //       try {\n// // //         console.log('🌐 SUBDOMAIN FETCH - Calling getDomainHierarchy');\n// // //         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n// // //         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n\n// // //         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n// // //         console.log('🎯 SUBDOMAIN FETCH - Extracted hierarchy data:', hierarchyData);\n\n// // //         setSubDomains(hierarchyData?.subDomains || []);\n\n// // //         // Auto-expand first level\n// // //         if (hierarchyData?.subDomains?.length > 0) {\n// // //           const firstLevelIds = hierarchyData.subDomains.map(sd => sd.id);\n// // //           setExpandedNodes(new Set(firstLevelIds));\n// // //           console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// // //         }\n// // //       } catch (hierarchyError) {\n// // //         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed, starting with empty structure:', hierarchyError);\n// // //         setSubDomains([]);\n// // //       }\n\n// // //     } catch (error) {\n// // //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// // //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// // //       toast.error('Failed to fetch domain information');\n\n// // //       // Create fallback domain\n// // //       setDomain({\n// // //         id: domainId,\n// // //         title: `Domain ${domainId}`,\n// // //         description: 'Error loading domain details',\n// // //         projectCount: 0\n// // //       });\n// // //       setSubDomains([]);\n// // //     } finally {\n// // //       setLoading(false);\n// // //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// // //     }\n// // //   };\n\n// // //   const handleAddSubDomain = (parent = null) => {\n// // //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// // //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n\n// // //     setSelectedParent(parent);\n// // //     setEditingSubDomain(null);\n// // //     setShowAddModal(true);\n\n// // //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// // //       showAddModal: true, \n// // //       selectedParent: parent?.title,\n// // //       editingSubDomain: null \n// // //     });\n// // //   };\n\n// // //   const handleEditSubDomain = (subDomain) => {\n// // //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// // //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n\n// // //     setSelectedParent(null);\n// // //     setEditingSubDomain(subDomain);\n// // //     setShowAddModal(true);\n// // //   };\n\n// // //   const handleDeleteSubDomain = async (subDomain) => {\n// // //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // //     const hasProjects = subDomain.projectCount > 0;\n\n// // //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// // //     if (hasChildren) {\n// // //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// // //     }\n// // //     if (hasProjects) {\n// // //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// // //     }\n\n// // //     if (!window.confirm(confirmMessage)) {\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// // //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// // //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// // //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n\n// // //       const response = await authService.deleteSubDomain(subDomain.id);\n\n// // //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n\n// // //       toast.success('Sub-domain deleted successfully');\n// // //       fetchDomainAndSubDomains();\n// // //     } catch (error) {\n// // //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// // //       toast.error('Failed to delete sub-domain');\n// // //     }\n// // //   };\n\n// // //   const toggleExpanded = (nodeId) => {\n// // //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n\n// // //     const newExpanded = new Set(expandedNodes);\n// // //     if (newExpanded.has(nodeId)) {\n// // //       newExpanded.delete(nodeId);\n// // //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// // //     } else {\n// // //       newExpanded.add(nodeId);\n// // //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// // //     }\n// // //     setExpandedNodes(newExpanded);\n// // //   };\n\n// // //   if (loading) {\n// // //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n\n// // //     return (\n// // //       <div className=\"loading-container\">\n// // //         <div className=\"loading-spinner\"></div>\n// // //         <p>Loading sub-domains...</p>\n// // //       </div>\n// // //     );\n// // //   }\n\n// // //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// // //   return (\n// // //     <div className=\"subdomain-management\">\n// // //       {/* Header with Breadcrumb */}\n// // //       <div className=\"page-header\">\n// // //         <div className=\"header-content\">\n// // //           <div className=\"breadcrumb\">\n// // //             <button \n// // //               className=\"breadcrumb-link\"\n// // //               onClick={() => navigate('/domains')}\n// // //             >\n// // //               <FiArrowLeft />\n// // //               Domains\n// // //             </button>\n// // //             <span className=\"breadcrumb-separator\">/</span>\n// // //             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n// // //           </div>\n// // //           <h1>SubDomain Management</h1>\n// // //           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n// // //         </div>\n// // //         <div className=\"header-actions\">\n// // //           <button \n// // //             className=\"primary-button\" \n// // //             onClick={() => handleAddSubDomain()}\n// // //           >\n// // //             <FiPlus />\n// // //             Add Root SubDomain\n// // //           </button>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Quick Guide */}\n// // //       <div className=\"quick-guide\">\n// // //         <h3>How to Build Your SubDomain Hierarchy:</h3>\n// // //         <div className=\"guide-steps\">\n// // //           <div className=\"guide-step\">\n// // //             <span className=\"step-number\">1</span>\n// // //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// // //           </div>\n// // //           <div className=\"guide-step\">\n// // //             <span className=\"step-number\">2</span>\n// // //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// // //           </div>\n// // //           <div className=\"guide-step\">\n// // //             <span className=\"step-number\">3</span>\n// // //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Domain Info Card */}\n// // //       {domain && (\n// // //         <div className=\"domain-info-card\">\n// // //           <div className=\"domain-icon\">\n// // //             <FiFolder />\n// // //           </div>\n// // //           <div className=\"domain-details\">\n// // //             <h3>{domain.title}</h3>\n// // //             <p>{domain.description}</p>\n// // //             <div className=\"domain-stats\">\n// // //               <span className=\"stat-item\">\n// // //                 <strong>{subDomains.length}</strong> root sub-domains\n// // //               </span>\n// // //               <span className=\"stat-item\">\n// // //                 <strong>{domain.projectCount || 0}</strong> total projects\n// // //               </span>\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       )}\n\n// // //       {/* SubDomain Tree */}\n// // //       <div className=\"subdomain-tree-container\">\n// // //         <div className=\"tree-header\">\n// // //           <h2>SubDomain Hierarchy</h2>\n// // //           <div className=\"tree-legend\">\n// // //             <span className=\"legend-item\">\n// // //               <FiFolder className=\"folder-icon\" />\n// // //               Has children\n// // //             </span>\n// // //             <span className=\"legend-item\">\n// // //               <FiTarget className=\"leaf-icon\" />\n// // //               Leaf (can have projects)\n// // //             </span>\n// // //           </div>\n// // //         </div>\n\n// // //         {subDomains.length > 0 ? (\n// // //           <div className=\"subdomain-tree\">\n// // //             {subDomains.map((subDomain) => (\n// // //               <SubDomainNode\n// // //                 key={subDomain.id}\n// // //                 subDomain={subDomain}\n// // //                 level={0}\n// // //                 isExpanded={expandedNodes.has(subDomain.id)}\n// // //                 onToggleExpanded={toggleExpanded}\n// // //                 onEdit={handleEditSubDomain}\n// // //                 onDelete={handleDeleteSubDomain}\n// // //                 onAddChild={handleAddSubDomain}\n// // //                 expandedNodes={expandedNodes}\n// // //               />\n// // //             ))}\n// // //           </div>\n// // //         ) : (\n// // //           <div className=\"empty-tree-state\">\n// // //             <FiFolderPlus size={64} />\n// // //             <h3>No SubDomains Yet</h3>\n// // //             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n// // //             <div className=\"empty-state-examples\">\n// // //               <h4>Example Structure:</h4>\n// // //               <div className=\"example-tree\">\n// // //                 <div className=\"example-item\">📂 Machine Learning</div>\n// // //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// // //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// // //                 <div className=\"example-item\">🎯 Data Science</div>\n// // //               </div>\n// // //             </div>\n// // //             <div className=\"empty-state-actions\">\n// // //               <button \n// // //                 className=\"primary-button large\" \n// // //                 onClick={() => handleAddSubDomain()}\n// // //               >\n// // //                 <FiPlus />\n// // //                 Create Your First SubDomain\n// // //               </button>\n// // //               <p className=\"help-text\">\n// // //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// // //               </p>\n// // //             </div>\n// // //           </div>\n// // //         )}\n// // //       </div>\n\n// // //       {/* Add/Edit Modal */}\n// // //       {showAddModal && (\n// // //         <SubDomainModal\n// // //           subDomain={editingSubDomain}\n// // //           parent={selectedParent}\n// // //           domain={domain}\n// // //           onClose={() => {\n// // //             setShowAddModal(false);\n// // //             setEditingSubDomain(null);\n// // //             setSelectedParent(null);\n// // //           }}\n// // //           onSave={() => {\n// // //             setShowAddModal(false);\n// // //             setEditingSubDomain(null);\n// // //             setSelectedParent(null);\n// // //             fetchDomainAndSubDomains();\n// // //           }}\n// // //         />\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // SubDomain Node Component\n// // // const SubDomainNode = ({ \n// // //   subDomain, \n// // //   level, \n// // //   isExpanded, \n// // //   onToggleExpanded, \n// // //   onEdit, \n// // //   onDelete, \n// // //   onAddChild,\n// // //   expandedNodes \n// // // }) => {\n// // //   const [showMenu, setShowMenu] = useState(false);\n// // //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // //   const isLeaf = !hasChildren;\n\n// // //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// // //     title: subDomain.title,\n// // //     level,\n// // //     hasChildren,\n// // //     isLeaf,\n// // //     isExpanded,\n// // //     projectCount: subDomain.projectCount\n// // //   });\n\n// // //   return (\n// // //     <div className={`subdomain-node level-${level}`}>\n// // //       <div className=\"node-content\">\n// // //         <div className=\"node-main\">\n// // //           {hasChildren ? (\n// // //             <button \n// // //               className=\"expand-button\"\n// // //               onClick={() => onToggleExpanded(subDomain.id)}\n// // //             >\n// // //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// // //             </button>\n// // //           ) : (\n// // //             <div className=\"expand-placeholder\" />\n// // //           )}\n\n// // //           <div className=\"node-icon\">\n// // //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// // //           </div>\n\n// // //           <div className=\"node-info\">\n// // //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// // //             <p className=\"node-description\">{subDomain.description}</p>\n// // //             <div className=\"node-stats\">\n// // //               {hasChildren && (\n// // //                 <span className=\"stat-badge\">\n// // //                   {subDomain.children.length} sub-domains\n// // //                 </span>\n// // //               )}\n// // //               {subDomain.projectCount > 0 && (\n// // //                 <span className=\"stat-badge projects\">\n// // //                   {subDomain.projectCount} projects\n// // //                 </span>\n// // //               )}\n// // //               {isLeaf && (\n// // //                 <span className=\"stat-badge leaf\">\n// // //                   Can have projects\n// // //                 </span>\n// // //               )}\n// // //             </div>\n// // //           </div>\n// // //         </div>\n\n// // //         <div className=\"node-actions\">\n// // //           <button \n// // //             className=\"action-button add\" \n// // //             onClick={() => onAddChild(subDomain)}\n// // //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// // //           >\n// // //             <FiPlus />\n// // //           </button>\n// // //           <div className=\"action-menu\">\n// // //             <button \n// // //               onClick={() => setShowMenu(!showMenu)}\n// // //               title=\"More actions\"\n// // //             >\n// // //               <FiMoreVertical />\n// // //             </button>\n// // //             {showMenu && (\n// // //               <div className=\"dropdown-menu\">\n// // //                 <button onClick={() => {\n// // //                   onEdit(subDomain);\n// // //                   setShowMenu(false);\n// // //                 }}>\n// // //                   <FiEdit /> Edit\n// // //                 </button>\n// // //                 <button onClick={() => {\n// // //                   onAddChild(subDomain);\n// // //                   setShowMenu(false);\n// // //                 }}>\n// // //                   <FiPlus /> Add Child SubDomain\n// // //                 </button>\n// // //                 <button onClick={() => {\n// // //                   onDelete(subDomain);\n// // //                   setShowMenu(false);\n// // //                 }} className=\"danger\">\n// // //                   <FiTrash2 /> Delete\n// // //                 </button>\n// // //               </div>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Children */}\n// // //       {hasChildren && isExpanded && (\n// // //         <div className=\"node-children\">\n// // //           {subDomain.children.map((child) => (\n// // //             <SubDomainNode\n// // //               key={child.id}\n// // //               subDomain={child}\n// // //               level={level + 1}\n// // //               isExpanded={expandedNodes.has(child.id)}\n// // //               onToggleExpanded={onToggleExpanded}\n// // //               onEdit={onEdit}\n// // //               onDelete={onDelete}\n// // //               onAddChild={onAddChild}\n// // //               expandedNodes={expandedNodes}\n// // //             />\n// // //           ))}\n// // //         </div>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // SubDomain Modal Component - FIXED VERSION\n// // // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// // //   const [formData, setFormData] = useState({\n// // //     title: subDomain?.title || '',\n// // //     description: subDomain?.description || ''\n// // //   });\n// // //   const [loading, setLoading] = useState(false);\n\n// // //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// // //     isEditing: !!subDomain,\n// // //     parentTitle: parent?.title,\n// // //     domainTitle: domain?.title,\n// // //     formData\n// // //   });\n\n// // //   // Enhanced slug generation with better validation\n// // //   const generateSlug = (title) => {\n// // //     if (!title || title.trim() === '') {\n// // //       return '';\n// // //     }\n\n// // //     let slug = title\n// // //       .toLowerCase()\n// // //       .trim()\n// // //       .replace(/[^a-z0-9\\s-]/g, '') // Remove special chars except spaces and hyphens\n// // //       .replace(/\\s+/g, '-')         // Replace spaces with hyphens\n// // //       .replace(/-+/g, '-')          // Remove consecutive hyphens\n// // //       .replace(/^-|-$/g, '');       // Remove leading/trailing hyphens\n\n// // //     // Ensure minimum length - if too short, add timestamp\n// // //     if (slug.length < 3) {\n// // //       slug = slug + '-' + Date.now().toString().slice(-4);\n// // //     }\n\n// // //     // Ensure maximum length\n// // //     if (slug.length > 50) {\n// // //       slug = slug.substring(0, 50).replace(/-$/, '');\n// // //     }\n\n// // //     return slug;\n// // //   };\n\n// // //   const slugPreview = generateSlug(formData.title);\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     setLoading(true);\n\n// // //     try {\n// // //       // Generate slug from title\n// // //       const slug = generateSlug(formData.title);\n\n// // //       // Validate slug\n// // //       if (!slug || slug.length < 3) {\n// // //         toast.error('Title must generate a valid slug (at least 3 characters)');\n// // //         setLoading(false);\n// // //         return;\n// // //       }\n\n// // //       const requestData = {\n// // //         title: formData.title.trim(),\n// // //         description: formData.description.trim(),\n\n// // //         domainId: domain.id,\n// // //         parentId: parent?.id || null\n// // //       };\n\n// // //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// // //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// // //       console.log('🔍 SUBDOMAIN SAVE - Generated slug:', slug, 'Length:', slug.length);\n// // //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// // //       if (subDomain) {\n// // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// // //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// // //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// // //         toast.success('Sub-domain updated successfully');\n// // //       } else {\n// // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// // //         const response = await authService.createSubDomain(requestData);\n// // //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// // //         toast.success('Sub-domain created successfully');\n// // //       }\n\n// // //       onSave();\n// // //     } catch (error) {\n// // //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// // //       console.error('❌ SUBDOMAIN SAVE - Error response:', error.response);\n// // //       console.error('❌ SUBDOMAIN SAVE - Error data:', error.response?.data);\n\n// // //       // Better error handling\n// // //       const errorMessage = error.response?.data?.message || \n// // //                           error.response?.data?.error || \n// // //                           'Failed to save sub-domain';\n// // //       toast.error(errorMessage);\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   const getModalTitle = () => {\n// // //     if (subDomain) {\n// // //       return `Edit SubDomain: ${subDomain.title}`;\n// // //     }\n// // //     if (parent) {\n// // //       return `Add SubDomain under: ${parent.title}`;\n// // //     }\n// // //     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n// // //   };\n\n// // //   const getLevel = () => {\n// // //     if (!parent) return 'Root Level';\n// // //     // This is a simplified level calculation\n// // //     return `Level ${(parent.level || 0) + 1}`;\n// // //   };\n\n// // //   return (\n// // //     <div className=\"modal-overlay\">\n// // //       <div className=\"modal\">\n// // //         <div className=\"modal-header\">\n// // //           <h2>{getModalTitle()}</h2>\n// // //           <button onClick={onClose}>×</button>\n// // //         </div>\n\n// // //         <form onSubmit={handleSubmit}>\n// // //           <div className=\"form-group\">\n// // //             <label>SubDomain Title *</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={formData.title}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// // //               required\n// // //               minLength={3}\n// // //               maxLength={100}\n// // //             />\n// // //             {formData.title && (\n// // //               <div className=\"slug-preview\">\n// // //                 <small>\n// // //                   URL Slug: <code>{slugPreview || 'enter-title-to-see-slug'}</code>\n// // //                   {slugPreview && slugPreview.length < 3 && (\n// // //                     <span style={{color: 'red'}}> (Too short - needs at least 3 chars)</span>\n// // //                   )}\n// // //                 </small>\n// // //               </div>\n// // //             )}\n// // //           </div>\n\n// // //           <div className=\"form-group\">\n// // //             <label>Description (Optional)</label>\n// // //             <textarea\n// // //               value={formData.description}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// // //               rows={3}\n// // //               placeholder=\"Describe what this sub-domain covers...\"\n// // //               maxLength={500}\n// // //             />\n// // //           </div>\n\n// // //           <div className=\"modal-info\">\n// // //             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n// // //             {parent && (\n// // //               <>\n// // //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// // //               </>\n// // //             )}\n// // //             <strong>Level:</strong> {getLevel()}\n// // //           </div>\n\n// // //           <div className=\"modal-actions\">\n// // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // //               Cancel\n// // //             </button>\n// // //             <button \n// // //               type=\"submit\" \n// // //               className=\"primary-button\" \n// // //               disabled={loading || !formData.title.trim() || slugPreview.length < 3}\n// // //             >\n// // //               {loading ? 'Saving...' : 'Save SubDomain'}\n// // //             </button>\n// // //           </div>\n// // //         </form>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default SubDomainManagement;\n\n// // // // // src/components/domains/SubDomainManagement.js - REPLACE THE TEST VERSION\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import { useParams, useNavigate } from 'react-router-dom';\n// // // // import { authService } from '../../services/authService';\n// // // // import { toast } from 'react-toastify';\n// // // // import {\n// // // //   FiPlus,\n// // // //   FiEdit,\n// // // //   FiTrash2,\n// // // //   FiChevronDown,\n// // // //   FiChevronRight,\n// // // //   FiFolder,\n// // // //   FiFolderPlus,\n// // // //   FiFileText,\n// // // //   FiArrowLeft,\n// // // //   FiMoreVertical,\n// // // //   FiMove,\n// // // //   FiTarget\n// // // // } from 'react-icons/fi';\n\n// // // // const SubDomainManagement = () => {\n// // // //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n\n// // // //   const { domainId } = useParams();\n// // // //   const navigate = useNavigate();\n\n// // // //   const [domain, setDomain] = useState(null);\n// // // //   const [subDomains, setSubDomains] = useState([]);\n// // // //   const [loading, setLoading] = useState(true);\n// // // //   const [showAddModal, setShowAddModal] = useState(false);\n// // // //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// // // //   const [selectedParent, setSelectedParent] = useState(null);\n// // // //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// // // //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// // // //     domainId,\n// // // //     domain: domain?.title,\n// // // //     subDomainsCount: subDomains.length,\n// // // //     loading,\n// // // //     selectedParent: selectedParent?.title,\n// // // //     expandedCount: expandedNodes.size\n// // // //   });\n\n// // // //   useEffect(() => {\n// // // //     if (domainId) {\n// // // //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// // // //       fetchDomainAndSubDomains();\n// // // //     }\n// // // //   }, [domainId]);\n\n// // // //   const fetchDomainAndSubDomains = async () => {\n// // // //     try {\n// // // //       setLoading(true);\n\n// // // //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// // // //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n\n// // // //       // First, let's try to get domain details\n// // // //       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains with filter');\n// // // //       const domainsResponse = await authService.getDomains({ id: domainId });\n// // // //       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n\n// // // //       // Extract domain from response\n// // // //       let domainData = null;\n// // // //       if (domainsResponse.data?.domains && domainsResponse.data.domains.length > 0) {\n// // // //         domainData = domainsResponse.data.domains.find(d => d.id == domainId);\n// // // //       } else if (domainsResponse.data?.data?.domains && domainsResponse.data.data.domains.length > 0) {\n// // // //         domainData = domainsResponse.data.data.domains.find(d => d.id == domainId);\n// // // //       } else if (Array.isArray(domainsResponse.data)) {\n// // // //         domainData = domainsResponse.data.find(d => d.id == domainId);\n// // // //       }\n\n// // // //       console.log('🎯 SUBDOMAIN FETCH - Extracted domain:', domainData);\n\n// // // //       // If we don't have domain data, create a placeholder\n// // // //       if (!domainData) {\n// // // //         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n// // // //         domainData = {\n// // // //           id: domainId,\n// // // //           title: `Domain ${domainId}`,\n// // // //           description: 'Loading domain details...',\n// // // //           projectCount: 0\n// // // //         };\n// // // //       }\n\n// // // //       setDomain(domainData);\n\n// // // //       // Try to get hierarchy if domain exists\n// // // //       try {\n// // // //         console.log('🌐 SUBDOMAIN FETCH - Calling getDomainHierarchy');\n// // // //         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n// // // //         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n\n// // // //         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n// // // //         console.log('🎯 SUBDOMAIN FETCH - Extracted hierarchy data:', hierarchyData);\n\n// // // //         setSubDomains(hierarchyData?.subDomains || []);\n\n// // // //         // Auto-expand first level\n// // // //         if (hierarchyData?.subDomains?.length > 0) {\n// // // //           const firstLevelIds = hierarchyData.subDomains.map(sd => sd.id);\n// // // //           setExpandedNodes(new Set(firstLevelIds));\n// // // //           console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// // // //         }\n// // // //       } catch (hierarchyError) {\n// // // //         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed, starting with empty structure:', hierarchyError);\n// // // //         setSubDomains([]);\n// // // //       }\n\n// // // //     } catch (error) {\n// // // //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// // // //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// // // //       toast.error('Failed to fetch domain information');\n\n// // // //       // Create fallback domain\n// // // //       setDomain({\n// // // //         id: domainId,\n// // // //         title: `Domain ${domainId}`,\n// // // //         description: 'Error loading domain details',\n// // // //         projectCount: 0\n// // // //       });\n// // // //       setSubDomains([]);\n// // // //     } finally {\n// // // //       setLoading(false);\n// // // //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// // // //     }\n// // // //   };\n\n// // // //   const handleAddSubDomain = (parent = null) => {\n// // // //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// // // //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n\n// // // //     setSelectedParent(parent);\n// // // //     setEditingSubDomain(null);\n// // // //     setShowAddModal(true);\n\n// // // //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// // // //       showAddModal: true, \n// // // //       selectedParent: parent?.title,\n// // // //       editingSubDomain: null \n// // // //     });\n// // // //   };\n\n// // // //   const handleEditSubDomain = (subDomain) => {\n// // // //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// // // //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n\n// // // //     setSelectedParent(null);\n// // // //     setEditingSubDomain(subDomain);\n// // // //     setShowAddModal(true);\n// // // //   };\n\n// // // //   const handleDeleteSubDomain = async (subDomain) => {\n// // // //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // //     const hasProjects = subDomain.projectCount > 0;\n\n// // // //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// // // //     if (hasChildren) {\n// // // //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// // // //     }\n// // // //     if (hasProjects) {\n// // // //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// // // //     }\n\n// // // //     if (!window.confirm(confirmMessage)) {\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// // // //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// // // //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// // // //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n\n// // // //       const response = await authService.deleteSubDomain(subDomain.id);\n\n// // // //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n\n// // // //       toast.success('Sub-domain deleted successfully');\n// // // //       fetchDomainAndSubDomains();\n// // // //     } catch (error) {\n// // // //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// // // //       toast.error('Failed to delete sub-domain');\n// // // //     }\n// // // //   };\n\n// // // //   const toggleExpanded = (nodeId) => {\n// // // //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n\n// // // //     const newExpanded = new Set(expandedNodes);\n// // // //     if (newExpanded.has(nodeId)) {\n// // // //       newExpanded.delete(nodeId);\n// // // //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// // // //     } else {\n// // // //       newExpanded.add(nodeId);\n// // // //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// // // //     }\n// // // //     setExpandedNodes(newExpanded);\n// // // //   };\n\n// // // //   if (loading) {\n// // // //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n\n// // // //     return (\n// // // //       <div className=\"loading-container\">\n// // // //         <div className=\"loading-spinner\"></div>\n// // // //         <p>Loading sub-domains...</p>\n// // // //       </div>\n// // // //     );\n// // // //   }\n\n// // // //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// // // //   return (\n// // // //     <div className=\"subdomain-management\">\n// // // //       {/* Header with Breadcrumb */}\n// // // //       <div className=\"page-header\">\n// // // //         <div className=\"header-content\">\n// // // //           <div className=\"breadcrumb\">\n// // // //             <button \n// // // //               className=\"breadcrumb-link\"\n// // // //               onClick={() => navigate('/domains')}\n// // // //             >\n// // // //               <FiArrowLeft />\n// // // //               Domains\n// // // //             </button>\n// // // //             <span className=\"breadcrumb-separator\">/</span>\n// // // //             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n// // // //           </div>\n// // // //           <h1>SubDomain Management</h1>\n// // // //           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n// // // //         </div>\n// // // //         <div className=\"header-actions\">\n// // // //           <button \n// // // //             className=\"primary-button\" \n// // // //             onClick={() => handleAddSubDomain()}\n// // // //           >\n// // // //             <FiPlus />\n// // // //             Add Root SubDomain\n// // // //           </button>\n// // // //         </div>\n// // // //       </div>\n\n// // // //       {/* Quick Guide */}\n// // // //       <div className=\"quick-guide\">\n// // // //         <h3>How to Build Your SubDomain Hierarchy:</h3>\n// // // //         <div className=\"guide-steps\">\n// // // //           <div className=\"guide-step\">\n// // // //             <span className=\"step-number\">1</span>\n// // // //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// // // //           </div>\n// // // //           <div className=\"guide-step\">\n// // // //             <span className=\"step-number\">2</span>\n// // // //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// // // //           </div>\n// // // //           <div className=\"guide-step\">\n// // // //             <span className=\"step-number\">3</span>\n// // // //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// // // //           </div>\n// // // //         </div>\n// // // //       </div>\n\n// // // //       {/* Domain Info Card */}\n// // // //       {domain && (\n// // // //         <div className=\"domain-info-card\">\n// // // //           <div className=\"domain-icon\">\n// // // //             <FiFolder />\n// // // //           </div>\n// // // //           <div className=\"domain-details\">\n// // // //             <h3>{domain.title}</h3>\n// // // //             <p>{domain.description}</p>\n// // // //             <div className=\"domain-stats\">\n// // // //               <span className=\"stat-item\">\n// // // //                 <strong>{subDomains.length}</strong> root sub-domains\n// // // //               </span>\n// // // //               <span className=\"stat-item\">\n// // // //                 <strong>{domain.projectCount || 0}</strong> total projects\n// // // //               </span>\n// // // //             </div>\n// // // //           </div>\n// // // //         </div>\n// // // //       )}\n\n// // // //       {/* SubDomain Tree */}\n// // // //       <div className=\"subdomain-tree-container\">\n// // // //         <div className=\"tree-header\">\n// // // //           <h2>SubDomain Hierarchy</h2>\n// // // //           <div className=\"tree-legend\">\n// // // //             <span className=\"legend-item\">\n// // // //               <FiFolder className=\"folder-icon\" />\n// // // //               Has children\n// // // //             </span>\n// // // //             <span className=\"legend-item\">\n// // // //               <FiTarget className=\"leaf-icon\" />\n// // // //               Leaf (can have projects)\n// // // //             </span>\n// // // //           </div>\n// // // //         </div>\n\n// // // //         {subDomains.length > 0 ? (\n// // // //           <div className=\"subdomain-tree\">\n// // // //             {subDomains.map((subDomain) => (\n// // // //               <SubDomainNode\n// // // //                 key={subDomain.id}\n// // // //                 subDomain={subDomain}\n// // // //                 level={0}\n// // // //                 isExpanded={expandedNodes.has(subDomain.id)}\n// // // //                 onToggleExpanded={toggleExpanded}\n// // // //                 onEdit={handleEditSubDomain}\n// // // //                 onDelete={handleDeleteSubDomain}\n// // // //                 onAddChild={handleAddSubDomain}\n// // // //                 expandedNodes={expandedNodes}\n// // // //               />\n// // // //             ))}\n// // // //           </div>\n// // // //         ) : (\n// // // //           <div className=\"empty-tree-state\">\n// // // //             <FiFolderPlus size={64} />\n// // // //             <h3>No SubDomains Yet</h3>\n// // // //             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n// // // //             <div className=\"empty-state-examples\">\n// // // //               <h4>Example Structure:</h4>\n// // // //               <div className=\"example-tree\">\n// // // //                 <div className=\"example-item\">📂 Machine Learning</div>\n// // // //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// // // //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// // // //                 <div className=\"example-item\">🎯 Data Science</div>\n// // // //               </div>\n// // // //             </div>\n// // // //             <div className=\"empty-state-actions\">\n// // // //               <button \n// // // //                 className=\"primary-button large\" \n// // // //                 onClick={() => handleAddSubDomain()}\n// // // //               >\n// // // //                 <FiPlus />\n// // // //                 Create Your First SubDomain\n// // // //               </button>\n// // // //               <p className=\"help-text\">\n// // // //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// // // //               </p>\n// // // //             </div>\n// // // //           </div>\n// // // //         )}\n// // // //       </div>\n\n// // // //       {/* Add/Edit Modal */}\n// // // //       {showAddModal && (\n// // // //         <SubDomainModal\n// // // //           subDomain={editingSubDomain}\n// // // //           parent={selectedParent}\n// // // //           domain={domain}\n// // // //           onClose={() => {\n// // // //             setShowAddModal(false);\n// // // //             setEditingSubDomain(null);\n// // // //             setSelectedParent(null);\n// // // //           }}\n// // // //           onSave={() => {\n// // // //             setShowAddModal(false);\n// // // //             setEditingSubDomain(null);\n// // // //             setSelectedParent(null);\n// // // //             fetchDomainAndSubDomains();\n// // // //           }}\n// // // //         />\n// // // //       )}\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // // SubDomain Node Component\n// // // // const SubDomainNode = ({ \n// // // //   subDomain, \n// // // //   level, \n// // // //   isExpanded, \n// // // //   onToggleExpanded, \n// // // //   onEdit, \n// // // //   onDelete, \n// // // //   onAddChild,\n// // // //   expandedNodes \n// // // // }) => {\n// // // //   const [showMenu, setShowMenu] = useState(false);\n// // // //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // //   const isLeaf = !hasChildren;\n\n// // // //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// // // //     title: subDomain.title,\n// // // //     level,\n// // // //     hasChildren,\n// // // //     isLeaf,\n// // // //     isExpanded,\n// // // //     projectCount: subDomain.projectCount\n// // // //   });\n\n// // // //   return (\n// // // //     <div className={`subdomain-node level-${level}`}>\n// // // //       <div className=\"node-content\">\n// // // //         <div className=\"node-main\">\n// // // //           {hasChildren ? (\n// // // //             <button \n// // // //               className=\"expand-button\"\n// // // //               onClick={() => onToggleExpanded(subDomain.id)}\n// // // //             >\n// // // //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// // // //             </button>\n// // // //           ) : (\n// // // //             <div className=\"expand-placeholder\" />\n// // // //           )}\n\n// // // //           <div className=\"node-icon\">\n// // // //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// // // //           </div>\n\n// // // //           <div className=\"node-info\">\n// // // //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// // // //             <p className=\"node-description\">{subDomain.description}</p>\n// // // //             <div className=\"node-stats\">\n// // // //               {hasChildren && (\n// // // //                 <span className=\"stat-badge\">\n// // // //                   {subDomain.children.length} sub-domains\n// // // //                 </span>\n// // // //               )}\n// // // //               {subDomain.projectCount > 0 && (\n// // // //                 <span className=\"stat-badge projects\">\n// // // //                   {subDomain.projectCount} projects\n// // // //                 </span>\n// // // //               )}\n// // // //               {isLeaf && (\n// // // //                 <span className=\"stat-badge leaf\">\n// // // //                   Can have projects\n// // // //                 </span>\n// // // //               )}\n// // // //             </div>\n// // // //           </div>\n// // // //         </div>\n\n// // // //         <div className=\"node-actions\">\n// // // //           <button \n// // // //             className=\"action-button add\" \n// // // //             onClick={() => onAddChild(subDomain)}\n// // // //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// // // //           >\n// // // //             <FiPlus />\n// // // //           </button>\n// // // //           <div className=\"action-menu\">\n// // // //             <button \n// // // //               onClick={() => setShowMenu(!showMenu)}\n// // // //               title=\"More actions\"\n// // // //             >\n// // // //               <FiMoreVertical />\n// // // //             </button>\n// // // //             {showMenu && (\n// // // //               <div className=\"dropdown-menu\">\n// // // //                 <button onClick={() => {\n// // // //                   onEdit(subDomain);\n// // // //                   setShowMenu(false);\n// // // //                 }}>\n// // // //                   <FiEdit /> Edit\n// // // //                 </button>\n// // // //                 <button onClick={() => {\n// // // //                   onAddChild(subDomain);\n// // // //                   setShowMenu(false);\n// // // //                 }}>\n// // // //                   <FiPlus /> Add Child SubDomain\n// // // //                 </button>\n// // // //                 <button onClick={() => {\n// // // //                   onDelete(subDomain);\n// // // //                   setShowMenu(false);\n// // // //                 }} className=\"danger\">\n// // // //                   <FiTrash2 /> Delete\n// // // //                 </button>\n// // // //               </div>\n// // // //             )}\n// // // //           </div>\n// // // //         </div>\n// // // //       </div>\n\n// // // //       {/* Children */}\n// // // //       {hasChildren && isExpanded && (\n// // // //         <div className=\"node-children\">\n// // // //           {subDomain.children.map((child) => (\n// // // //             <SubDomainNode\n// // // //               key={child.id}\n// // // //               subDomain={child}\n// // // //               level={level + 1}\n// // // //               isExpanded={expandedNodes.has(child.id)}\n// // // //               onToggleExpanded={onToggleExpanded}\n// // // //               onEdit={onEdit}\n// // // //               onDelete={onDelete}\n// // // //               onAddChild={onAddChild}\n// // // //               expandedNodes={expandedNodes}\n// // // //             />\n// // // //           ))}\n// // // //         </div>\n// // // //       )}\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // // SubDomain Modal Component\n// // // // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// // // //   const [formData, setFormData] = useState({\n// // // //     title: subDomain?.title || '',\n// // // //     description: subDomain?.description || ''\n// // // //   });\n// // // //   const [loading, setLoading] = useState(false);\n\n// // // //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// // // //     isEditing: !!subDomain,\n// // // //     parentTitle: parent?.title,\n// // // //     domainTitle: domain?.title,\n// // // //     formData\n// // // //   });\n\n// // // //   // Generate slug preview\n// // // //   const generateSlug = (title) => {\n// // // //     return title\n// // // //       .toLowerCase()\n// // // //       .replace(/[^a-z0-9]/g, '-')\n// // // //       .replace(/-+/g, '-')\n// // // //       .replace(/^-|-$/g, '');\n// // // //   };\n\n// // // //   const slugPreview = generateSlug(formData.title);\n\n// // // //   const handleSubmit = async (e) => {\n// // // //     e.preventDefault();\n// // // //     setLoading(true);\n\n// // // //     try {\n// // // //       // Generate slug from title\n// // // //       const slug = generateSlug(formData.title);\n\n// // // //       const requestData = {\n// // // //         ...formData,\n// // // //         // slug: slug,\n// // // //         domainId: domain.id,\n// // // //         parentId: parent?.id || null\n// // // //       };\n\n// // // //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// // // //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// // // //       console.log('📋 SUBDOMAIN SAVE - Generated slug:', slug);\n// // // //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// // // //       if (subDomain) {\n// // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// // // //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// // // //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// // // //         toast.success('Sub-domain updated successfully');\n// // // //       } else {\n// // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// // // //         const response = await authService.createSubDomain(requestData);\n// // // //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// // // //         toast.success('Sub-domain created successfully');\n// // // //       }\n\n// // // //       onSave();\n// // // //     } catch (error) {\n// // // //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// // // //       console.error('❌ SUBDOMAIN SAVE - Error response:', error.response);\n// // // //       console.error('❌ SUBDOMAIN SAVE - Error data:', error.response?.data);\n// // // //       toast.error('Failed to save sub-domain');\n// // // //     } finally {\n// // // //       setLoading(false);\n// // // //     }\n// // // //   };\n\n// // // //   const getModalTitle = () => {\n// // // //     if (subDomain) {\n// // // //       return `Edit SubDomain: ${subDomain.title}`;\n// // // //     }\n// // // //     if (parent) {\n// // // //       return `Add SubDomain under: ${parent.title}`;\n// // // //     }\n// // // //     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n// // // //   };\n\n// // // //   const getLevel = () => {\n// // // //     if (!parent) return 'Root Level';\n// // // //     // This is a simplified level calculation\n// // // //     return `Level ${(parent.level || 0) + 1}`;\n// // // //   };\n\n// // // //   return (\n// // // //     <div className=\"modal-overlay\">\n// // // //       <div className=\"modal\">\n// // // //         <div className=\"modal-header\">\n// // // //           <h2>{getModalTitle()}</h2>\n// // // //           <button onClick={onClose}>×</button>\n// // // //         </div>\n\n// // // //         <form onSubmit={handleSubmit}>\n// // // //           <div className=\"form-group\">\n// // // //             <label>SubDomain Title</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={formData.title}\n// // // //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // // //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// // // //               required\n// // // //             />\n// // // //             {formData.title && (\n// // // //               <div className=\"slug-preview\">\n// // // //                 <small>URL Slug: <code>{slugPreview || 'enter-title-to-see-slug'}</code></small>\n// // // //               </div>\n// // // //             )}\n// // // //           </div>\n\n// // // //           <div className=\"form-group\">\n// // // //             <label>Description (Optional)</label>\n// // // //             <textarea\n// // // //               value={formData.description}\n// // // //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// // // //               rows={3}\n// // // //               placeholder=\"Describe what this sub-domain covers...\"\n// // // //             />\n// // // //           </div>\n\n// // // //           <div className=\"modal-info\">\n// // // //             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n// // // //             {parent && (\n// // // //               <>\n// // // //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// // // //               </>\n// // // //             )}\n// // // //             <strong>Level:</strong> {getLevel()}\n// // // //           </div>\n\n// // // //           <div className=\"modal-actions\">\n// // // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // // //               Cancel\n// // // //             </button>\n// // // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // // //               {loading ? 'Saving...' : 'Save SubDomain'}\n// // // //             </button>\n// // // //           </div>\n// // // //         </form>\n// // // //       </div>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default SubDomainManagement;\n\n// // // // // // src/components/domains/SubDomainManagement.js - REPLACE THE TEST VERSION\n// // // // // import React, { useState, useEffect } from 'react';\n// // // // // import { useParams, useNavigate } from 'react-router-dom';\n// // // // // import { authService } from '../../services/authService';\n// // // // // import { toast } from 'react-toastify';\n// // // // // import {\n// // // // //   FiPlus,\n// // // // //   FiEdit,\n// // // // //   FiTrash2,\n// // // // //   FiChevronDown,\n// // // // //   FiChevronRight,\n// // // // //   FiFolder,\n// // // // //   FiFolderPlus,\n// // // // //   FiFileText,\n// // // // //   FiArrowLeft,\n// // // // //   FiMoreVertical,\n// // // // //   FiMove,\n// // // // //   FiTarget\n// // // // // } from 'react-icons/fi';\n\n// // // // // const SubDomainManagement = () => {\n// // // // //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n\n// // // // //   const { domainId } = useParams();\n// // // // //   const navigate = useNavigate();\n\n// // // // //   const [domain, setDomain] = useState(null);\n// // // // //   const [subDomains, setSubDomains] = useState([]);\n// // // // //   const [loading, setLoading] = useState(true);\n// // // // //   const [showAddModal, setShowAddModal] = useState(false);\n// // // // //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// // // // //   const [selectedParent, setSelectedParent] = useState(null);\n// // // // //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// // // // //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// // // // //     domainId,\n// // // // //     domain: domain?.title,\n// // // // //     subDomainsCount: subDomains.length,\n// // // // //     loading,\n// // // // //     selectedParent: selectedParent?.title,\n// // // // //     expandedCount: expandedNodes.size\n// // // // //   });\n\n// // // // //   useEffect(() => {\n// // // // //     if (domainId) {\n// // // // //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// // // // //       fetchDomainAndSubDomains();\n// // // // //     }\n// // // // //   }, [domainId]);\n\n// // // // //   const fetchDomainAndSubDomains = async () => {\n// // // // //     try {\n// // // // //       setLoading(true);\n\n// // // // //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// // // // //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n\n// // // // //       // First, let's try to get domain details\n// // // // //       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains with filter');\n// // // // //       const domainsResponse = await authService.getDomains({ id: domainId });\n// // // // //       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n\n// // // // //       // Extract domain from response\n// // // // //       let domainData = null;\n// // // // //       if (domainsResponse.data?.domains && domainsResponse.data.domains.length > 0) {\n// // // // //         domainData = domainsResponse.data.domains.find(d => d.id == domainId);\n// // // // //       } else if (domainsResponse.data?.data?.domains && domainsResponse.data.data.domains.length > 0) {\n// // // // //         domainData = domainsResponse.data.data.domains.find(d => d.id == domainId);\n// // // // //       } else if (Array.isArray(domainsResponse.data)) {\n// // // // //         domainData = domainsResponse.data.find(d => d.id == domainId);\n// // // // //       }\n\n// // // // //       console.log('🎯 SUBDOMAIN FETCH - Extracted domain:', domainData);\n\n// // // // //       // If we don't have domain data, create a placeholder\n// // // // //       if (!domainData) {\n// // // // //         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n// // // // //         domainData = {\n// // // // //           id: domainId,\n// // // // //           title: `Domain ${domainId}`,\n// // // // //           description: 'Loading domain details...',\n// // // // //           projectCount: 0\n// // // // //         };\n// // // // //       }\n\n// // // // //       setDomain(domainData);\n\n// // // // //       // Try to get hierarchy if domain exists\n// // // // //       try {\n// // // // //         console.log('🌐 SUBDOMAIN FETCH - Calling getDomainHierarchy');\n// // // // //         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n// // // // //         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n\n// // // // //         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n// // // // //         console.log('🎯 SUBDOMAIN FETCH - Extracted hierarchy data:', hierarchyData);\n\n// // // // //         setSubDomains(hierarchyData?.subDomains || []);\n\n// // // // //         // Auto-expand first level\n// // // // //         if (hierarchyData?.subDomains?.length > 0) {\n// // // // //           const firstLevelIds = hierarchyData.subDomains.map(sd => sd.id);\n// // // // //           setExpandedNodes(new Set(firstLevelIds));\n// // // // //           console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// // // // //         }\n// // // // //       } catch (hierarchyError) {\n// // // // //         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed, starting with empty structure:', hierarchyError);\n// // // // //         setSubDomains([]);\n// // // // //       }\n\n// // // // //     } catch (error) {\n// // // // //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// // // // //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// // // // //       toast.error('Failed to fetch domain information');\n\n// // // // //       // Create fallback domain\n// // // // //       setDomain({\n// // // // //         id: domainId,\n// // // // //         title: `Domain ${domainId}`,\n// // // // //         description: 'Error loading domain details',\n// // // // //         projectCount: 0\n// // // // //       });\n// // // // //       setSubDomains([]);\n// // // // //     } finally {\n// // // // //       setLoading(false);\n// // // // //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// // // // //     }\n// // // // //   };\n\n// // // // //   const handleAddSubDomain = (parent = null) => {\n// // // // //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n\n// // // // //     setSelectedParent(parent);\n// // // // //     setEditingSubDomain(null);\n// // // // //     setShowAddModal(true);\n\n// // // // //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// // // // //       showAddModal: true, \n// // // // //       selectedParent: parent?.title,\n// // // // //       editingSubDomain: null \n// // // // //     });\n// // // // //   };\n\n// // // // //   const handleEditSubDomain = (subDomain) => {\n// // // // //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n\n// // // // //     setSelectedParent(null);\n// // // // //     setEditingSubDomain(subDomain);\n// // // // //     setShowAddModal(true);\n// // // // //   };\n\n// // // // //   const handleDeleteSubDomain = async (subDomain) => {\n// // // // //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // //     const hasProjects = subDomain.projectCount > 0;\n\n// // // // //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// // // // //     if (hasChildren) {\n// // // // //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// // // // //     }\n// // // // //     if (hasProjects) {\n// // // // //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// // // // //     }\n\n// // // // //     if (!window.confirm(confirmMessage)) {\n// // // // //       return;\n// // // // //     }\n\n// // // // //     try {\n// // // // //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// // // // //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// // // // //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// // // // //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n\n// // // // //       const response = await authService.deleteSubDomain(subDomain.id);\n\n// // // // //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n\n// // // // //       toast.success('Sub-domain deleted successfully');\n// // // // //       fetchDomainAndSubDomains();\n// // // // //     } catch (error) {\n// // // // //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// // // // //       toast.error('Failed to delete sub-domain');\n// // // // //     }\n// // // // //   };\n\n// // // // //   const toggleExpanded = (nodeId) => {\n// // // // //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n\n// // // // //     const newExpanded = new Set(expandedNodes);\n// // // // //     if (newExpanded.has(nodeId)) {\n// // // // //       newExpanded.delete(nodeId);\n// // // // //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// // // // //     } else {\n// // // // //       newExpanded.add(nodeId);\n// // // // //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// // // // //     }\n// // // // //     setExpandedNodes(newExpanded);\n// // // // //   };\n\n// // // // //   if (loading) {\n// // // // //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n\n// // // // //     return (\n// // // // //       <div className=\"loading-container\">\n// // // // //         <div className=\"loading-spinner\"></div>\n// // // // //         <p>Loading sub-domains...</p>\n// // // // //       </div>\n// // // // //     );\n// // // // //   }\n\n// // // // //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// // // // //   return (\n// // // // //     <div className=\"subdomain-management\">\n// // // // //       {/* Header with Breadcrumb */}\n// // // // //       <div className=\"page-header\">\n// // // // //         <div className=\"header-content\">\n// // // // //           <div className=\"breadcrumb\">\n// // // // //             <button \n// // // // //               className=\"breadcrumb-link\"\n// // // // //               onClick={() => navigate('/domains')}\n// // // // //             >\n// // // // //               <FiArrowLeft />\n// // // // //               Domains\n// // // // //             </button>\n// // // // //             <span className=\"breadcrumb-separator\">/</span>\n// // // // //             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n// // // // //           </div>\n// // // // //           <h1>SubDomain Management</h1>\n// // // // //           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n// // // // //         </div>\n// // // // //         <div className=\"header-actions\">\n// // // // //           <button \n// // // // //             className=\"primary-button\" \n// // // // //             onClick={() => handleAddSubDomain()}\n// // // // //           >\n// // // // //             <FiPlus />\n// // // // //             Add Root SubDomain\n// // // // //           </button>\n// // // // //         </div>\n// // // // //       </div>\n\n// // // // //       {/* Quick Guide */}\n// // // // //       <div className=\"quick-guide\">\n// // // // //         <h3>How to Build Your SubDomain Hierarchy:</h3>\n// // // // //         <div className=\"guide-steps\">\n// // // // //           <div className=\"guide-step\">\n// // // // //             <span className=\"step-number\">1</span>\n// // // // //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// // // // //           </div>\n// // // // //           <div className=\"guide-step\">\n// // // // //             <span className=\"step-number\">2</span>\n// // // // //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// // // // //           </div>\n// // // // //           <div className=\"guide-step\">\n// // // // //             <span className=\"step-number\">3</span>\n// // // // //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       </div>\n\n// // // // //       {/* Domain Info Card */}\n// // // // //       {domain && (\n// // // // //         <div className=\"domain-info-card\">\n// // // // //           <div className=\"domain-icon\">\n// // // // //             <FiFolder />\n// // // // //           </div>\n// // // // //           <div className=\"domain-details\">\n// // // // //             <h3>{domain.title}</h3>\n// // // // //             <p>{domain.description}</p>\n// // // // //             <div className=\"domain-stats\">\n// // // // //               <span className=\"stat-item\">\n// // // // //                 <strong>{subDomains.length}</strong> root sub-domains\n// // // // //               </span>\n// // // // //               <span className=\"stat-item\">\n// // // // //                 <strong>{domain.projectCount || 0}</strong> total projects\n// // // // //               </span>\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       )}\n\n// // // // //       {/* SubDomain Tree */}\n// // // // //       <div className=\"subdomain-tree-container\">\n// // // // //         <div className=\"tree-header\">\n// // // // //           <h2>SubDomain Hierarchy</h2>\n// // // // //           <div className=\"tree-legend\">\n// // // // //             <span className=\"legend-item\">\n// // // // //               <FiFolder className=\"folder-icon\" />\n// // // // //               Has children\n// // // // //             </span>\n// // // // //             <span className=\"legend-item\">\n// // // // //               <FiTarget className=\"leaf-icon\" />\n// // // // //               Leaf (can have projects)\n// // // // //             </span>\n// // // // //           </div>\n// // // // //         </div>\n\n// // // // //         {subDomains.length > 0 ? (\n// // // // //           <div className=\"subdomain-tree\">\n// // // // //             {subDomains.map((subDomain) => (\n// // // // //               <SubDomainNode\n// // // // //                 key={subDomain.id}\n// // // // //                 subDomain={subDomain}\n// // // // //                 level={0}\n// // // // //                 isExpanded={expandedNodes.has(subDomain.id)}\n// // // // //                 onToggleExpanded={toggleExpanded}\n// // // // //                 onEdit={handleEditSubDomain}\n// // // // //                 onDelete={handleDeleteSubDomain}\n// // // // //                 onAddChild={handleAddSubDomain}\n// // // // //                 expandedNodes={expandedNodes}\n// // // // //               />\n// // // // //             ))}\n// // // // //           </div>\n// // // // //         ) : (\n// // // // //           <div className=\"empty-tree-state\">\n// // // // //             <FiFolderPlus size={64} />\n// // // // //             <h3>No SubDomains Yet</h3>\n// // // // //             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n// // // // //             <div className=\"empty-state-examples\">\n// // // // //               <h4>Example Structure:</h4>\n// // // // //               <div className=\"example-tree\">\n// // // // //                 <div className=\"example-item\">📂 Machine Learning</div>\n// // // // //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// // // // //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// // // // //                 <div className=\"example-item\">🎯 Data Science</div>\n// // // // //               </div>\n// // // // //             </div>\n// // // // //             <div className=\"empty-state-actions\">\n// // // // //               <button \n// // // // //                 className=\"primary-button large\" \n// // // // //                 onClick={() => handleAddSubDomain()}\n// // // // //               >\n// // // // //                 <FiPlus />\n// // // // //                 Create Your First SubDomain\n// // // // //               </button>\n// // // // //               <p className=\"help-text\">\n// // // // //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// // // // //               </p>\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         )}\n// // // // //       </div>\n\n// // // // //       {/* Add/Edit Modal */}\n// // // // //       {showAddModal && (\n// // // // //         <SubDomainModal\n// // // // //           subDomain={editingSubDomain}\n// // // // //           parent={selectedParent}\n// // // // //           domain={domain}\n// // // // //           onClose={() => {\n// // // // //             setShowAddModal(false);\n// // // // //             setEditingSubDomain(null);\n// // // // //             setSelectedParent(null);\n// // // // //           }}\n// // // // //           onSave={() => {\n// // // // //             setShowAddModal(false);\n// // // // //             setEditingSubDomain(null);\n// // // // //             setSelectedParent(null);\n// // // // //             fetchDomainAndSubDomains();\n// // // // //           }}\n// // // // //         />\n// // // // //       )}\n// // // // //     </div>\n// // // // //   );\n// // // // // };\n\n// // // // // // SubDomain Node Component\n// // // // // const SubDomainNode = ({ \n// // // // //   subDomain, \n// // // // //   level, \n// // // // //   isExpanded, \n// // // // //   onToggleExpanded, \n// // // // //   onEdit, \n// // // // //   onDelete, \n// // // // //   onAddChild,\n// // // // //   expandedNodes \n// // // // // }) => {\n// // // // //   const [showMenu, setShowMenu] = useState(false);\n// // // // //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // //   const isLeaf = !hasChildren;\n\n// // // // //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// // // // //     title: subDomain.title,\n// // // // //     level,\n// // // // //     hasChildren,\n// // // // //     isLeaf,\n// // // // //     isExpanded,\n// // // // //     projectCount: subDomain.projectCount\n// // // // //   });\n\n// // // // //   return (\n// // // // //     <div className={`subdomain-node level-${level}`}>\n// // // // //       <div className=\"node-content\">\n// // // // //         <div className=\"node-main\">\n// // // // //           {hasChildren ? (\n// // // // //             <button \n// // // // //               className=\"expand-button\"\n// // // // //               onClick={() => onToggleExpanded(subDomain.id)}\n// // // // //             >\n// // // // //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// // // // //             </button>\n// // // // //           ) : (\n// // // // //             <div className=\"expand-placeholder\" />\n// // // // //           )}\n\n// // // // //           <div className=\"node-icon\">\n// // // // //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// // // // //           </div>\n\n// // // // //           <div className=\"node-info\">\n// // // // //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// // // // //             <p className=\"node-description\">{subDomain.description}</p>\n// // // // //             <div className=\"node-stats\">\n// // // // //               {hasChildren && (\n// // // // //                 <span className=\"stat-badge\">\n// // // // //                   {subDomain.children.length} sub-domains\n// // // // //                 </span>\n// // // // //               )}\n// // // // //               {subDomain.projectCount > 0 && (\n// // // // //                 <span className=\"stat-badge projects\">\n// // // // //                   {subDomain.projectCount} projects\n// // // // //                 </span>\n// // // // //               )}\n// // // // //               {isLeaf && (\n// // // // //                 <span className=\"stat-badge leaf\">\n// // // // //                   Can have projects\n// // // // //                 </span>\n// // // // //               )}\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         </div>\n\n// // // // //         <div className=\"node-actions\">\n// // // // //           <button \n// // // // //             className=\"action-button add\" \n// // // // //             onClick={() => onAddChild(subDomain)}\n// // // // //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// // // // //           >\n// // // // //             <FiPlus />\n// // // // //           </button>\n// // // // //           <div className=\"action-menu\">\n// // // // //             <button \n// // // // //               onClick={() => setShowMenu(!showMenu)}\n// // // // //               title=\"More actions\"\n// // // // //             >\n// // // // //               <FiMoreVertical />\n// // // // //             </button>\n// // // // //             {showMenu && (\n// // // // //               <div className=\"dropdown-menu\">\n// // // // //                 <button onClick={() => {\n// // // // //                   onEdit(subDomain);\n// // // // //                   setShowMenu(false);\n// // // // //                 }}>\n// // // // //                   <FiEdit /> Edit\n// // // // //                 </button>\n// // // // //                 <button onClick={() => {\n// // // // //                   onAddChild(subDomain);\n// // // // //                   setShowMenu(false);\n// // // // //                 }}>\n// // // // //                   <FiPlus /> Add Child SubDomain\n// // // // //                 </button>\n// // // // //                 <button onClick={() => {\n// // // // //                   onDelete(subDomain);\n// // // // //                   setShowMenu(false);\n// // // // //                 }} className=\"danger\">\n// // // // //                   <FiTrash2 /> Delete\n// // // // //                 </button>\n// // // // //               </div>\n// // // // //             )}\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       </div>\n\n// // // // //       {/* Children */}\n// // // // //       {hasChildren && isExpanded && (\n// // // // //         <div className=\"node-children\">\n// // // // //           {subDomain.children.map((child) => (\n// // // // //             <SubDomainNode\n// // // // //               key={child.id}\n// // // // //               subDomain={child}\n// // // // //               level={level + 1}\n// // // // //               isExpanded={expandedNodes.has(child.id)}\n// // // // //               onToggleExpanded={onToggleExpanded}\n// // // // //               onEdit={onEdit}\n// // // // //               onDelete={onDelete}\n// // // // //               onAddChild={onAddChild}\n// // // // //               expandedNodes={expandedNodes}\n// // // // //             />\n// // // // //           ))}\n// // // // //         </div>\n// // // // //       )}\n// // // // //     </div>\n// // // // //   );\n// // // // // };\n\n// // // // // // SubDomain Modal Component\n// // // // // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// // // // //   const [formData, setFormData] = useState({\n// // // // //     title: subDomain?.title || '',\n// // // // //     description: subDomain?.description || ''\n// // // // //   });\n// // // // //   const [loading, setLoading] = useState(false);\n\n// // // // //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// // // // //     isEditing: !!subDomain,\n// // // // //     parentTitle: parent?.title,\n// // // // //     domainTitle: domain?.title,\n// // // // //     formData\n// // // // //   });\n\n// // // // //   // Generate slug preview\n// // // // //   const generateSlug = (title) => {\n// // // // //     return title\n// // // // //       .toLowerCase()\n// // // // //       .replace(/[^a-z0-9]/g, '-')\n// // // // //       .replace(/-+/g, '-')\n// // // // //       .replace(/^-|-$/g, '');\n// // // // //   };\n\n// // // // //   const slugPreview = generateSlug(formData.title);\n\n// // // // //   const handleSubmit = async (e) => {\n// // // // //     e.preventDefault();\n// // // // //     setLoading(true);\n\n// // // // //     try {\n// // // // //       // Generate slug from title\n// // // // //       const slug = generateSlug(formData.title);\n\n// // // // //       const requestData = {\n// // // // //         ...formData,\n// // // // //         slug: slug,\n// // // // //         domainId: domain.id,\n// // // // //         parentId: parent?.id || null\n// // // // //       };\n\n// // // // //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// // // // //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// // // // //       console.log('📋 SUBDOMAIN SAVE - Generated slug:', slug);\n// // // // //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// // // // //       if (subDomain) {\n// // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// // // // //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// // // // //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// // // // //         toast.success('Sub-domain updated successfully');\n// // // // //       } else {\n// // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// // // // //         const response = await authService.createSubDomain(requestData);\n// // // // //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// // // // //         toast.success('Sub-domain created successfully');\n// // // // //       }\n\n// // // // //       onSave();\n// // // // //     } catch (error) {\n// // // // //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// // // // //       console.error('❌ SUBDOMAIN SAVE - Error response:', error.response);\n// // // // //       console.error('❌ SUBDOMAIN SAVE - Error data:', error.response?.data);\n// // // // //       toast.error('Failed to save sub-domain');\n// // // // //     } finally {\n// // // // //       setLoading(false);\n// // // // //     }\n// // // // //   };\n\n// // // // //   const getModalTitle = () => {\n// // // // //     if (subDomain) {\n// // // // //       return `Edit SubDomain: ${subDomain.title}`;\n// // // // //     }\n// // // // //     if (parent) {\n// // // // //       return `Add SubDomain under: ${parent.title}`;\n// // // // //     }\n// // // // //     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n// // // // //   };\n\n// // // // //   const getLevel = () => {\n// // // // //     if (!parent) return 'Root Level';\n// // // // //     // This is a simplified level calculation\n// // // // //     return `Level ${(parent.level || 0) + 1}`;\n// // // // //   };\n\n// // // // //   return (\n// // // // //     <div className=\"modal-overlay\">\n// // // // //       <div className=\"modal\">\n// // // // //         <div className=\"modal-header\">\n// // // // //           <h2>{getModalTitle()}</h2>\n// // // // //           <button onClick={onClose}>×</button>\n// // // // //         </div>\n\n// // // // //         <form onSubmit={handleSubmit}>\n// // // // //           <div className=\"form-group\">\n// // // // //             <label>SubDomain Title</label>\n// // // // //             <input\n// // // // //               type=\"text\"\n// // // // //               value={formData.title}\n// // // // //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // // // //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// // // // //               required\n// // // // //             />\n// // // // //             {formData.title && (\n// // // // //               <div className=\"slug-preview\">\n// // // // //                 <small>URL Slug: <code>{slugPreview || 'enter-title-to-see-slug'}</code></small>\n// // // // //               </div>\n// // // // //             )}\n// // // // //           </div>\n\n// // // // //           <div className=\"form-group\">\n// // // // //             <label>Description (Optional)</label>\n// // // // //             <textarea\n// // // // //               value={formData.description}\n// // // // //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// // // // //               rows={3}\n// // // // //               placeholder=\"Describe what this sub-domain covers...\"\n// // // // //             />\n// // // // //           </div>\n\n// // // // //           <div className=\"modal-info\">\n// // // // //             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n// // // // //             {parent && (\n// // // // //               <>\n// // // // //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// // // // //               </>\n// // // // //             )}\n// // // // //             <strong>Level:</strong> {getLevel()}\n// // // // //           </div>\n\n// // // // //           <div className=\"modal-actions\">\n// // // // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // // // //               Cancel\n// // // // //             </button>\n// // // // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // // // //               {loading ? 'Saving...' : 'Save SubDomain'}\n// // // // //             </button>\n// // // // //           </div>\n// // // // //         </form>\n// // // // //       </div>\n// // // // //     </div>\n// // // // //   );\n// // // // // };\n\n// // // // // export default SubDomainManagement;\n\n// // // // // // // src/components/domains/SubDomainManagement.js - REPLACE THE TEST VERSION\n// // // // // // import React, { useState, useEffect } from 'react';\n// // // // // // import { useParams, useNavigate } from 'react-router-dom';\n// // // // // // import { authService } from '../../services/authService';\n// // // // // // import { toast } from 'react-toastify';\n// // // // // // import {\n// // // // // //   FiPlus,\n// // // // // //   FiEdit,\n// // // // // //   FiTrash2,\n// // // // // //   FiChevronDown,\n// // // // // //   FiChevronRight,\n// // // // // //   FiFolder,\n// // // // // //   FiFolderPlus,\n// // // // // //   FiFileText,\n// // // // // //   FiArrowLeft,\n// // // // // //   FiMoreVertical,\n// // // // // //   FiMove,\n// // // // // //   FiTarget\n// // // // // // } from 'react-icons/fi';\n\n// // // // // // const SubDomainManagement = () => {\n// // // // // //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n\n// // // // // //   const { domainId } = useParams();\n// // // // // //   const navigate = useNavigate();\n\n// // // // // //   const [domain, setDomain] = useState(null);\n// // // // // //   const [subDomains, setSubDomains] = useState([]);\n// // // // // //   const [loading, setLoading] = useState(true);\n// // // // // //   const [showAddModal, setShowAddModal] = useState(false);\n// // // // // //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// // // // // //   const [selectedParent, setSelectedParent] = useState(null);\n// // // // // //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// // // // // //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// // // // // //     domainId,\n// // // // // //     domain: domain?.title,\n// // // // // //     subDomainsCount: subDomains.length,\n// // // // // //     loading,\n// // // // // //     selectedParent: selectedParent?.title,\n// // // // // //     expandedCount: expandedNodes.size\n// // // // // //   });\n\n// // // // // //   useEffect(() => {\n// // // // // //     if (domainId) {\n// // // // // //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// // // // // //       fetchDomainAndSubDomains();\n// // // // // //     }\n// // // // // //   }, [domainId]);\n\n// // // // // //   const fetchDomainAndSubDomains = async () => {\n// // // // // //     try {\n// // // // // //       setLoading(true);\n\n// // // // // //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// // // // // //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n\n// // // // // //       // First, let's try to get domain details\n// // // // // //       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains with filter');\n// // // // // //       const domainsResponse = await authService.getDomains({ id: domainId });\n// // // // // //       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n\n// // // // // //       // Extract domain from response\n// // // // // //       let domainData = null;\n// // // // // //       if (domainsResponse.data?.domains && domainsResponse.data.domains.length > 0) {\n// // // // // //         domainData = domainsResponse.data.domains.find(d => d.id == domainId);\n// // // // // //       } else if (domainsResponse.data?.data?.domains && domainsResponse.data.data.domains.length > 0) {\n// // // // // //         domainData = domainsResponse.data.data.domains.find(d => d.id == domainId);\n// // // // // //       } else if (Array.isArray(domainsResponse.data)) {\n// // // // // //         domainData = domainsResponse.data.find(d => d.id == domainId);\n// // // // // //       }\n\n// // // // // //       console.log('🎯 SUBDOMAIN FETCH - Extracted domain:', domainData);\n\n// // // // // //       // If we don't have domain data, create a placeholder\n// // // // // //       if (!domainData) {\n// // // // // //         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n// // // // // //         domainData = {\n// // // // // //           id: domainId,\n// // // // // //           title: `Domain ${domainId}`,\n// // // // // //           description: 'Loading domain details...',\n// // // // // //           projectCount: 0\n// // // // // //         };\n// // // // // //       }\n\n// // // // // //       setDomain(domainData);\n\n// // // // // //       // Try to get hierarchy if domain exists\n// // // // // //       try {\n// // // // // //         console.log('🌐 SUBDOMAIN FETCH - Calling getDomainHierarchy');\n// // // // // //         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n// // // // // //         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n\n// // // // // //         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n// // // // // //         console.log('🎯 SUBDOMAIN FETCH - Extracted hierarchy data:', hierarchyData);\n\n// // // // // //         setSubDomains(hierarchyData?.subDomains || []);\n\n// // // // // //         // Auto-expand first level\n// // // // // //         if (hierarchyData?.subDomains?.length > 0) {\n// // // // // //           const firstLevelIds = hierarchyData.subDomains.map(sd => sd.id);\n// // // // // //           setExpandedNodes(new Set(firstLevelIds));\n// // // // // //           console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// // // // // //         }\n// // // // // //       } catch (hierarchyError) {\n// // // // // //         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed, starting with empty structure:', hierarchyError);\n// // // // // //         setSubDomains([]);\n// // // // // //       }\n\n// // // // // //     } catch (error) {\n// // // // // //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// // // // // //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// // // // // //       toast.error('Failed to fetch domain information');\n\n// // // // // //       // Create fallback domain\n// // // // // //       setDomain({\n// // // // // //         id: domainId,\n// // // // // //         title: `Domain ${domainId}`,\n// // // // // //         description: 'Error loading domain details',\n// // // // // //         projectCount: 0\n// // // // // //       });\n// // // // // //       setSubDomains([]);\n// // // // // //     } finally {\n// // // // // //       setLoading(false);\n// // // // // //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const handleAddSubDomain = (parent = null) => {\n// // // // // //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// // // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n\n// // // // // //     setSelectedParent(parent);\n// // // // // //     setEditingSubDomain(null);\n// // // // // //     setShowAddModal(true);\n\n// // // // // //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// // // // // //       showAddModal: true, \n// // // // // //       selectedParent: parent?.title,\n// // // // // //       editingSubDomain: null \n// // // // // //     });\n// // // // // //   };\n\n// // // // // //   const handleEditSubDomain = (subDomain) => {\n// // // // // //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// // // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n\n// // // // // //     setSelectedParent(null);\n// // // // // //     setEditingSubDomain(subDomain);\n// // // // // //     setShowAddModal(true);\n// // // // // //   };\n\n// // // // // //   const handleDeleteSubDomain = async (subDomain) => {\n// // // // // //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // // //     const hasProjects = subDomain.projectCount > 0;\n\n// // // // // //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// // // // // //     if (hasChildren) {\n// // // // // //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// // // // // //     }\n// // // // // //     if (hasProjects) {\n// // // // // //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// // // // // //     }\n\n// // // // // //     if (!window.confirm(confirmMessage)) {\n// // // // // //       return;\n// // // // // //     }\n\n// // // // // //     try {\n// // // // // //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// // // // // //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// // // // // //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// // // // // //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n\n// // // // // //       const response = await authService.deleteSubDomain(subDomain.id);\n\n// // // // // //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n\n// // // // // //       toast.success('Sub-domain deleted successfully');\n// // // // // //       fetchDomainAndSubDomains();\n// // // // // //     } catch (error) {\n// // // // // //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// // // // // //       toast.error('Failed to delete sub-domain');\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const toggleExpanded = (nodeId) => {\n// // // // // //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n\n// // // // // //     const newExpanded = new Set(expandedNodes);\n// // // // // //     if (newExpanded.has(nodeId)) {\n// // // // // //       newExpanded.delete(nodeId);\n// // // // // //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// // // // // //     } else {\n// // // // // //       newExpanded.add(nodeId);\n// // // // // //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// // // // // //     }\n// // // // // //     setExpandedNodes(newExpanded);\n// // // // // //   };\n\n// // // // // //   if (loading) {\n// // // // // //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n\n// // // // // //     return (\n// // // // // //       <div className=\"loading-container\">\n// // // // // //         <div className=\"loading-spinner\"></div>\n// // // // // //         <p>Loading sub-domains...</p>\n// // // // // //       </div>\n// // // // // //     );\n// // // // // //   }\n\n// // // // // //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// // // // // //   return (\n// // // // // //     <div className=\"subdomain-management\">\n// // // // // //       {/* Header with Breadcrumb */}\n// // // // // //       <div className=\"page-header\">\n// // // // // //         <div className=\"header-content\">\n// // // // // //           <div className=\"breadcrumb\">\n// // // // // //             <button \n// // // // // //               className=\"breadcrumb-link\"\n// // // // // //               onClick={() => navigate('/domains')}\n// // // // // //             >\n// // // // // //               <FiArrowLeft />\n// // // // // //               Domains\n// // // // // //             </button>\n// // // // // //             <span className=\"breadcrumb-separator\">/</span>\n// // // // // //             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n// // // // // //           </div>\n// // // // // //           <h1>SubDomain Management</h1>\n// // // // // //           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n// // // // // //         </div>\n// // // // // //         <div className=\"header-actions\">\n// // // // // //           <button \n// // // // // //             className=\"primary-button\" \n// // // // // //             onClick={() => handleAddSubDomain()}\n// // // // // //           >\n// // // // // //             <FiPlus />\n// // // // // //             Add Root SubDomain\n// // // // // //           </button>\n// // // // // //         </div>\n// // // // // //       </div>\n\n// // // // // //       {/* Quick Guide */}\n// // // // // //       <div className=\"quick-guide\">\n// // // // // //         <h3>How to Build Your SubDomain Hierarchy:</h3>\n// // // // // //         <div className=\"guide-steps\">\n// // // // // //           <div className=\"guide-step\">\n// // // // // //             <span className=\"step-number\">1</span>\n// // // // // //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// // // // // //           </div>\n// // // // // //           <div className=\"guide-step\">\n// // // // // //             <span className=\"step-number\">2</span>\n// // // // // //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// // // // // //           </div>\n// // // // // //           <div className=\"guide-step\">\n// // // // // //             <span className=\"step-number\">3</span>\n// // // // // //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       </div>\n\n// // // // // //       {/* Domain Info Card */}\n// // // // // //       {domain && (\n// // // // // //         <div className=\"domain-info-card\">\n// // // // // //           <div className=\"domain-icon\">\n// // // // // //             <FiFolder />\n// // // // // //           </div>\n// // // // // //           <div className=\"domain-details\">\n// // // // // //             <h3>{domain.title}</h3>\n// // // // // //             <p>{domain.description}</p>\n// // // // // //             <div className=\"domain-stats\">\n// // // // // //               <span className=\"stat-item\">\n// // // // // //                 <strong>{subDomains.length}</strong> root sub-domains\n// // // // // //               </span>\n// // // // // //               <span className=\"stat-item\">\n// // // // // //                 <strong>{domain.projectCount || 0}</strong> total projects\n// // // // // //               </span>\n// // // // // //             </div>\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       )}\n\n// // // // // //       {/* SubDomain Tree */}\n// // // // // //       <div className=\"subdomain-tree-container\">\n// // // // // //         <div className=\"tree-header\">\n// // // // // //           <h2>SubDomain Hierarchy</h2>\n// // // // // //           <div className=\"tree-legend\">\n// // // // // //             <span className=\"legend-item\">\n// // // // // //               <FiFolder className=\"folder-icon\" />\n// // // // // //               Has children\n// // // // // //             </span>\n// // // // // //             <span className=\"legend-item\">\n// // // // // //               <FiTarget className=\"leaf-icon\" />\n// // // // // //               Leaf (can have projects)\n// // // // // //             </span>\n// // // // // //           </div>\n// // // // // //         </div>\n\n// // // // // //         {subDomains.length > 0 ? (\n// // // // // //           <div className=\"subdomain-tree\">\n// // // // // //             {subDomains.map((subDomain) => (\n// // // // // //               <SubDomainNode\n// // // // // //                 key={subDomain.id}\n// // // // // //                 subDomain={subDomain}\n// // // // // //                 level={0}\n// // // // // //                 isExpanded={expandedNodes.has(subDomain.id)}\n// // // // // //                 onToggleExpanded={toggleExpanded}\n// // // // // //                 onEdit={handleEditSubDomain}\n// // // // // //                 onDelete={handleDeleteSubDomain}\n// // // // // //                 onAddChild={handleAddSubDomain}\n// // // // // //                 expandedNodes={expandedNodes}\n// // // // // //               />\n// // // // // //             ))}\n// // // // // //           </div>\n// // // // // //         ) : (\n// // // // // //           <div className=\"empty-tree-state\">\n// // // // // //             <FiFolderPlus size={64} />\n// // // // // //             <h3>No SubDomains Yet</h3>\n// // // // // //             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n// // // // // //             <div className=\"empty-state-examples\">\n// // // // // //               <h4>Example Structure:</h4>\n// // // // // //               <div className=\"example-tree\">\n// // // // // //                 <div className=\"example-item\">📂 Machine Learning</div>\n// // // // // //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// // // // // //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// // // // // //                 <div className=\"example-item\">🎯 Data Science</div>\n// // // // // //               </div>\n// // // // // //             </div>\n// // // // // //             <div className=\"empty-state-actions\">\n// // // // // //               <button \n// // // // // //                 className=\"primary-button large\" \n// // // // // //                 onClick={() => handleAddSubDomain()}\n// // // // // //               >\n// // // // // //                 <FiPlus />\n// // // // // //                 Create Your First SubDomain\n// // // // // //               </button>\n// // // // // //               <p className=\"help-text\">\n// // // // // //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// // // // // //               </p>\n// // // // // //             </div>\n// // // // // //           </div>\n// // // // // //         )}\n// // // // // //       </div>\n\n// // // // // //       {/* Add/Edit Modal */}\n// // // // // //       {showAddModal && (\n// // // // // //         <SubDomainModal\n// // // // // //           subDomain={editingSubDomain}\n// // // // // //           parent={selectedParent}\n// // // // // //           domain={domain}\n// // // // // //           onClose={() => {\n// // // // // //             setShowAddModal(false);\n// // // // // //             setEditingSubDomain(null);\n// // // // // //             setSelectedParent(null);\n// // // // // //           }}\n// // // // // //           onSave={() => {\n// // // // // //             setShowAddModal(false);\n// // // // // //             setEditingSubDomain(null);\n// // // // // //             setSelectedParent(null);\n// // // // // //             fetchDomainAndSubDomains();\n// // // // // //           }}\n// // // // // //         />\n// // // // // //       )}\n// // // // // //     </div>\n// // // // // //   );\n// // // // // // };\n\n// // // // // // // SubDomain Node Component\n// // // // // // const SubDomainNode = ({ \n// // // // // //   subDomain, \n// // // // // //   level, \n// // // // // //   isExpanded, \n// // // // // //   onToggleExpanded, \n// // // // // //   onEdit, \n// // // // // //   onDelete, \n// // // // // //   onAddChild,\n// // // // // //   expandedNodes \n// // // // // // }) => {\n// // // // // //   const [showMenu, setShowMenu] = useState(false);\n// // // // // //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // // //   const isLeaf = !hasChildren;\n\n// // // // // //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// // // // // //     title: subDomain.title,\n// // // // // //     level,\n// // // // // //     hasChildren,\n// // // // // //     isLeaf,\n// // // // // //     isExpanded,\n// // // // // //     projectCount: subDomain.projectCount\n// // // // // //   });\n\n// // // // // //   return (\n// // // // // //     <div className={`subdomain-node level-${level}`}>\n// // // // // //       <div className=\"node-content\">\n// // // // // //         <div className=\"node-main\">\n// // // // // //           {hasChildren ? (\n// // // // // //             <button \n// // // // // //               className=\"expand-button\"\n// // // // // //               onClick={() => onToggleExpanded(subDomain.id)}\n// // // // // //             >\n// // // // // //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// // // // // //             </button>\n// // // // // //           ) : (\n// // // // // //             <div className=\"expand-placeholder\" />\n// // // // // //           )}\n\n// // // // // //           <div className=\"node-icon\">\n// // // // // //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// // // // // //           </div>\n\n// // // // // //           <div className=\"node-info\">\n// // // // // //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// // // // // //             <p className=\"node-description\">{subDomain.description}</p>\n// // // // // //             <div className=\"node-stats\">\n// // // // // //               {hasChildren && (\n// // // // // //                 <span className=\"stat-badge\">\n// // // // // //                   {subDomain.children.length} sub-domains\n// // // // // //                 </span>\n// // // // // //               )}\n// // // // // //               {subDomain.projectCount > 0 && (\n// // // // // //                 <span className=\"stat-badge projects\">\n// // // // // //                   {subDomain.projectCount} projects\n// // // // // //                 </span>\n// // // // // //               )}\n// // // // // //               {isLeaf && (\n// // // // // //                 <span className=\"stat-badge leaf\">\n// // // // // //                   Can have projects\n// // // // // //                 </span>\n// // // // // //               )}\n// // // // // //             </div>\n// // // // // //           </div>\n// // // // // //         </div>\n\n// // // // // //         <div className=\"node-actions\">\n// // // // // //           <button \n// // // // // //             className=\"action-button add\" \n// // // // // //             onClick={() => onAddChild(subDomain)}\n// // // // // //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// // // // // //           >\n// // // // // //             <FiPlus />\n// // // // // //           </button>\n// // // // // //           <div className=\"action-menu\">\n// // // // // //             <button \n// // // // // //               onClick={() => setShowMenu(!showMenu)}\n// // // // // //               title=\"More actions\"\n// // // // // //             >\n// // // // // //               <FiMoreVertical />\n// // // // // //             </button>\n// // // // // //             {showMenu && (\n// // // // // //               <div className=\"dropdown-menu\">\n// // // // // //                 <button onClick={() => {\n// // // // // //                   onEdit(subDomain);\n// // // // // //                   setShowMenu(false);\n// // // // // //                 }}>\n// // // // // //                   <FiEdit /> Edit\n// // // // // //                 </button>\n// // // // // //                 <button onClick={() => {\n// // // // // //                   onAddChild(subDomain);\n// // // // // //                   setShowMenu(false);\n// // // // // //                 }}>\n// // // // // //                   <FiPlus /> Add Child SubDomain\n// // // // // //                 </button>\n// // // // // //                 <button onClick={() => {\n// // // // // //                   onDelete(subDomain);\n// // // // // //                   setShowMenu(false);\n// // // // // //                 }} className=\"danger\">\n// // // // // //                   <FiTrash2 /> Delete\n// // // // // //                 </button>\n// // // // // //               </div>\n// // // // // //             )}\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       </div>\n\n// // // // // //       {/* Children */}\n// // // // // //       {hasChildren && isExpanded && (\n// // // // // //         <div className=\"node-children\">\n// // // // // //           {subDomain.children.map((child) => (\n// // // // // //             <SubDomainNode\n// // // // // //               key={child.id}\n// // // // // //               subDomain={child}\n// // // // // //               level={level + 1}\n// // // // // //               isExpanded={expandedNodes.has(child.id)}\n// // // // // //               onToggleExpanded={onToggleExpanded}\n// // // // // //               onEdit={onEdit}\n// // // // // //               onDelete={onDelete}\n// // // // // //               onAddChild={onAddChild}\n// // // // // //               expandedNodes={expandedNodes}\n// // // // // //             />\n// // // // // //           ))}\n// // // // // //         </div>\n// // // // // //       )}\n// // // // // //     </div>\n// // // // // //   );\n// // // // // // };\n\n// // // // // // // SubDomain Modal Component\n// // // // // // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// // // // // //   const [formData, setFormData] = useState({\n// // // // // //     title: subDomain?.title || '',\n// // // // // //     description: subDomain?.description || ''\n// // // // // //   });\n// // // // // //   const [loading, setLoading] = useState(false);\n\n// // // // // //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// // // // // //     isEditing: !!subDomain,\n// // // // // //     parentTitle: parent?.title,\n// // // // // //     domainTitle: domain?.title,\n// // // // // //     formData\n// // // // // //   });\n\n// // // // // //   const handleSubmit = async (e) => {\n// // // // // //     e.preventDefault();\n// // // // // //     setLoading(true);\n\n// // // // // //     try {\n// // // // // //       const requestData = {\n// // // // // //         ...formData,\n// // // // // //         domainId: domain.id,\n// // // // // //         parentId: parent?.id || null\n// // // // // //       };\n\n// // // // // //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// // // // // //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// // // // // //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// // // // // //       if (subDomain) {\n// // // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// // // // // //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// // // // // //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// // // // // //         toast.success('Sub-domain updated successfully');\n// // // // // //       } else {\n// // // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// // // // // //         const response = await authService.createSubDomain(requestData);\n// // // // // //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// // // // // //         toast.success('Sub-domain created successfully');\n// // // // // //       }\n\n// // // // // //       onSave();\n// // // // // //     } catch (error) {\n// // // // // //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// // // // // //       toast.error('Failed to save sub-domain');\n// // // // // //     } finally {\n// // // // // //       setLoading(false);\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const getModalTitle = () => {\n// // // // // //     if (subDomain) {\n// // // // // //       return `Edit SubDomain: ${subDomain.title}`;\n// // // // // //     }\n// // // // // //     if (parent) {\n// // // // // //       return `Add SubDomain under: ${parent.title}`;\n// // // // // //     }\n// // // // // //     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n// // // // // //   };\n\n// // // // // //   const getLevel = () => {\n// // // // // //     if (!parent) return 'Root Level';\n// // // // // //     // This is a simplified level calculation\n// // // // // //     return `Level ${(parent.level || 0) + 1}`;\n// // // // // //   };\n\n// // // // // //   return (\n// // // // // //     <div className=\"modal-overlay\">\n// // // // // //       <div className=\"modal\">\n// // // // // //         <div className=\"modal-header\">\n// // // // // //           <h2>{getModalTitle()}</h2>\n// // // // // //           <button onClick={onClose}>×</button>\n// // // // // //         </div>\n\n// // // // // //         <form onSubmit={handleSubmit}>\n// // // // // //           <div className=\"form-group\">\n// // // // // //             <label>SubDomain Title</label>\n// // // // // //             <input\n// // // // // //               type=\"text\"\n// // // // // //               value={formData.title}\n// // // // // //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // // // // //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// // // // // //               required\n// // // // // //             />\n// // // // // //           </div>\n\n// // // // // //           <div className=\"form-group\">\n// // // // // //             <label>Description (Optional)</label>\n// // // // // //             <textarea\n// // // // // //               value={formData.description}\n// // // // // //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// // // // // //               rows={3}\n// // // // // //               placeholder=\"Describe what this sub-domain covers...\"\n// // // // // //             />\n// // // // // //           </div>\n\n// // // // // //           <div className=\"modal-info\">\n// // // // // //             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n// // // // // //             {parent && (\n// // // // // //               <>\n// // // // // //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// // // // // //               </>\n// // // // // //             )}\n// // // // // //             <strong>Level:</strong> {getLevel()}\n// // // // // //           </div>\n\n// // // // // //           <div className=\"modal-actions\">\n// // // // // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // // // // //               Cancel\n// // // // // //             </button>\n// // // // // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // // // // //               {loading ? 'Saving...' : 'Save SubDomain'}\n// // // // // //             </button>\n// // // // // //           </div>\n// // // // // //         </form>\n// // // // // //       </div>\n// // // // // //     </div>\n// // // // // //   );\n// // // // // // };\n\n// // // // // // export default SubDomainManagement;\n\n// // // // // // // // src/components/domains/SubDomainManagement.js - NEW FILE\n// // // // // // // import React, { useState, useEffect } from 'react';\n// // // // // // // import { useParams, useNavigate } from 'react-router-dom';\n// // // // // // // import { authService } from '../../services/authService';\n// // // // // // // import { toast } from 'react-toastify';\n// // // // // // // import {\n// // // // // // //   FiPlus,\n// // // // // // //   FiEdit,\n// // // // // // //   FiTrash2,\n// // // // // // //   FiChevronDown,\n// // // // // // //   FiChevronRight,\n// // // // // // //   FiFolder,\n// // // // // // //   FiFolderPlus,\n// // // // // // //   FiFileText,\n// // // // // // //   FiArrowLeft,\n// // // // // // //   FiMoreVertical,\n// // // // // // //   FiMove,\n// // // // // // //   FiTarget\n// // // // // // // } from 'react-icons/fi';\n\n// // // // // // // const SubDomainManagement = () => {\n// // // // // // //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n\n// // // // // // //   const { domainId } = useParams();\n// // // // // // //   const navigate = useNavigate();\n\n// // // // // // //   const [domain, setDomain] = useState(null);\n// // // // // // //   const [subDomains, setSubDomains] = useState([]);\n// // // // // // //   const [loading, setLoading] = useState(true);\n// // // // // // //   const [showAddModal, setShowAddModal] = useState(false);\n// // // // // // //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// // // // // // //   const [selectedParent, setSelectedParent] = useState(null);\n// // // // // // //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// // // // // // //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// // // // // // //     domainId,\n// // // // // // //     domain: domain?.title,\n// // // // // // //     subDomainsCount: subDomains.length,\n// // // // // // //     loading,\n// // // // // // //     selectedParent: selectedParent?.title,\n// // // // // // //     expandedCount: expandedNodes.size\n// // // // // // //   });\n\n// // // // // // //   useEffect(() => {\n// // // // // // //     if (domainId) {\n// // // // // // //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// // // // // // //       fetchDomainAndSubDomains();\n// // // // // // //     }\n// // // // // // //   }, [domainId]);\n\n// // // // // // //   const fetchDomainAndSubDomains = async () => {\n// // // // // // //     try {\n// // // // // // //       setLoading(true);\n\n// // // // // // //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// // // // // // //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n\n// // // // // // //       // Fetch domain details and hierarchy\n// // // // // // //       const [domainResponse, hierarchyResponse] = await Promise.all([\n// // // // // // //         authService.getDomains({ id: domainId }),\n// // // // // // //         authService.getDomainHierarchy(domainId)\n// // // // // // //       ]);\n\n// // // // // // //       console.log('✅ SUBDOMAIN FETCH - Domain response:', domainResponse.data);\n// // // // // // //       console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n\n// // // // // // //       const domainData = domainResponse.data?.domains?.[0] || \n// // // // // // //                         domainResponse.data?.data?.domains?.[0] || \n// // // // // // //                         domainResponse.data;\n\n// // // // // // //       const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n\n// // // // // // //       console.log('🎯 SUBDOMAIN FETCH - Extracted domain:', domainData);\n// // // // // // //       console.log('🎯 SUBDOMAIN FETCH - Extracted hierarchy:', hierarchyData);\n\n// // // // // // //       setDomain(domainData);\n// // // // // // //       setSubDomains(hierarchyData?.subDomains || []);\n\n// // // // // // //       // Auto-expand first level\n// // // // // // //       if (hierarchyData?.subDomains?.length > 0) {\n// // // // // // //         const firstLevelIds = hierarchyData.subDomains.map(sd => sd.id);\n// // // // // // //         setExpandedNodes(new Set(firstLevelIds));\n// // // // // // //         console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// // // // // // //       }\n\n// // // // // // //     } catch (error) {\n// // // // // // //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// // // // // // //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// // // // // // //       toast.error('Failed to fetch sub-domains');\n// // // // // // //     } finally {\n// // // // // // //       setLoading(false);\n// // // // // // //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   const handleAddSubDomain = (parent = null) => {\n// // // // // // //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// // // // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n\n// // // // // // //     setSelectedParent(parent);\n// // // // // // //     setEditingSubDomain(null);\n// // // // // // //     setShowAddModal(true);\n\n// // // // // // //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// // // // // // //       showAddModal: true, \n// // // // // // //       selectedParent: parent?.title,\n// // // // // // //       editingSubDomain: null \n// // // // // // //     });\n// // // // // // //   };\n\n// // // // // // //   const handleEditSubDomain = (subDomain) => {\n// // // // // // //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// // // // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n\n// // // // // // //     setSelectedParent(null);\n// // // // // // //     setEditingSubDomain(subDomain);\n// // // // // // //     setShowAddModal(true);\n// // // // // // //   };\n\n// // // // // // //   const handleDeleteSubDomain = async (subDomain) => {\n// // // // // // //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // // // //     const hasProjects = subDomain.projectCount > 0;\n\n// // // // // // //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// // // // // // //     if (hasChildren) {\n// // // // // // //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// // // // // // //     }\n// // // // // // //     if (hasProjects) {\n// // // // // // //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// // // // // // //     }\n\n// // // // // // //     if (!window.confirm(confirmMessage)) {\n// // // // // // //       return;\n// // // // // // //     }\n\n// // // // // // //     try {\n// // // // // // //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// // // // // // //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// // // // // // //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// // // // // // //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n\n// // // // // // //       const response = await authService.deleteSubDomain(subDomain.id);\n\n// // // // // // //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n\n// // // // // // //       toast.success('Sub-domain deleted successfully');\n// // // // // // //       fetchDomainAndSubDomains();\n// // // // // // //     } catch (error) {\n// // // // // // //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// // // // // // //       toast.error('Failed to delete sub-domain');\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   const toggleExpanded = (nodeId) => {\n// // // // // // //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n\n// // // // // // //     const newExpanded = new Set(expandedNodes);\n// // // // // // //     if (newExpanded.has(nodeId)) {\n// // // // // // //       newExpanded.delete(nodeId);\n// // // // // // //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// // // // // // //     } else {\n// // // // // // //       newExpanded.add(nodeId);\n// // // // // // //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// // // // // // //     }\n// // // // // // //     setExpandedNodes(newExpanded);\n// // // // // // //   };\n\n// // // // // // //   const isLeafNode = (subDomain) => {\n// // // // // // //     return !subDomain.children || subDomain.children.length === 0;\n// // // // // // //   };\n\n// // // // // // //   const getNodeLevel = (subDomain, level = 0) => {\n// // // // // // //     return level;\n// // // // // // //   };\n\n// // // // // // //   if (loading) {\n// // // // // // //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n\n// // // // // // //     return (\n// // // // // // //       <div className=\"loading-container\">\n// // // // // // //         <div className=\"loading-spinner\"></div>\n// // // // // // //         <p>Loading sub-domains...</p>\n// // // // // // //       </div>\n// // // // // // //     );\n// // // // // // //   }\n\n// // // // // // //   if (!domain) {\n// // // // // // //     console.log('❌ SUBDOMAIN MANAGEMENT - Domain not found');\n\n// // // // // // //     return (\n// // // // // // //       <div className=\"empty-state\">\n// // // // // // //         <h3>Domain not found</h3>\n// // // // // // //         <p>The requested domain could not be loaded.</p>\n// // // // // // //         <button \n// // // // // // //           className=\"primary-button\" \n// // // // // // //           onClick={() => navigate('/domains')}\n// // // // // // //         >\n// // // // // // //           <FiArrowLeft />\n// // // // // // //           Back to Domains\n// // // // // // //         </button>\n// // // // // // //       </div>\n// // // // // // //     );\n// // // // // // //   }\n\n// // // // // // //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// // // // // // //   return (\n// // // // // // //     <div className=\"subdomain-management\">\n// // // // // // //       {/* Header with Breadcrumb */}\n// // // // // // //       <div className=\"page-header\">\n// // // // // // //         <div className=\"header-content\">\n// // // // // // //           <div className=\"breadcrumb\">\n// // // // // // //             <button \n// // // // // // //               className=\"breadcrumb-link\"\n// // // // // // //               onClick={() => navigate('/domains')}\n// // // // // // //             >\n// // // // // // //               <FiArrowLeft />\n// // // // // // //               Domains\n// // // // // // //             </button>\n// // // // // // //             <span className=\"breadcrumb-separator\">/</span>\n// // // // // // //             <span className=\"breadcrumb-current\">{domain.title}</span>\n// // // // // // //           </div>\n// // // // // // //           <h1>SubDomain Management</h1>\n// // // // // // //           <p>Manage the hierarchical structure of {domain.title}</p>\n// // // // // // //         </div>\n// // // // // // //         <div className=\"header-actions\">\n// // // // // // //           <button \n// // // // // // //             className=\"primary-button\" \n// // // // // // //             onClick={() => handleAddSubDomain()}\n// // // // // // //           >\n// // // // // // //             <FiPlus />\n// // // // // // //             Add Root SubDomain\n// // // // // // //           </button>\n// // // // // // //         </div>\n// // // // // // //       </div>\n\n// // // // // // //       {/* Quick Guide */}\n// // // // // // //       <div className=\"quick-guide\">\n// // // // // // //         <h3>How to Add SubDomains:</h3>\n// // // // // // //         <div className=\"guide-steps\">\n// // // // // // //           <div className=\"guide-step\">\n// // // // // // //             <span className=\"step-number\">1</span>\n// // // // // // //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// // // // // // //           </div>\n// // // // // // //           <div className=\"guide-step\">\n// // // // // // //             <span className=\"step-number\">2</span>\n// // // // // // //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// // // // // // //           </div>\n// // // // // // //           <div className=\"guide-step\">\n// // // // // // //             <span className=\"step-number\">3</span>\n// // // // // // //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// // // // // // //           </div>\n// // // // // // //         </div>\n// // // // // // //       </div>\n\n// // // // // // //       {/* Domain Info Card */}\n// // // // // // //       <div className=\"domain-info-card\">\n// // // // // // //         <div className=\"domain-icon\">\n// // // // // // //           <FiFolder />\n// // // // // // //         </div>\n// // // // // // //         <div className=\"domain-details\">\n// // // // // // //           <h3>{domain.title}</h3>\n// // // // // // //           <p>{domain.description}</p>\n// // // // // // //           <div className=\"domain-stats\">\n// // // // // // //             <span className=\"stat-item\">\n// // // // // // //               <strong>{subDomains.length}</strong> root sub-domains\n// // // // // // //             </span>\n// // // // // // //             <span className=\"stat-item\">\n// // // // // // //               <strong>{domain.projectCount || 0}</strong> total projects\n// // // // // // //             </span>\n// // // // // // //           </div>\n// // // // // // //         </div>\n// // // // // // //       </div>\n\n// // // // // // //       {/* SubDomain Tree */}\n// // // // // // //       <div className=\"subdomain-tree-container\">\n// // // // // // //         <div className=\"tree-header\">\n// // // // // // //           <h2>SubDomain Hierarchy</h2>\n// // // // // // //           <div className=\"tree-legend\">\n// // // // // // //             <span className=\"legend-item\">\n// // // // // // //               <FiFolder className=\"folder-icon\" />\n// // // // // // //               Has children\n// // // // // // //             </span>\n// // // // // // //             <span className=\"legend-item\">\n// // // // // // //               <FiTarget className=\"leaf-icon\" />\n// // // // // // //               Leaf (can have projects)\n// // // // // // //             </span>\n// // // // // // //           </div>\n// // // // // // //         </div>\n\n// // // // // // //         {subDomains.length > 0 ? (\n// // // // // // //           <div className=\"subdomain-tree\">\n// // // // // // //             {subDomains.map((subDomain) => (\n// // // // // // //               <SubDomainNode\n// // // // // // //                 key={subDomain.id}\n// // // // // // //                 subDomain={subDomain}\n// // // // // // //                 level={0}\n// // // // // // //                 isExpanded={expandedNodes.has(subDomain.id)}\n// // // // // // //                 onToggleExpanded={toggleExpanded}\n// // // // // // //                 onEdit={handleEditSubDomain}\n// // // // // // //                 onDelete={handleDeleteSubDomain}\n// // // // // // //                 onAddChild={handleAddSubDomain}\n// // // // // // //                 expandedNodes={expandedNodes}\n// // // // // // //               />\n// // // // // // //             ))}\n// // // // // // //           </div>\n// // // // // // //         ) : (\n// // // // // // //           <div className=\"empty-tree-state\">\n// // // // // // //             <FiFolderPlus size={64} />\n// // // // // // //             <h3>No SubDomains Yet</h3>\n// // // // // // //             <p>Start organizing your {domain.title} projects by creating subdomains</p>\n// // // // // // //             <div className=\"empty-state-examples\">\n// // // // // // //               <h4>Example Structure:</h4>\n// // // // // // //               <div className=\"example-tree\">\n// // // // // // //                 <div className=\"example-item\">📂 Machine Learning</div>\n// // // // // // //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// // // // // // //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// // // // // // //                 <div className=\"example-item\">🎯 Data Science</div>\n// // // // // // //               </div>\n// // // // // // //             </div>\n// // // // // // //             <div className=\"empty-state-actions\">\n// // // // // // //               <button \n// // // // // // //                 className=\"primary-button large\" \n// // // // // // //                 onClick={() => handleAddSubDomain()}\n// // // // // // //               >\n// // // // // // //                 <FiPlus />\n// // // // // // //                 Create Your First SubDomain\n// // // // // // //               </button>\n// // // // // // //               <p className=\"help-text\">\n// // // // // // //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// // // // // // //               </p>\n// // // // // // //             </div>\n// // // // // // //           </div>\n// // // // // // //         )}\n// // // // // // //       </div>\n\n// // // // // // //       {/* Add/Edit Modal */}\n// // // // // // //       {showAddModal && (\n// // // // // // //         <SubDomainModal\n// // // // // // //           subDomain={editingSubDomain}\n// // // // // // //           parent={selectedParent}\n// // // // // // //           domain={domain}\n// // // // // // //           onClose={() => {\n// // // // // // //             setShowAddModal(false);\n// // // // // // //             setEditingSubDomain(null);\n// // // // // // //             setSelectedParent(null);\n// // // // // // //           }}\n// // // // // // //           onSave={() => {\n// // // // // // //             setShowAddModal(false);\n// // // // // // //             setEditingSubDomain(null);\n// // // // // // //             setSelectedParent(null);\n// // // // // // //             fetchDomainAndSubDomains();\n// // // // // // //           }}\n// // // // // // //         />\n// // // // // // //       )}\n// // // // // // //     </div>\n// // // // // // //   );\n// // // // // // // };\n\n// // // // // // // // SubDomain Node Component\n// // // // // // // const SubDomainNode = ({ \n// // // // // // //   subDomain, \n// // // // // // //   level, \n// // // // // // //   isExpanded, \n// // // // // // //   onToggleExpanded, \n// // // // // // //   onEdit, \n// // // // // // //   onDelete, \n// // // // // // //   onAddChild,\n// // // // // // //   expandedNodes \n// // // // // // // }) => {\n// // // // // // //   const [showMenu, setShowMenu] = useState(false);\n// // // // // // //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // // // //   const isLeaf = !hasChildren;\n\n// // // // // // //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// // // // // // //     title: subDomain.title,\n// // // // // // //     level,\n// // // // // // //     hasChildren,\n// // // // // // //     isLeaf,\n// // // // // // //     isExpanded,\n// // // // // // //     projectCount: subDomain.projectCount\n// // // // // // //   });\n\n// // // // // // //   return (\n// // // // // // //     <div className={`subdomain-node level-${level}`}>\n// // // // // // //       <div className=\"node-content\">\n// // // // // // //         <div className=\"node-main\">\n// // // // // // //           {hasChildren ? (\n// // // // // // //             <button \n// // // // // // //               className=\"expand-button\"\n// // // // // // //               onClick={() => onToggleExpanded(subDomain.id)}\n// // // // // // //             >\n// // // // // // //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// // // // // // //             </button>\n// // // // // // //           ) : (\n// // // // // // //             <div className=\"expand-placeholder\" />\n// // // // // // //           )}\n\n// // // // // // //           <div className=\"node-icon\">\n// // // // // // //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// // // // // // //           </div>\n\n// // // // // // //           <div className=\"node-info\">\n// // // // // // //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// // // // // // //             <p className=\"node-description\">{subDomain.description}</p>\n// // // // // // //             <div className=\"node-stats\">\n// // // // // // //               {hasChildren && (\n// // // // // // //                 <span className=\"stat-badge\">\n// // // // // // //                   {subDomain.children.length} sub-domains\n// // // // // // //                 </span>\n// // // // // // //               )}\n// // // // // // //               {subDomain.projectCount > 0 && (\n// // // // // // //                 <span className=\"stat-badge projects\">\n// // // // // // //                   {subDomain.projectCount} projects\n// // // // // // //                 </span>\n// // // // // // //               )}\n// // // // // // //               {isLeaf && (\n// // // // // // //                 <span className=\"stat-badge leaf\">\n// // // // // // //                   Can have projects\n// // // // // // //                 </span>\n// // // // // // //               )}\n// // // // // // //             </div>\n// // // // // // //           </div>\n// // // // // // //         </div>\n\n// // // // // // //         <div className=\"node-actions\">\n// // // // // // //           <button \n// // // // // // //             className=\"action-button add\" \n// // // // // // //             onClick={() => onAddChild(subDomain)}\n// // // // // // //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// // // // // // //           >\n// // // // // // //             <FiPlus />\n// // // // // // //           </button>\n// // // // // // //           <div className=\"action-menu\">\n// // // // // // //             <button \n// // // // // // //               onClick={() => setShowMenu(!showMenu)}\n// // // // // // //               title=\"More actions\"\n// // // // // // //             >\n// // // // // // //               <FiMoreVertical />\n// // // // // // //             </button>\n// // // // // // //             {showMenu && (\n// // // // // // //               <div className=\"dropdown-menu\">\n// // // // // // //                 <button onClick={() => onEdit(subDomain)}>\n// // // // // // //                   <FiEdit /> Edit\n// // // // // // //                 </button>\n// // // // // // //                 <button onClick={() => onAddChild(subDomain)}>\n// // // // // // //                   <FiPlus /> Add Child SubDomain\n// // // // // // //                 </button>\n// // // // // // //                 <button onClick={() => onDelete(subDomain)} className=\"danger\">\n// // // // // // //                   <FiTrash2 /> Delete\n// // // // // // //                 </button>\n// // // // // // //               </div>\n// // // // // // //             )}\n// // // // // // //           </div>\n// // // // // // //         </div>\n// // // // // // //       </div>\n\n// // // // // // //       {/* Children */}\n// // // // // // //       {hasChildren && isExpanded && (\n// // // // // // //         <div className=\"node-children\">\n// // // // // // //           {subDomain.children.map((child) => (\n// // // // // // //             <SubDomainNode\n// // // // // // //               key={child.id}\n// // // // // // //               subDomain={child}\n// // // // // // //               level={level + 1}\n// // // // // // //               isExpanded={expandedNodes.has(child.id)}\n// // // // // // //               onToggleExpanded={onToggleExpanded}\n// // // // // // //               onEdit={onEdit}\n// // // // // // //               onDelete={onDelete}\n// // // // // // //               onAddChild={onAddChild}\n// // // // // // //               expandedNodes={expandedNodes}\n// // // // // // //             />\n// // // // // // //           ))}\n// // // // // // //         </div>\n// // // // // // //       )}\n// // // // // // //     </div>\n// // // // // // //   );\n// // // // // // // };\n\n// // // // // // // // SubDomain Modal Component\n// // // // // // // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// // // // // // //   const [formData, setFormData] = useState({\n// // // // // // //     title: subDomain?.title || '',\n// // // // // // //     description: subDomain?.description || ''\n// // // // // // //   });\n// // // // // // //   const [loading, setLoading] = useState(false);\n\n// // // // // // //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// // // // // // //     isEditing: !!subDomain,\n// // // // // // //     parentTitle: parent?.title,\n// // // // // // //     domainTitle: domain?.title,\n// // // // // // //     formData\n// // // // // // //   });\n\n// // // // // // //   const handleSubmit = async (e) => {\n// // // // // // //     e.preventDefault();\n// // // // // // //     setLoading(true);\n\n// // // // // // //     try {\n// // // // // // //       const requestData = {\n// // // // // // //         ...formData,\n// // // // // // //         domainId: domain.id,\n// // // // // // //         parentId: parent?.id || null\n// // // // // // //       };\n\n// // // // // // //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// // // // // // //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// // // // // // //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// // // // // // //       if (subDomain) {\n// // // // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// // // // // // //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// // // // // // //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// // // // // // //         toast.success('Sub-domain updated successfully');\n// // // // // // //       } else {\n// // // // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// // // // // // //         const response = await authService.createSubDomain(requestData);\n// // // // // // //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// // // // // // //         toast.success('Sub-domain created successfully');\n// // // // // // //       }\n\n// // // // // // //       onSave();\n// // // // // // //     } catch (error) {\n// // // // // // //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// // // // // // //       toast.error('Failed to save sub-domain');\n// // // // // // //     } finally {\n// // // // // // //       setLoading(false);\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   const getModalTitle = () => {\n// // // // // // //     if (subDomain) {\n// // // // // // //       return `Edit SubDomain: ${subDomain.title}`;\n// // // // // // //     }\n// // // // // // //     if (parent) {\n// // // // // // //       return `Add SubDomain under: ${parent.title}`;\n// // // // // // //     }\n// // // // // // //     return `Add Root SubDomain in: ${domain.title}`;\n// // // // // // //   };\n\n// // // // // // //   return (\n// // // // // // //     <div className=\"modal-overlay\">\n// // // // // // //       <div className=\"modal\">\n// // // // // // //         <div className=\"modal-header\">\n// // // // // // //           <h2>{getModalTitle()}</h2>\n// // // // // // //           <button onClick={onClose}>×</button>\n// // // // // // //         </div>\n\n// // // // // // //         <form onSubmit={handleSubmit}>\n// // // // // // //           <div className=\"form-group\">\n// // // // // // //             <label>SubDomain Title</label>\n// // // // // // //             <input\n// // // // // // //               type=\"text\"\n// // // // // // //               value={formData.title}\n// // // // // // //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // // // // // //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// // // // // // //               required\n// // // // // // //             />\n// // // // // // //           </div>\n\n// // // // // // //           <div className=\"form-group\">\n// // // // // // //             <label>Description (Optional)</label>\n// // // // // // //             <textarea\n// // // // // // //               value={formData.description}\n// // // // // // //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// // // // // // //               rows={3}\n// // // // // // //               placeholder=\"Describe what this sub-domain covers...\"\n// // // // // // //             />\n// // // // // // //           </div>\n\n// // // // // // //           <div className=\"modal-info\">\n// // // // // // //             <strong>Domain:</strong> {domain.title}<br />\n// // // // // // //             {parent && (\n// // // // // // //               <>\n// // // // // // //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// // // // // // //               </>\n// // // // // // //             )}\n// // // // // // //             <strong>Level:</strong> {parent ? `Level ${getLevel(parent) + 1}` : 'Root Level'}\n// // // // // // //           </div>\n\n// // // // // // //           <div className=\"modal-actions\">\n// // // // // // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // // // // // //               Cancel\n// // // // // // //             </button>\n// // // // // // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // // // // // //               {loading ? 'Saving...' : 'Save SubDomain'}\n// // // // // // //             </button>\n// // // // // // //           </div>\n// // // // // // //         </form>\n// // // // // // //       </div>\n// // // // // // //     </div>\n// // // // // // //   );\n// // // // // // // };\n\n// // // // // // // // Helper function to get level\n// // // // // // // const getLevel = (subDomain, level = 0) => {\n// // // // // // //   // This would need to be calculated based on the hierarchy\n// // // // // // //   return level + 1;\n// // // // // // // };\n\n// // // // // // // export default SubDomainManagement;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"SubDomainManagement\");\n$RefreshReg$(_c2, \"SubDomainNode\");\n$RefreshReg$(_c3, \"SubDomainModal\");\n$RefreshReg$(_c4, \"ProjectModal\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","authService","toast","FiPlus","FiEdit","FiTrash2","FiChevronDown","FiChevronRight","FiFolder","FiFolderPlus","FiFileText","FiArrowLeft","FiMoreVertical","FiMove","FiTarget","jsxDEV","_jsxDEV","Fragment","_Fragment","SubDomainManagement","_s","console","log","domainId","navigate","domain","setDomain","subDomains","setSubDomains","loading","setLoading","showAddModal","setShowAddModal","editingSubDomain","setEditingSubDomain","selectedParent","setSelectedParent","expandedNodes","setExpandedNodes","Set","showProjectModal","setShowProjectModal","selectedSubDomainForProject","setSelectedSubDomainForProject","title","subDomainsCount","length","expandedCount","size","fetchDomainAndSubDomains","_domainsResponse$data","_domainsResponse$data2","_domainsResponse$data3","_subDomainsResponse$d","_subDomainsResponse$d2","_subDomainsResponse$d3","domainsResponse","getDomains","data","domainData","domains","find","d","id","description","projectCount","subDomainsResponse","getSubDomains","subDomainsData","firstLevelIds","map","sd","_hierarchyResponse$da","hierarchyResponse","getDomainHierarchy","hierarchyData","includes","prev","hierarchyError","error","handleAddSubDomain","parent","handleEditSubDomain","subDomain","handleAddProjectToSubDomain","children","handleDeleteSubDomain","hasChildren","hasProjects","confirmMessage","window","confirm","response","deleteSubDomain","success","toggleExpanded","nodeId","newExpanded","has","delete","add","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","SubDomainNode","level","isExpanded","onToggleExpanded","onEdit","onDelete","onAddChild","onAddProject","SubDomainModal","onClose","onSave","ProjectModal","_c","_s2","showMenu","setShowMenu","isLeaf","child","_c2","_s3","formData","setFormData","handleSubmit","e","preventDefault","requestData","trim","parentId","updateSubDomain","createSubDomain","_error$response","_error$response$data","errorMessage","message","getModalTitle","onSubmit","type","value","onChange","target","placeholder","required","minLength","maxLength","rows","disabled","_c3","_s4","abstract","specifications","learningOutcomes","subDomainId","isFeatured","createProject","checked","_c4","$RefreshReg$"],"sources":["/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/components/domains/SubDomainManagement.js"],"sourcesContent":["// src/components/domains/SubDomainManagement.js - UPDATED WITH ADD PROJECT FEATURE\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { authService } from '../../services/authService';\nimport { toast } from 'react-toastify';\nimport {\n  FiPlus,\n  FiEdit,\n  FiTrash2,\n  FiChevronDown,\n  FiChevronRight,\n  FiFolder,\n  FiFolderPlus,\n  FiFileText,\n  FiArrowLeft,\n  FiMoreVertical,\n  FiMove,\n  FiTarget\n} from 'react-icons/fi';\n\nconst SubDomainManagement = () => {\n  console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n  \n  const { domainId } = useParams();\n  const navigate = useNavigate();\n  \n  const [domain, setDomain] = useState(null);\n  const [subDomains, setSubDomains] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingSubDomain, setEditingSubDomain] = useState(null);\n  const [selectedParent, setSelectedParent] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n  // NEW: Project creation state\n  const [showProjectModal, setShowProjectModal] = useState(false);\n  const [selectedSubDomainForProject, setSelectedSubDomainForProject] = useState(null);\n\n  console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n    domainId,\n    domain: domain?.title,\n    subDomainsCount: subDomains.length,\n    loading,\n    selectedParent: selectedParent?.title,\n    expandedCount: expandedNodes.size,\n    showProjectModal,\n    selectedSubDomainForProject: selectedSubDomainForProject?.title\n  });\n\n  useEffect(() => {\n    if (domainId) {\n      console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n      fetchDomainAndSubDomains();\n    }\n  }, [domainId]);\n\n  const fetchDomainAndSubDomains = async () => {\n    try {\n      setLoading(true);\n      \n      console.log('🔍 SUBDOMAIN FETCH - Starting API calls for domain:', domainId);\n      \n      // Get domain details\n      const domainsResponse = await authService.getDomains();\n      console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n      \n      let domainData = null;\n      const domains = domainsResponse.data?.domains || domainsResponse.data?.data?.domains || [];\n      if (domains.length > 0) {\n        domainData = domains.find(d => d.id == domainId);\n      }\n      \n      if (!domainData) {\n        domainData = {\n          id: domainId,\n          title: `Domain ${domainId}`,\n          description: 'Domain not found in list',\n          projectCount: 0\n        };\n      }\n      \n      setDomain(domainData);\n      \n      // Get subdomains\n      const subDomainsResponse = await authService.getSubDomains({ domainId: domainId });\n      console.log('✅ SUBDOMAIN FETCH - SubDomains response:', subDomainsResponse.data);\n      \n      const subDomainsData = subDomainsResponse.data?.subDomains || subDomainsResponse.data?.data?.subDomains || [];\n      setSubDomains(subDomainsData);\n      \n      // Auto-expand first level\n      if (subDomainsData.length > 0) {\n        const firstLevelIds = subDomainsData.map(sd => sd.id);\n        setExpandedNodes(new Set(firstLevelIds));\n      }\n      \n      // Try hierarchy API as fallback\n      try {\n        const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n        const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n        if (hierarchyData?.subDomains && hierarchyData.subDomains.length > 0) {\n          setSubDomains(hierarchyData.subDomains);\n          if (hierarchyData.title && !domainData.title.includes('Domain ')) {\n            setDomain(prev => ({ ...prev, ...hierarchyData }));\n          }\n        }\n      } catch (hierarchyError) {\n        console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed:', hierarchyError);\n      }\n      \n    } catch (error) {\n      console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n      toast.error('Failed to fetch domain information');\n      \n      setDomain({\n        id: domainId,\n        title: `Domain ${domainId}`,\n        description: 'Error loading domain details',\n        projectCount: 0\n      });\n      setSubDomains([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddSubDomain = (parent = null) => {\n    console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked, parent:', parent?.title);\n    setSelectedParent(parent);\n    setEditingSubDomain(null);\n    setShowAddModal(true);\n  };\n\n  const handleEditSubDomain = (subDomain) => {\n    console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked:', subDomain.title);\n    setSelectedParent(null);\n    setEditingSubDomain(subDomain);\n    setShowAddModal(true);\n  };\n\n  // NEW: Handle adding project to subdomain\n  const handleAddProjectToSubDomain = (subDomain) => {\n    console.log('📝 ADD PROJECT - Starting for subdomain:', subDomain.title);\n    console.log('📝 ADD PROJECT - SubDomain is leaf:', !subDomain.children || subDomain.children.length === 0);\n    \n    if (subDomain.children && subDomain.children.length > 0) {\n      toast.error('Projects can only be added to leaf sub-domains (those without children)');\n      return;\n    }\n    \n    setSelectedSubDomainForProject(subDomain);\n    setShowProjectModal(true);\n  };\n\n  const handleDeleteSubDomain = async (subDomain) => {\n    const hasChildren = subDomain.children && subDomain.children.length > 0;\n    const hasProjects = subDomain.projectCount > 0;\n    \n    let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n    if (hasChildren) {\n      confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n    }\n    if (hasProjects) {\n      confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n    }\n    \n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n\n    try {\n      console.log('🗑️ SUBDOMAIN DELETE - Deleting:', subDomain.title);\n      const response = await authService.deleteSubDomain(subDomain.id);\n      toast.success('Sub-domain deleted successfully');\n      fetchDomainAndSubDomains();\n    } catch (error) {\n      console.error('❌ SUBDOMAIN DELETE - Error:', error);\n      toast.error('Failed to delete sub-domain');\n    }\n  };\n\n  const toggleExpanded = (nodeId) => {\n    const newExpanded = new Set(expandedNodes);\n    if (newExpanded.has(nodeId)) {\n      newExpanded.delete(nodeId);\n    } else {\n      newExpanded.add(nodeId);\n    }\n    setExpandedNodes(newExpanded);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading sub-domains...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"subdomain-management\">\n      {/* Header with Breadcrumb */}\n      <div className=\"page-header\">\n        <div className=\"header-content\">\n          <div className=\"breadcrumb\">\n            <button \n              className=\"breadcrumb-link\"\n              onClick={() => navigate('/domains')}\n            >\n              <FiArrowLeft />\n              Domains\n            </button>\n            <span className=\"breadcrumb-separator\">/</span>\n            <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n          </div>\n          <h1>SubDomain Management</h1>\n          <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n        </div>\n        <div className=\"header-actions\">\n          <button \n            className=\"primary-button\" \n            onClick={() => handleAddSubDomain()}\n          >\n            <FiPlus />\n            Add Root SubDomain\n          </button>\n        </div>\n      </div>\n\n      {/* Quick Guide */}\n      <div className=\"quick-guide\">\n        <h3>How to Build Your SubDomain Hierarchy:</h3>\n        <div className=\"guide-steps\">\n          <div className=\"guide-step\">\n            <span className=\"step-number\">1</span>\n            <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n          </div>\n          <div className=\"guide-step\">\n            <span className=\"step-number\">2</span>\n            <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n          </div>\n          <div className=\"guide-step\">\n            <span className=\"step-number\">3</span>\n            <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n          </div>\n          <div className=\"guide-step\">\n            <span className=\"step-number\">4</span>\n            <span className=\"step-text\">Click <strong>\"Add Project\"</strong> on leaf subdomains to create new projects</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Domain Info Card */}\n      {domain && (\n        <div className=\"domain-info-card\">\n          <div className=\"domain-icon\">\n            <FiFolder />\n          </div>\n          <div className=\"domain-details\">\n            <h3>{domain.title}</h3>\n            <p>{domain.description}</p>\n            <div className=\"domain-stats\">\n              <span className=\"stat-item\">\n                <strong>{subDomains.length}</strong> root sub-domains\n              </span>\n              <span className=\"stat-item\">\n                <strong>{domain.projectCount || 0}</strong> total projects\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* SubDomain Tree */}\n      <div className=\"subdomain-tree-container\">\n        <div className=\"tree-header\">\n          <h2>SubDomain Hierarchy</h2>\n          <div className=\"tree-legend\">\n            <span className=\"legend-item\">\n              <FiFolder className=\"folder-icon\" />\n              Has children\n            </span>\n            <span className=\"legend-item\">\n              <FiTarget className=\"leaf-icon\" />\n              Leaf (can have projects)\n            </span>\n            <span className=\"legend-item\">\n              <FiFileText className=\"project-icon\" />\n              Add Project\n            </span>\n          </div>\n        </div>\n\n        {subDomains.length > 0 ? (\n          <div className=\"subdomain-tree\">\n            {subDomains.map((subDomain) => (\n              <SubDomainNode\n                key={subDomain.id}\n                subDomain={subDomain}\n                level={0}\n                isExpanded={expandedNodes.has(subDomain.id)}\n                onToggleExpanded={toggleExpanded}\n                onEdit={handleEditSubDomain}\n                onDelete={handleDeleteSubDomain}\n                onAddChild={handleAddSubDomain}\n                onAddProject={handleAddProjectToSubDomain} // NEW\n                expandedNodes={expandedNodes}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"empty-tree-state\">\n            <FiFolderPlus size={64} />\n            <h3>No SubDomains Yet</h3>\n            <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n            <div className=\"empty-state-examples\">\n              <h4>Example Structure:</h4>\n              <div className=\"example-tree\">\n                <div className=\"example-item\">📂 Machine Learning</div>\n                <div className=\"example-item nested\">🎯 Deep Learning</div>\n                <div className=\"example-item nested\">🎯 Computer Vision</div>\n                <div className=\"example-item\">🎯 Data Science</div>\n              </div>\n            </div>\n            <div className=\"empty-state-actions\">\n              <button \n                className=\"primary-button large\" \n                onClick={() => handleAddSubDomain()}\n              >\n                <FiPlus />\n                Create Your First SubDomain\n              </button>\n              <p className=\"help-text\">\n                💡 Tip: Start with broad categories, then add specific subcategories as needed\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Add/Edit SubDomain Modal */}\n      {showAddModal && (\n        <SubDomainModal\n          subDomain={editingSubDomain}\n          parent={selectedParent}\n          domain={domain}\n          onClose={() => {\n            setShowAddModal(false);\n            setEditingSubDomain(null);\n            setSelectedParent(null);\n          }}\n          onSave={() => {\n            setShowAddModal(false);\n            setEditingSubDomain(null);\n            setSelectedParent(null);\n            fetchDomainAndSubDomains();\n          }}\n        />\n      )}\n\n      {/* NEW: Project Creation Modal */}\n      {showProjectModal && (\n        <ProjectModal\n          subDomain={selectedSubDomainForProject}\n          domain={domain}\n          onClose={() => {\n            setShowProjectModal(false);\n            setSelectedSubDomainForProject(null);\n          }}\n          onSave={() => {\n            setShowProjectModal(false);\n            setSelectedSubDomainForProject(null);\n            toast.success('Project created successfully!');\n            fetchDomainAndSubDomains(); // Refresh to update project counts\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\n// UPDATED SubDomain Node Component\nconst SubDomainNode = ({ \n  subDomain, \n  level, \n  isExpanded, \n  onToggleExpanded, \n  onEdit, \n  onDelete, \n  onAddChild,\n  onAddProject, // NEW\n  expandedNodes \n}) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const hasChildren = subDomain.children && subDomain.children.length > 0;\n  const isLeaf = !hasChildren;\n\n  console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n    title: subDomain.title,\n    level,\n    hasChildren,\n    isLeaf,\n    isExpanded,\n    projectCount: subDomain.projectCount\n  });\n\n  return (\n    <div className={`subdomain-node level-${level}`}>\n      <div className=\"node-content\">\n        <div className=\"node-main\">\n          {hasChildren ? (\n            <button \n              className=\"expand-button\"\n              onClick={() => onToggleExpanded(subDomain.id)}\n            >\n              {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n            </button>\n          ) : (\n            <div className=\"expand-placeholder\" />\n          )}\n          \n          <div className=\"node-icon\">\n            {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n          </div>\n          \n          <div className=\"node-info\">\n            <h4 className=\"node-title\">{subDomain.title}</h4>\n            <p className=\"node-description\">{subDomain.description}</p>\n            <div className=\"node-stats\">\n              {hasChildren && (\n                <span className=\"stat-badge\">\n                  {subDomain.children.length} sub-domains\n                </span>\n              )}\n              {subDomain.projectCount > 0 && (\n                <span className=\"stat-badge projects\">\n                  {subDomain.projectCount} projects\n                </span>\n              )}\n              {isLeaf && (\n                <span className=\"stat-badge leaf\">\n                  Can have projects\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"node-actions\">\n          {/* NEW: Add Project Button for Leaf Subdomains */}\n          {isLeaf && (\n            <button \n              className=\"action-button project\" \n              onClick={() => onAddProject(subDomain)}\n              title={`Add project to \"${subDomain.title}\"`}\n            >\n              <FiFileText />\n            </button>\n          )}\n          \n          <button \n            className=\"action-button add\" \n            onClick={() => onAddChild(subDomain)}\n            title={`Add child subdomain under \"${subDomain.title}\"`}\n          >\n            <FiPlus />\n          </button>\n          \n          <div className=\"action-menu\">\n            <button \n              onClick={() => setShowMenu(!showMenu)}\n              title=\"More actions\"\n            >\n              <FiMoreVertical />\n            </button>\n            {showMenu && (\n              <div className=\"dropdown-menu\">\n                {/* NEW: Add Project Option for Leaf Subdomains */}\n                {isLeaf && (\n                  <button \n                    onClick={() => {\n                      onAddProject(subDomain);\n                      setShowMenu(false);\n                    }}\n                    className=\"primary-option\"\n                  >\n                    <FiFileText /> Add Project\n                  </button>\n                )}\n                <button onClick={() => {\n                  onEdit(subDomain);\n                  setShowMenu(false);\n                }}>\n                  <FiEdit /> Edit SubDomain\n                </button>\n                <button onClick={() => {\n                  onAddChild(subDomain);\n                  setShowMenu(false);\n                }}>\n                  <FiPlus /> Add Child SubDomain\n                </button>\n                <button onClick={() => {\n                  onDelete(subDomain);\n                  setShowMenu(false);\n                }} className=\"danger\">\n                  <FiTrash2 /> Delete SubDomain\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Children */}\n      {hasChildren && isExpanded && (\n        <div className=\"node-children\">\n          {subDomain.children.map((child) => (\n            <SubDomainNode\n              key={child.id}\n              subDomain={child}\n              level={level + 1}\n              isExpanded={expandedNodes.has(child.id)}\n              onToggleExpanded={onToggleExpanded}\n              onEdit={onEdit}\n              onDelete={onDelete}\n              onAddChild={onAddChild}\n              onAddProject={onAddProject} // NEW\n              expandedNodes={expandedNodes}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// SubDomain Modal Component (unchanged)\nconst SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    title: subDomain?.title || '',\n    description: subDomain?.description || ''\n  });\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const requestData = {\n        title: formData.title.trim(),\n        description: formData.description.trim(),\n        domainId: domain.id,\n        parentId: parent?.id || null\n      };\n\n      console.log('💾 SUBDOMAIN SAVE - Request data:', requestData);\n\n      if (subDomain) {\n        const response = await authService.updateSubDomain(subDomain.id, requestData);\n        toast.success('Sub-domain updated successfully');\n      } else {\n        const response = await authService.createSubDomain(requestData);\n        toast.success('Sub-domain created successfully');\n      }\n\n      onSave();\n    } catch (error) {\n      console.error('❌ SUBDOMAIN SAVE - Error:', error);\n      const errorMessage = error.response?.data?.message || 'Failed to save sub-domain';\n      toast.error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getModalTitle = () => {\n    if (subDomain) {\n      return `Edit SubDomain: ${subDomain.title}`;\n    }\n    if (parent) {\n      return `Add SubDomain under: ${parent.title}`;\n    }\n    return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n  };\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal\">\n        <div className=\"modal-header\">\n          <h2>{getModalTitle()}</h2>\n          <button onClick={onClose}>×</button>\n        </div>\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label>SubDomain Title *</label>\n            <input\n              type=\"text\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              placeholder=\"e.g., Machine Learning, Deep Learning\"\n              required\n              minLength={3}\n              maxLength={100}\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label>Description (Optional)</label>\n            <textarea\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              rows={3}\n              placeholder=\"Describe what this sub-domain covers...\"\n              maxLength={500}\n            />\n          </div>\n          \n          <div className=\"modal-info\">\n            <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n            {parent && (\n              <>\n                <strong>Parent SubDomain:</strong> {parent.title}<br />\n              </>\n            )}\n            <strong>Level:</strong> {parent ? `Level ${(parent.level || 0) + 1}` : 'Root Level'}\n          </div>\n          \n          <div className=\"modal-actions\">\n            <button type=\"button\" onClick={onClose} disabled={loading}>\n              Cancel\n            </button>\n            <button \n              type=\"submit\" \n              className=\"primary-button\" \n              disabled={loading || !formData.title.trim()}\n            >\n              {loading ? 'Saving...' : 'Save SubDomain'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\n// NEW: Project Modal Component for SubDomain context\nconst ProjectModal = ({ subDomain, domain, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    abstract: '',\n    specifications: '',\n    learningOutcomes: '',\n    subDomainId: subDomain?.id || '',\n    isFeatured: false\n  });\n  const [loading, setLoading] = useState(false);\n\n  console.log('📝 PROJECT MODAL - Props:', {\n    subDomain: subDomain?.title,\n    domain: domain?.title,\n    formData\n  });\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      console.log('💾 PROJECT SAVE - Starting API call with data:', formData);\n      \n      const response = await authService.createProject(formData);\n      console.log('✅ PROJECT CREATE - Response:', response.data);\n      \n      onSave();\n    } catch (error) {\n      console.error('❌ PROJECT SAVE - Error:', error);\n      toast.error('Failed to create project');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal large\">\n        <div className=\"modal-header\">\n          <h2>Add Project to: {subDomain?.title}</h2>\n          <button onClick={onClose}>×</button>\n        </div>\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label>Project Title *</label>\n            <input\n              type=\"text\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              placeholder=\"Enter project title...\"\n              required\n            />\n          </div>\n          \n          <div className=\"modal-info\">\n            <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n            <strong>SubDomain:</strong> {subDomain?.title || 'Unknown'}<br />\n            <span className=\"info-note\">\n              <FiTarget /> This is a leaf subdomain - perfect for projects!\n            </span>\n          </div>\n          \n          <div className=\"form-group\">\n            <label>Abstract *</label>\n            <textarea\n              value={formData.abstract}\n              onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n              rows={4}\n              placeholder=\"Brief description of the project...\"\n              required\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label>Specifications *</label>\n            <textarea\n              value={formData.specifications}\n              onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n              rows={6}\n              placeholder=\"Technical specifications and requirements...\"\n              required\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label>Learning Outcomes *</label>\n            <textarea\n              value={formData.learningOutcomes}\n              onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n              rows={4}\n              placeholder=\"What will students learn from this project...\"\n              required\n            />\n          </div>\n          \n          <div className=\"form-group checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={formData.isFeatured}\n                onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n              />\n              <FiTarget />\n              Featured Project\n            </label>\n          </div>\n          \n          <div className=\"modal-actions\">\n            <button type=\"button\" onClick={onClose} disabled={loading}>\n              Cancel\n            </button>\n            <button \n              type=\"submit\" \n              className=\"primary-button\" \n              disabled={loading || !formData.title || !formData.abstract}\n            >\n              {loading ? 'Creating...' : 'Create Project'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default SubDomainManagement;\n\n\n// // src/components/domains/SubDomainManagement.js - CORRECTED VERSION\n// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import { authService } from '../../services/authService';\n// import { toast } from 'react-toastify';\n// import {\n//   FiPlus,\n//   FiEdit,\n//   FiTrash2,\n//   FiChevronDown,\n//   FiChevronRight,\n//   FiFolder,\n//   FiFolderPlus,\n//   FiFileText,\n//   FiArrowLeft,\n//   FiMoreVertical,\n//   FiMove,\n//   FiTarget\n// } from 'react-icons/fi';\n\n// const SubDomainManagement = () => {\n//   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n  \n//   const { domainId } = useParams();\n//   const navigate = useNavigate();\n  \n//   const [domain, setDomain] = useState(null);\n//   const [subDomains, setSubDomains] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [showAddModal, setShowAddModal] = useState(false);\n//   const [editingSubDomain, setEditingSubDomain] = useState(null);\n//   const [selectedParent, setSelectedParent] = useState(null);\n//   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n//   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n//     domainId,\n//     domain: domain?.title,\n//     subDomainsCount: subDomains.length,\n//     loading,\n//     selectedParent: selectedParent?.title,\n//     expandedCount: expandedNodes.size\n//   });\n\n//   useEffect(() => {\n//     if (domainId) {\n//       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n//       fetchDomainAndSubDomains();\n//     }\n//   }, [domainId]);\n\n//   const fetchDomainAndSubDomains = async () => {\n//     try {\n//       setLoading(true);\n      \n//       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n//       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n      \n//       // ✅ CORRECTED: Get domain details first (without query params to get all domains, then filter)\n//       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains (no params)');\n//       const domainsResponse = await authService.getDomains();\n//       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n      \n//       // Extract specific domain from response\n//       let domainData = null;\n//       const domains = domainsResponse.data?.domains || domainsResponse.data?.data?.domains || [];\n//       if (domains.length > 0) {\n//         domainData = domains.find(d => d.id == domainId);\n//       }\n      \n//       console.log('🎯 SUBDOMAIN FETCH - Found domain:', domainData);\n      \n//       // If we don't have domain data, create a placeholder\n//       if (!domainData) {\n//         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n//         domainData = {\n//           id: domainId,\n//           title: `Domain ${domainId}`,\n//           description: 'Domain not found in list',\n//           projectCount: 0\n//         };\n//       }\n      \n//       setDomain(domainData);\n      \n//       // ✅ CORRECTED: Get subdomains using the correct API\n//       console.log('🌐 SUBDOMAIN FETCH - Calling getSubDomains with domainId');\n//       const subDomainsResponse = await authService.getSubDomains({ domainId: domainId });\n//       console.log('✅ SUBDOMAIN FETCH - SubDomains response:', subDomainsResponse.data);\n      \n//       const subDomainsData = subDomainsResponse.data?.subDomains || subDomainsResponse.data?.data?.subDomains || [];\n//       console.log('🎯 SUBDOMAIN FETCH - Extracted subdomains:', subDomainsData);\n      \n//       setSubDomains(subDomainsData);\n      \n//       // Auto-expand first level\n//       if (subDomainsData.length > 0) {\n//         const firstLevelIds = subDomainsData.map(sd => sd.id);\n//         setExpandedNodes(new Set(firstLevelIds));\n//         console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n//       }\n      \n//       // ✅ ALTERNATIVE: Try hierarchy API as fallback\n//       try {\n//         console.log('🌐 SUBDOMAIN FETCH - Also trying getDomainHierarchy as fallback');\n//         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n//         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n        \n//         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n//         if (hierarchyData?.subDomains && hierarchyData.subDomains.length > 0) {\n//           console.log('🎯 SUBDOMAIN FETCH - Using hierarchy data instead');\n//           setSubDomains(hierarchyData.subDomains);\n          \n//           // Update domain info if more complete\n//           if (hierarchyData.title && !domainData.title.includes('Domain ')) {\n//             setDomain(prev => ({ ...prev, ...hierarchyData }));\n//           }\n//         }\n//       } catch (hierarchyError) {\n//         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed (using subdomains list):', hierarchyError);\n//       }\n      \n//     } catch (error) {\n//       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n//       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n//       toast.error('Failed to fetch domain information');\n      \n//       // Create fallback domain\n//       setDomain({\n//         id: domainId,\n//         title: `Domain ${domainId}`,\n//         description: 'Error loading domain details',\n//         projectCount: 0\n//       });\n//       setSubDomains([]);\n//     } finally {\n//       setLoading(false);\n//       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n//     }\n//   };\n\n//   const handleAddSubDomain = (parent = null) => {\n//     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n//     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n    \n//     setSelectedParent(parent);\n//     setEditingSubDomain(null);\n//     setShowAddModal(true);\n    \n//     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n//       showAddModal: true, \n//       selectedParent: parent?.title,\n//       editingSubDomain: null \n//     });\n//   };\n\n//   const handleEditSubDomain = (subDomain) => {\n//     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n//     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n    \n//     setSelectedParent(null);\n//     setEditingSubDomain(subDomain);\n//     setShowAddModal(true);\n//   };\n\n//   const handleDeleteSubDomain = async (subDomain) => {\n//     const hasChildren = subDomain.children && subDomain.children.length > 0;\n//     const hasProjects = subDomain.projectCount > 0;\n    \n//     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n//     if (hasChildren) {\n//       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n//     }\n//     if (hasProjects) {\n//       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n//     }\n    \n//     if (!window.confirm(confirmMessage)) {\n//       return;\n//     }\n\n//     try {\n//       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n//       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n//       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n//       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n      \n//       const response = await authService.deleteSubDomain(subDomain.id);\n      \n//       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n      \n//       toast.success('Sub-domain deleted successfully');\n//       fetchDomainAndSubDomains();\n//     } catch (error) {\n//       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n//       toast.error('Failed to delete sub-domain');\n//     }\n//   };\n\n//   const toggleExpanded = (nodeId) => {\n//     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n    \n//     const newExpanded = new Set(expandedNodes);\n//     if (newExpanded.has(nodeId)) {\n//       newExpanded.delete(nodeId);\n//       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n//     } else {\n//       newExpanded.add(nodeId);\n//       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n//     }\n//     setExpandedNodes(newExpanded);\n//   };\n\n//   if (loading) {\n//     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n    \n//     return (\n//       <div className=\"loading-container\">\n//         <div className=\"loading-spinner\"></div>\n//         <p>Loading sub-domains...</p>\n//       </div>\n//     );\n//   }\n\n//   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n//   return (\n//     <div className=\"subdomain-management\">\n//       {/* Header with Breadcrumb */}\n//       <div className=\"page-header\">\n//         <div className=\"header-content\">\n//           <div className=\"breadcrumb\">\n//             <button \n//               className=\"breadcrumb-link\"\n//               onClick={() => navigate('/domains')}\n//             >\n//               <FiArrowLeft />\n//               Domains\n//             </button>\n//             <span className=\"breadcrumb-separator\">/</span>\n//             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n//           </div>\n//           <h1>SubDomain Management</h1>\n//           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n//         </div>\n//         <div className=\"header-actions\">\n//           <button \n//             className=\"primary-button\" \n//             onClick={() => handleAddSubDomain()}\n//           >\n//             <FiPlus />\n//             Add Root SubDomain\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Quick Guide */}\n//       <div className=\"quick-guide\">\n//         <h3>How to Build Your SubDomain Hierarchy:</h3>\n//         <div className=\"guide-steps\">\n//           <div className=\"guide-step\">\n//             <span className=\"step-number\">1</span>\n//             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n//           </div>\n//           <div className=\"guide-step\">\n//             <span className=\"step-number\">2</span>\n//             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n//           </div>\n//           <div className=\"guide-step\">\n//             <span className=\"step-number\">3</span>\n//             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Domain Info Card */}\n//       {domain && (\n//         <div className=\"domain-info-card\">\n//           <div className=\"domain-icon\">\n//             <FiFolder />\n//           </div>\n//           <div className=\"domain-details\">\n//             <h3>{domain.title}</h3>\n//             <p>{domain.description}</p>\n//             <div className=\"domain-stats\">\n//               <span className=\"stat-item\">\n//                 <strong>{subDomains.length}</strong> root sub-domains\n//               </span>\n//               <span className=\"stat-item\">\n//                 <strong>{domain.projectCount || 0}</strong> total projects\n//               </span>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* SubDomain Tree */}\n//       <div className=\"subdomain-tree-container\">\n//         <div className=\"tree-header\">\n//           <h2>SubDomain Hierarchy</h2>\n//           <div className=\"tree-legend\">\n//             <span className=\"legend-item\">\n//               <FiFolder className=\"folder-icon\" />\n//               Has children\n//             </span>\n//             <span className=\"legend-item\">\n//               <FiTarget className=\"leaf-icon\" />\n//               Leaf (can have projects)\n//             </span>\n//           </div>\n//         </div>\n\n//         {subDomains.length > 0 ? (\n//           <div className=\"subdomain-tree\">\n//             {subDomains.map((subDomain) => (\n//               <SubDomainNode\n//                 key={subDomain.id}\n//                 subDomain={subDomain}\n//                 level={0}\n//                 isExpanded={expandedNodes.has(subDomain.id)}\n//                 onToggleExpanded={toggleExpanded}\n//                 onEdit={handleEditSubDomain}\n//                 onDelete={handleDeleteSubDomain}\n//                 onAddChild={handleAddSubDomain}\n//                 expandedNodes={expandedNodes}\n//               />\n//             ))}\n//           </div>\n//         ) : (\n//           <div className=\"empty-tree-state\">\n//             <FiFolderPlus size={64} />\n//             <h3>No SubDomains Yet</h3>\n//             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n//             <div className=\"empty-state-examples\">\n//               <h4>Example Structure:</h4>\n//               <div className=\"example-tree\">\n//                 <div className=\"example-item\">📂 Machine Learning</div>\n//                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n//                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n//                 <div className=\"example-item\">🎯 Data Science</div>\n//               </div>\n//             </div>\n//             <div className=\"empty-state-actions\">\n//               <button \n//                 className=\"primary-button large\" \n//                 onClick={() => handleAddSubDomain()}\n//               >\n//                 <FiPlus />\n//                 Create Your First SubDomain\n//               </button>\n//               <p className=\"help-text\">\n//                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n//               </p>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Add/Edit Modal */}\n//       {showAddModal && (\n//         <SubDomainModal\n//           subDomain={editingSubDomain}\n//           parent={selectedParent}\n//           domain={domain}\n//           onClose={() => {\n//             setShowAddModal(false);\n//             setEditingSubDomain(null);\n//             setSelectedParent(null);\n//           }}\n//           onSave={() => {\n//             setShowAddModal(false);\n//             setEditingSubDomain(null);\n//             setSelectedParent(null);\n//             fetchDomainAndSubDomains();\n//           }}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // SubDomain Node Component\n// const SubDomainNode = ({ \n//   subDomain, \n//   level, \n//   isExpanded, \n//   onToggleExpanded, \n//   onEdit, \n//   onDelete, \n//   onAddChild,\n//   expandedNodes \n// }) => {\n//   const [showMenu, setShowMenu] = useState(false);\n//   const hasChildren = subDomain.children && subDomain.children.length > 0;\n//   const isLeaf = !hasChildren;\n\n//   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n//     title: subDomain.title,\n//     level,\n//     hasChildren,\n//     isLeaf,\n//     isExpanded,\n//     projectCount: subDomain.projectCount\n//   });\n\n//   return (\n//     <div className={`subdomain-node level-${level}`}>\n//       <div className=\"node-content\">\n//         <div className=\"node-main\">\n//           {hasChildren ? (\n//             <button \n//               className=\"expand-button\"\n//               onClick={() => onToggleExpanded(subDomain.id)}\n//             >\n//               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n//             </button>\n//           ) : (\n//             <div className=\"expand-placeholder\" />\n//           )}\n          \n//           <div className=\"node-icon\">\n//             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n//           </div>\n          \n//           <div className=\"node-info\">\n//             <h4 className=\"node-title\">{subDomain.title}</h4>\n//             <p className=\"node-description\">{subDomain.description}</p>\n//             <div className=\"node-stats\">\n//               {hasChildren && (\n//                 <span className=\"stat-badge\">\n//                   {subDomain.children.length} sub-domains\n//                 </span>\n//               )}\n//               {subDomain.projectCount > 0 && (\n//                 <span className=\"stat-badge projects\">\n//                   {subDomain.projectCount} projects\n//                 </span>\n//               )}\n//               {isLeaf && (\n//                 <span className=\"stat-badge leaf\">\n//                   Can have projects\n//                 </span>\n//               )}\n//             </div>\n//           </div>\n//         </div>\n        \n//         <div className=\"node-actions\">\n//           <button \n//             className=\"action-button add\" \n//             onClick={() => onAddChild(subDomain)}\n//             title={`Add child subdomain under \"${subDomain.title}\"`}\n//           >\n//             <FiPlus />\n//           </button>\n//           <div className=\"action-menu\">\n//             <button \n//               onClick={() => setShowMenu(!showMenu)}\n//               title=\"More actions\"\n//             >\n//               <FiMoreVertical />\n//             </button>\n//             {showMenu && (\n//               <div className=\"dropdown-menu\">\n//                 <button onClick={() => {\n//                   onEdit(subDomain);\n//                   setShowMenu(false);\n//                 }}>\n//                   <FiEdit /> Edit\n//                 </button>\n//                 <button onClick={() => {\n//                   onAddChild(subDomain);\n//                   setShowMenu(false);\n//                 }}>\n//                   <FiPlus /> Add Child SubDomain\n//                 </button>\n//                 <button onClick={() => {\n//                   onDelete(subDomain);\n//                   setShowMenu(false);\n//                 }} className=\"danger\">\n//                   <FiTrash2 /> Delete\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n      \n//       {/* Children */}\n//       {hasChildren && isExpanded && (\n//         <div className=\"node-children\">\n//           {subDomain.children.map((child) => (\n//             <SubDomainNode\n//               key={child.id}\n//               subDomain={child}\n//               level={level + 1}\n//               isExpanded={expandedNodes.has(child.id)}\n//               onToggleExpanded={onToggleExpanded}\n//               onEdit={onEdit}\n//               onDelete={onDelete}\n//               onAddChild={onAddChild}\n//               expandedNodes={expandedNodes}\n//             />\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// // SubDomain Modal Component - CORRECTED VERSION\n// const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     title: subDomain?.title || '',\n//     description: subDomain?.description || ''\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   console.log('📝 SUBDOMAIN MODAL - Props:', {\n//     isEditing: !!subDomain,\n//     parentTitle: parent?.title,\n//     domainTitle: domain?.title,\n//     formData\n//   });\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     try {\n//       const requestData = {\n//         title: formData.title.trim(),\n//         description: formData.description.trim(),\n//         domainId: domain.id,\n//         parentId: parent?.id || null\n//       };\n\n//       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n//       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n//       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n//       if (subDomain) {\n//         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n//         const response = await authService.updateSubDomain(subDomain.id, requestData);\n//         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n//         toast.success('Sub-domain updated successfully');\n//       } else {\n//         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n//         const response = await authService.createSubDomain(requestData);\n//         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n//         toast.success('Sub-domain created successfully');\n//       }\n\n//       onSave();\n//     } catch (error) {\n//       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n//       console.error('❌ SUBDOMAIN SAVE - Error response:', error.response);\n//       console.error('❌ SUBDOMAIN SAVE - Error data:', error.response?.data);\n      \n//       const errorMessage = error.response?.data?.message || \n//                           error.response?.data?.error || \n//                           'Failed to save sub-domain';\n//       toast.error(errorMessage);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getModalTitle = () => {\n//     if (subDomain) {\n//       return `Edit SubDomain: ${subDomain.title}`;\n//     }\n//     if (parent) {\n//       return `Add SubDomain under: ${parent.title}`;\n//     }\n//     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n//   };\n\n//   const getLevel = () => {\n//     if (!parent) return 'Root Level';\n//     return `Level ${(parent.level || 0) + 1}`;\n//   };\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal\">\n//         <div className=\"modal-header\">\n//           <h2>{getModalTitle()}</h2>\n//           <button onClick={onClose}>×</button>\n//         </div>\n        \n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label>SubDomain Title *</label>\n//             <input\n//               type=\"text\"\n//               value={formData.title}\n//               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n//               placeholder=\"e.g., Machine Learning, Deep Learning\"\n//               required\n//               minLength={3}\n//               maxLength={100}\n//             />\n//           </div>\n          \n//           <div className=\"form-group\">\n//             <label>Description (Optional)</label>\n//             <textarea\n//               value={formData.description}\n//               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n//               rows={3}\n//               placeholder=\"Describe what this sub-domain covers...\"\n//               maxLength={500}\n//             />\n//           </div>\n          \n//           <div className=\"modal-info\">\n//             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n//             {parent && (\n//               <>\n//                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n//               </>\n//             )}\n//             <strong>Level:</strong> {getLevel()}\n//           </div>\n          \n//           <div className=\"modal-actions\">\n//             <button type=\"button\" onClick={onClose} disabled={loading}>\n//               Cancel\n//             </button>\n//             <button \n//               type=\"submit\" \n//               className=\"primary-button\" \n//               disabled={loading || !formData.title.trim()}\n//             >\n//               {loading ? 'Saving...' : 'Save SubDomain'}\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SubDomainManagement;\n\n\n\n\n\n\n\n// // // src/components/domains/SubDomainManagement.js - CORRECTED VERSION\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams, useNavigate } from 'react-router-dom';\n// // import { authService } from '../../services/authService';\n// // import { toast } from 'react-toastify';\n// // import {\n// //   FiPlus,\n// //   FiEdit,\n// //   FiTrash2,\n// //   FiChevronDown,\n// //   FiChevronRight,\n// //   FiFolder,\n// //   FiFolderPlus,\n// //   FiFileText,\n// //   FiArrowLeft,\n// //   FiMoreVertical,\n// //   FiMove,\n// //   FiTarget\n// // } from 'react-icons/fi';\n\n// // const SubDomainManagement = () => {\n// //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n  \n// //   const { domainId } = useParams();\n// //   const navigate = useNavigate();\n  \n// //   const [domain, setDomain] = useState(null);\n// //   const [subDomains, setSubDomains] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [showAddModal, setShowAddModal] = useState(false);\n// //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// //   const [selectedParent, setSelectedParent] = useState(null);\n// //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// //     domainId,\n// //     domain: domain?.title,\n// //     subDomainsCount: subDomains.length,\n// //     loading,\n// //     selectedParent: selectedParent?.title,\n// //     expandedCount: expandedNodes.size\n// //   });\n\n// //   useEffect(() => {\n// //     if (domainId) {\n// //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// //       fetchDomainAndSubDomains();\n// //     }\n// //   }, [domainId]);\n\n// //   const fetchDomainAndSubDomains = async () => {\n// //     try {\n// //       setLoading(true);\n      \n// //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n      \n// //       // ✅ CORRECTED: Get domain details first (without query params to get all domains, then filter)\n// //       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains (no params)');\n// //       const domainsResponse = await authService.getDomains();\n// //       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n      \n// //       // Extract specific domain from response\n// //       let domainData = null;\n// //       const domains = domainsResponse.data?.domains || domainsResponse.data?.data?.domains || [];\n// //       if (domains.length > 0) {\n// //         domainData = domains.find(d => d.id == domainId);\n// //       }\n      \n// //       console.log('🎯 SUBDOMAIN FETCH - Found domain:', domainData);\n      \n// //       // If we don't have domain data, create a placeholder\n// //       if (!domainData) {\n// //         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n// //         domainData = {\n// //           id: domainId,\n// //           title: `Domain ${domainId}`,\n// //           description: 'Domain not found in list',\n// //           projectCount: 0\n// //         };\n// //       }\n      \n// //       setDomain(domainData);\n      \n// //       // ✅ CORRECTED: Get subdomains using the correct API\n// //       console.log('🌐 SUBDOMAIN FETCH - Calling getSubDomains with domainId');\n// //       const subDomainsResponse = await authService.getSubDomains({ domainId: domainId });\n// //       console.log('✅ SUBDOMAIN FETCH - SubDomains response:', subDomainsResponse.data);\n      \n// //       const subDomainsData = subDomainsResponse.data?.subDomains || subDomainsResponse.data?.data?.subDomains || [];\n// //       console.log('🎯 SUBDOMAIN FETCH - Extracted subdomains:', subDomainsData);\n      \n// //       setSubDomains(subDomainsData);\n      \n// //       // Auto-expand first level\n// //       if (subDomainsData.length > 0) {\n// //         const firstLevelIds = subDomainsData.map(sd => sd.id);\n// //         setExpandedNodes(new Set(firstLevelIds));\n// //         console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// //       }\n      \n// //       // ✅ ALTERNATIVE: Try hierarchy API as fallback\n// //       try {\n// //         console.log('🌐 SUBDOMAIN FETCH - Also trying getDomainHierarchy as fallback');\n// //         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n// //         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n        \n// //         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n// //         if (hierarchyData?.subDomains && hierarchyData.subDomains.length > 0) {\n// //           console.log('🎯 SUBDOMAIN FETCH - Using hierarchy data instead');\n// //           setSubDomains(hierarchyData.subDomains);\n          \n// //           // Update domain info if more complete\n// //           if (hierarchyData.title && !domainData.title.includes('Domain ')) {\n// //             setDomain(prev => ({ ...prev, ...hierarchyData }));\n// //           }\n// //         }\n// //       } catch (hierarchyError) {\n// //         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed (using subdomains list):', hierarchyError);\n// //       }\n      \n// //     } catch (error) {\n// //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// //       toast.error('Failed to fetch domain information');\n      \n// //       // Create fallback domain\n// //       setDomain({\n// //         id: domainId,\n// //         title: `Domain ${domainId}`,\n// //         description: 'Error loading domain details',\n// //         projectCount: 0\n// //       });\n// //       setSubDomains([]);\n// //     } finally {\n// //       setLoading(false);\n// //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// //     }\n// //   };\n\n// //   const handleAddSubDomain = (parent = null) => {\n// //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n    \n// //     setSelectedParent(parent);\n// //     setEditingSubDomain(null);\n// //     setShowAddModal(true);\n    \n// //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// //       showAddModal: true, \n// //       selectedParent: parent?.title,\n// //       editingSubDomain: null \n// //     });\n// //   };\n\n// //   const handleEditSubDomain = (subDomain) => {\n// //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n    \n// //     setSelectedParent(null);\n// //     setEditingSubDomain(subDomain);\n// //     setShowAddModal(true);\n// //   };\n\n// //   const handleDeleteSubDomain = async (subDomain) => {\n// //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// //     const hasProjects = subDomain.projectCount > 0;\n    \n// //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// //     if (hasChildren) {\n// //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// //     }\n// //     if (hasProjects) {\n// //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// //     }\n    \n// //     if (!window.confirm(confirmMessage)) {\n// //       return;\n// //     }\n\n// //     try {\n// //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n      \n// //       const response = await authService.deleteSubDomain(subDomain.id);\n      \n// //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n      \n// //       toast.success('Sub-domain deleted successfully');\n// //       fetchDomainAndSubDomains();\n// //     } catch (error) {\n// //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// //       toast.error('Failed to delete sub-domain');\n// //     }\n// //   };\n\n// //   const toggleExpanded = (nodeId) => {\n// //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n    \n// //     const newExpanded = new Set(expandedNodes);\n// //     if (newExpanded.has(nodeId)) {\n// //       newExpanded.delete(nodeId);\n// //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// //     } else {\n// //       newExpanded.add(nodeId);\n// //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// //     }\n// //     setExpandedNodes(newExpanded);\n// //   };\n\n// //   if (loading) {\n// //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n    \n// //     return (\n// //       <div className=\"loading-container\">\n// //         <div className=\"loading-spinner\"></div>\n// //         <p>Loading sub-domains...</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// //   return (\n// //     <div className=\"subdomain-management\">\n// //       {/* Header with Breadcrumb */}\n// //       <div className=\"page-header\">\n// //         <div className=\"header-content\">\n// //           <div className=\"breadcrumb\">\n// //             <button \n// //               className=\"breadcrumb-link\"\n// //               onClick={() => navigate('/domains')}\n// //             >\n// //               <FiArrowLeft />\n// //               Domains\n// //             </button>\n// //             <span className=\"breadcrumb-separator\">/</span>\n// //             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n// //           </div>\n// //           <h1>SubDomain Management</h1>\n// //           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n// //         </div>\n// //         <div className=\"header-actions\">\n// //           <button \n// //             className=\"primary-button\" \n// //             onClick={() => handleAddSubDomain()}\n// //           >\n// //             <FiPlus />\n// //             Add Root SubDomain\n// //           </button>\n// //         </div>\n// //       </div>\n\n// //       {/* Quick Guide */}\n// //       <div className=\"quick-guide\">\n// //         <h3>How to Build Your SubDomain Hierarchy:</h3>\n// //         <div className=\"guide-steps\">\n// //           <div className=\"guide-step\">\n// //             <span className=\"step-number\">1</span>\n// //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// //           </div>\n// //           <div className=\"guide-step\">\n// //             <span className=\"step-number\">2</span>\n// //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// //           </div>\n// //           <div className=\"guide-step\">\n// //             <span className=\"step-number\">3</span>\n// //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// //           </div>\n// //         </div>\n// //       </div>\n\n// //       {/* Domain Info Card */}\n// //       {domain && (\n// //         <div className=\"domain-info-card\">\n// //           <div className=\"domain-icon\">\n// //             <FiFolder />\n// //           </div>\n// //           <div className=\"domain-details\">\n// //             <h3>{domain.title}</h3>\n// //             <p>{domain.description}</p>\n// //             <div className=\"domain-stats\">\n// //               <span className=\"stat-item\">\n// //                 <strong>{subDomains.length}</strong> root sub-domains\n// //               </span>\n// //               <span className=\"stat-item\">\n// //                 <strong>{domain.projectCount || 0}</strong> total projects\n// //               </span>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       )}\n\n// //       {/* SubDomain Tree */}\n// //       <div className=\"subdomain-tree-container\">\n// //         <div className=\"tree-header\">\n// //           <h2>SubDomain Hierarchy</h2>\n// //           <div className=\"tree-legend\">\n// //             <span className=\"legend-item\">\n// //               <FiFolder className=\"folder-icon\" />\n// //               Has children\n// //             </span>\n// //             <span className=\"legend-item\">\n// //               <FiTarget className=\"leaf-icon\" />\n// //               Leaf (can have projects)\n// //             </span>\n// //           </div>\n// //         </div>\n\n// //         {subDomains.length > 0 ? (\n// //           <div className=\"subdomain-tree\">\n// //             {subDomains.map((subDomain) => (\n// //               <SubDomainNode\n// //                 key={subDomain.id}\n// //                 subDomain={subDomain}\n// //                 level={0}\n// //                 isExpanded={expandedNodes.has(subDomain.id)}\n// //                 onToggleExpanded={toggleExpanded}\n// //                 onEdit={handleEditSubDomain}\n// //                 onDelete={handleDeleteSubDomain}\n// //                 onAddChild={handleAddSubDomain}\n// //                 expandedNodes={expandedNodes}\n// //               />\n// //             ))}\n// //           </div>\n// //         ) : (\n// //           <div className=\"empty-tree-state\">\n// //             <FiFolderPlus size={64} />\n// //             <h3>No SubDomains Yet</h3>\n// //             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n// //             <div className=\"empty-state-examples\">\n// //               <h4>Example Structure:</h4>\n// //               <div className=\"example-tree\">\n// //                 <div className=\"example-item\">📂 Machine Learning</div>\n// //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// //                 <div className=\"example-item\">🎯 Data Science</div>\n// //               </div>\n// //             </div>\n// //             <div className=\"empty-state-actions\">\n// //               <button \n// //                 className=\"primary-button large\" \n// //                 onClick={() => handleAddSubDomain()}\n// //               >\n// //                 <FiPlus />\n// //                 Create Your First SubDomain\n// //               </button>\n// //               <p className=\"help-text\">\n// //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// //               </p>\n// //             </div>\n// //           </div>\n// //         )}\n// //       </div>\n\n// //       {/* Add/Edit Modal */}\n// //       {showAddModal && (\n// //         <SubDomainModal\n// //           subDomain={editingSubDomain}\n// //           parent={selectedParent}\n// //           domain={domain}\n// //           onClose={() => {\n// //             setShowAddModal(false);\n// //             setEditingSubDomain(null);\n// //             setSelectedParent(null);\n// //           }}\n// //           onSave={() => {\n// //             setShowAddModal(false);\n// //             setEditingSubDomain(null);\n// //             setSelectedParent(null);\n// //             fetchDomainAndSubDomains();\n// //           }}\n// //         />\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // // SubDomain Node Component\n// // const SubDomainNode = ({ \n// //   subDomain, \n// //   level, \n// //   isExpanded, \n// //   onToggleExpanded, \n// //   onEdit, \n// //   onDelete, \n// //   onAddChild,\n// //   expandedNodes \n// // }) => {\n// //   const [showMenu, setShowMenu] = useState(false);\n// //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// //   const isLeaf = !hasChildren;\n\n// //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// //     title: subDomain.title,\n// //     level,\n// //     hasChildren,\n// //     isLeaf,\n// //     isExpanded,\n// //     projectCount: subDomain.projectCount\n// //   });\n\n// //   return (\n// //     <div className={`subdomain-node level-${level}`}>\n// //       <div className=\"node-content\">\n// //         <div className=\"node-main\">\n// //           {hasChildren ? (\n// //             <button \n// //               className=\"expand-button\"\n// //               onClick={() => onToggleExpanded(subDomain.id)}\n// //             >\n// //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// //             </button>\n// //           ) : (\n// //             <div className=\"expand-placeholder\" />\n// //           )}\n          \n// //           <div className=\"node-icon\">\n// //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// //           </div>\n          \n// //           <div className=\"node-info\">\n// //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// //             <p className=\"node-description\">{subDomain.description}</p>\n// //             <div className=\"node-stats\">\n// //               {hasChildren && (\n// //                 <span className=\"stat-badge\">\n// //                   {subDomain.children.length} sub-domains\n// //                 </span>\n// //               )}\n// //               {subDomain.projectCount > 0 && (\n// //                 <span className=\"stat-badge projects\">\n// //                   {subDomain.projectCount} projects\n// //                 </span>\n// //               )}\n// //               {isLeaf && (\n// //                 <span className=\"stat-badge leaf\">\n// //                   Can have projects\n// //                 </span>\n// //               )}\n// //             </div>\n// //           </div>\n// //         </div>\n        \n// //         <div className=\"node-actions\">\n// //           <button \n// //             className=\"action-button add\" \n// //             onClick={() => onAddChild(subDomain)}\n// //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// //           >\n// //             <FiPlus />\n// //           </button>\n// //           <div className=\"action-menu\">\n// //             <button \n// //               onClick={() => setShowMenu(!showMenu)}\n// //               title=\"More actions\"\n// //             >\n// //               <FiMoreVertical />\n// //             </button>\n// //             {showMenu && (\n// //               <div className=\"dropdown-menu\">\n// //                 <button onClick={() => {\n// //                   onEdit(subDomain);\n// //                   setShowMenu(false);\n// //                 }}>\n// //                   <FiEdit /> Edit\n// //                 </button>\n// //                 <button onClick={() => {\n// //                   onAddChild(subDomain);\n// //                   setShowMenu(false);\n// //                 }}>\n// //                   <FiPlus /> Add Child SubDomain\n// //                 </button>\n// //                 <button onClick={() => {\n// //                   onDelete(subDomain);\n// //                   setShowMenu(false);\n// //                 }} className=\"danger\">\n// //                   <FiTrash2 /> Delete\n// //                 </button>\n// //               </div>\n// //             )}\n// //           </div>\n// //         </div>\n// //       </div>\n      \n// //       {/* Children */}\n// //       {hasChildren && isExpanded && (\n// //         <div className=\"node-children\">\n// //           {subDomain.children.map((child) => (\n// //             <SubDomainNode\n// //               key={child.id}\n// //               subDomain={child}\n// //               level={level + 1}\n// //               isExpanded={expandedNodes.has(child.id)}\n// //               onToggleExpanded={onToggleExpanded}\n// //               onEdit={onEdit}\n// //               onDelete={onDelete}\n// //               onAddChild={onAddChild}\n// //               expandedNodes={expandedNodes}\n// //             />\n// //           ))}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // // SubDomain Modal Component - CORRECTED VERSION\n// // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// //   const [formData, setFormData] = useState({\n// //     title: subDomain?.title || '',\n// //     description: subDomain?.description || ''\n// //   });\n// //   const [loading, setLoading] = useState(false);\n\n// //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// //     isEditing: !!subDomain,\n// //     parentTitle: parent?.title,\n// //     domainTitle: domain?.title,\n// //     formData\n// //   });\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     setLoading(true);\n\n// //     try {\n// //       const requestData = {\n// //         title: formData.title.trim(),\n// //         description: formData.description.trim(),\n// //         domainId: domain.id,\n// //         parentId: parent?.id || null\n// //       };\n\n// //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// //       if (subDomain) {\n// //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// //         toast.success('Sub-domain updated successfully');\n// //       } else {\n// //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// //         const response = await authService.createSubDomain(requestData);\n// //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// //         toast.success('Sub-domain created successfully');\n// //       }\n\n// //       onSave();\n// //     } catch (error) {\n// //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// //       console.error('❌ SUBDOMAIN SAVE - Error response:', error.response);\n// //       console.error('❌ SUBDOMAIN SAVE - Error data:', error.response?.data);\n      \n// //       const errorMessage = error.response?.data?.message || \n// //                           error.response?.data?.error || \n// //                           'Failed to save sub-domain';\n// //       toast.error(errorMessage);\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const getModalTitle = () => {\n// //     if (subDomain) {\n// //       return `Edit SubDomain: ${subDomain.title}`;\n// //     }\n// //     if (parent) {\n// //       return `Add SubDomain under: ${parent.title}`;\n// //     }\n// //     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n// //   };\n\n// //   const getLevel = () => {\n// //     if (!parent) return 'Root Level';\n// //     return `Level ${(parent.level || 0) + 1}`;\n// //   };\n\n// //   return (\n// //     <div className=\"modal-overlay\">\n// //       <div className=\"modal\">\n// //         <div className=\"modal-header\">\n// //           <h2>{getModalTitle()}</h2>\n// //           <button onClick={onClose}>×</button>\n// //         </div>\n        \n// //         <form onSubmit={handleSubmit}>\n// //           <div className=\"form-group\">\n// //             <label>SubDomain Title *</label>\n// //             <input\n// //               type=\"text\"\n// //               value={formData.title}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// //               required\n// //               minLength={3}\n// //               maxLength={100}\n// //             />\n// //           </div>\n          \n// //           <div className=\"form-group\">\n// //             <label>Description (Optional)</label>\n// //             <textarea\n// //               value={formData.description}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// //               rows={3}\n// //               placeholder=\"Describe what this sub-domain covers...\"\n// //               maxLength={500}\n// //             />\n// //           </div>\n          \n// //           <div className=\"modal-info\">\n// //             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n// //             {parent && (\n// //               <>\n// //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// //               </>\n// //             )}\n// //             <strong>Level:</strong> {getLevel()}\n// //           </div>\n          \n// //           <div className=\"modal-actions\">\n// //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// //               Cancel\n// //             </button>\n// //             <button \n// //               type=\"submit\" \n// //               className=\"primary-button\" \n// //               disabled={loading || !formData.title.trim()}\n// //             >\n// //               {loading ? 'Saving...' : 'Save SubDomain'}\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default SubDomainManagement;\n\n\n// // // // src/components/domains/SubDomainManagement.js - FIXED VERSION\n// // // import React, { useState, useEffect } from 'react';\n// // // import { useParams, useNavigate } from 'react-router-dom';\n// // // import { authService } from '../../services/authService';\n// // // import { toast } from 'react-toastify';\n// // // import {\n// // //   FiPlus,\n// // //   FiEdit,\n// // //   FiTrash2,\n// // //   FiChevronDown,\n// // //   FiChevronRight,\n// // //   FiFolder,\n// // //   FiFolderPlus,\n// // //   FiFileText,\n// // //   FiArrowLeft,\n// // //   FiMoreVertical,\n// // //   FiMove,\n// // //   FiTarget\n// // // } from 'react-icons/fi';\n\n// // // const SubDomainManagement = () => {\n// // //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n  \n// // //   const { domainId } = useParams();\n// // //   const navigate = useNavigate();\n  \n// // //   const [domain, setDomain] = useState(null);\n// // //   const [subDomains, setSubDomains] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [showAddModal, setShowAddModal] = useState(false);\n// // //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// // //   const [selectedParent, setSelectedParent] = useState(null);\n// // //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// // //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// // //     domainId,\n// // //     domain: domain?.title,\n// // //     subDomainsCount: subDomains.length,\n// // //     loading,\n// // //     selectedParent: selectedParent?.title,\n// // //     expandedCount: expandedNodes.size\n// // //   });\n\n// // //   useEffect(() => {\n// // //     if (domainId) {\n// // //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// // //       fetchDomainAndSubDomains();\n// // //     }\n// // //   }, [domainId]);\n\n// // //   const fetchDomainAndSubDomains = async () => {\n// // //     try {\n// // //       setLoading(true);\n      \n// // //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// // //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n      \n// // //       // First, let's try to get domain details\n// // //       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains with filter');\n// // //       const domainsResponse = await authService.getDomains({ id: domainId });\n// // //       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n      \n// // //       // Extract domain from response\n// // //       let domainData = null;\n// // //       if (domainsResponse.data?.domains && domainsResponse.data.domains.length > 0) {\n// // //         domainData = domainsResponse.data.domains.find(d => d.id == domainId);\n// // //       } else if (domainsResponse.data?.data?.domains && domainsResponse.data.data.domains.length > 0) {\n// // //         domainData = domainsResponse.data.data.domains.find(d => d.id == domainId);\n// // //       } else if (Array.isArray(domainsResponse.data)) {\n// // //         domainData = domainsResponse.data.find(d => d.id == domainId);\n// // //       }\n      \n// // //       console.log('🎯 SUBDOMAIN FETCH - Extracted domain:', domainData);\n      \n// // //       // If we don't have domain data, create a placeholder\n// // //       if (!domainData) {\n// // //         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n// // //         domainData = {\n// // //           id: domainId,\n// // //           title: `Domain ${domainId}`,\n// // //           description: 'Loading domain details...',\n// // //           projectCount: 0\n// // //         };\n// // //       }\n      \n// // //       setDomain(domainData);\n      \n// // //       // Try to get hierarchy if domain exists\n// // //       try {\n// // //         console.log('🌐 SUBDOMAIN FETCH - Calling getDomainHierarchy');\n// // //         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n// // //         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n        \n// // //         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n// // //         console.log('🎯 SUBDOMAIN FETCH - Extracted hierarchy data:', hierarchyData);\n        \n// // //         setSubDomains(hierarchyData?.subDomains || []);\n        \n// // //         // Auto-expand first level\n// // //         if (hierarchyData?.subDomains?.length > 0) {\n// // //           const firstLevelIds = hierarchyData.subDomains.map(sd => sd.id);\n// // //           setExpandedNodes(new Set(firstLevelIds));\n// // //           console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// // //         }\n// // //       } catch (hierarchyError) {\n// // //         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed, starting with empty structure:', hierarchyError);\n// // //         setSubDomains([]);\n// // //       }\n      \n// // //     } catch (error) {\n// // //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// // //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// // //       toast.error('Failed to fetch domain information');\n      \n// // //       // Create fallback domain\n// // //       setDomain({\n// // //         id: domainId,\n// // //         title: `Domain ${domainId}`,\n// // //         description: 'Error loading domain details',\n// // //         projectCount: 0\n// // //       });\n// // //       setSubDomains([]);\n// // //     } finally {\n// // //       setLoading(false);\n// // //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// // //     }\n// // //   };\n\n// // //   const handleAddSubDomain = (parent = null) => {\n// // //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// // //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n    \n// // //     setSelectedParent(parent);\n// // //     setEditingSubDomain(null);\n// // //     setShowAddModal(true);\n    \n// // //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// // //       showAddModal: true, \n// // //       selectedParent: parent?.title,\n// // //       editingSubDomain: null \n// // //     });\n// // //   };\n\n// // //   const handleEditSubDomain = (subDomain) => {\n// // //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// // //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n    \n// // //     setSelectedParent(null);\n// // //     setEditingSubDomain(subDomain);\n// // //     setShowAddModal(true);\n// // //   };\n\n// // //   const handleDeleteSubDomain = async (subDomain) => {\n// // //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // //     const hasProjects = subDomain.projectCount > 0;\n    \n// // //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// // //     if (hasChildren) {\n// // //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// // //     }\n// // //     if (hasProjects) {\n// // //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// // //     }\n    \n// // //     if (!window.confirm(confirmMessage)) {\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// // //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// // //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// // //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n      \n// // //       const response = await authService.deleteSubDomain(subDomain.id);\n      \n// // //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n      \n// // //       toast.success('Sub-domain deleted successfully');\n// // //       fetchDomainAndSubDomains();\n// // //     } catch (error) {\n// // //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// // //       toast.error('Failed to delete sub-domain');\n// // //     }\n// // //   };\n\n// // //   const toggleExpanded = (nodeId) => {\n// // //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n    \n// // //     const newExpanded = new Set(expandedNodes);\n// // //     if (newExpanded.has(nodeId)) {\n// // //       newExpanded.delete(nodeId);\n// // //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// // //     } else {\n// // //       newExpanded.add(nodeId);\n// // //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// // //     }\n// // //     setExpandedNodes(newExpanded);\n// // //   };\n\n// // //   if (loading) {\n// // //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n    \n// // //     return (\n// // //       <div className=\"loading-container\">\n// // //         <div className=\"loading-spinner\"></div>\n// // //         <p>Loading sub-domains...</p>\n// // //       </div>\n// // //     );\n// // //   }\n\n// // //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// // //   return (\n// // //     <div className=\"subdomain-management\">\n// // //       {/* Header with Breadcrumb */}\n// // //       <div className=\"page-header\">\n// // //         <div className=\"header-content\">\n// // //           <div className=\"breadcrumb\">\n// // //             <button \n// // //               className=\"breadcrumb-link\"\n// // //               onClick={() => navigate('/domains')}\n// // //             >\n// // //               <FiArrowLeft />\n// // //               Domains\n// // //             </button>\n// // //             <span className=\"breadcrumb-separator\">/</span>\n// // //             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n// // //           </div>\n// // //           <h1>SubDomain Management</h1>\n// // //           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n// // //         </div>\n// // //         <div className=\"header-actions\">\n// // //           <button \n// // //             className=\"primary-button\" \n// // //             onClick={() => handleAddSubDomain()}\n// // //           >\n// // //             <FiPlus />\n// // //             Add Root SubDomain\n// // //           </button>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Quick Guide */}\n// // //       <div className=\"quick-guide\">\n// // //         <h3>How to Build Your SubDomain Hierarchy:</h3>\n// // //         <div className=\"guide-steps\">\n// // //           <div className=\"guide-step\">\n// // //             <span className=\"step-number\">1</span>\n// // //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// // //           </div>\n// // //           <div className=\"guide-step\">\n// // //             <span className=\"step-number\">2</span>\n// // //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// // //           </div>\n// // //           <div className=\"guide-step\">\n// // //             <span className=\"step-number\">3</span>\n// // //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Domain Info Card */}\n// // //       {domain && (\n// // //         <div className=\"domain-info-card\">\n// // //           <div className=\"domain-icon\">\n// // //             <FiFolder />\n// // //           </div>\n// // //           <div className=\"domain-details\">\n// // //             <h3>{domain.title}</h3>\n// // //             <p>{domain.description}</p>\n// // //             <div className=\"domain-stats\">\n// // //               <span className=\"stat-item\">\n// // //                 <strong>{subDomains.length}</strong> root sub-domains\n// // //               </span>\n// // //               <span className=\"stat-item\">\n// // //                 <strong>{domain.projectCount || 0}</strong> total projects\n// // //               </span>\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       )}\n\n// // //       {/* SubDomain Tree */}\n// // //       <div className=\"subdomain-tree-container\">\n// // //         <div className=\"tree-header\">\n// // //           <h2>SubDomain Hierarchy</h2>\n// // //           <div className=\"tree-legend\">\n// // //             <span className=\"legend-item\">\n// // //               <FiFolder className=\"folder-icon\" />\n// // //               Has children\n// // //             </span>\n// // //             <span className=\"legend-item\">\n// // //               <FiTarget className=\"leaf-icon\" />\n// // //               Leaf (can have projects)\n// // //             </span>\n// // //           </div>\n// // //         </div>\n\n// // //         {subDomains.length > 0 ? (\n// // //           <div className=\"subdomain-tree\">\n// // //             {subDomains.map((subDomain) => (\n// // //               <SubDomainNode\n// // //                 key={subDomain.id}\n// // //                 subDomain={subDomain}\n// // //                 level={0}\n// // //                 isExpanded={expandedNodes.has(subDomain.id)}\n// // //                 onToggleExpanded={toggleExpanded}\n// // //                 onEdit={handleEditSubDomain}\n// // //                 onDelete={handleDeleteSubDomain}\n// // //                 onAddChild={handleAddSubDomain}\n// // //                 expandedNodes={expandedNodes}\n// // //               />\n// // //             ))}\n// // //           </div>\n// // //         ) : (\n// // //           <div className=\"empty-tree-state\">\n// // //             <FiFolderPlus size={64} />\n// // //             <h3>No SubDomains Yet</h3>\n// // //             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n// // //             <div className=\"empty-state-examples\">\n// // //               <h4>Example Structure:</h4>\n// // //               <div className=\"example-tree\">\n// // //                 <div className=\"example-item\">📂 Machine Learning</div>\n// // //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// // //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// // //                 <div className=\"example-item\">🎯 Data Science</div>\n// // //               </div>\n// // //             </div>\n// // //             <div className=\"empty-state-actions\">\n// // //               <button \n// // //                 className=\"primary-button large\" \n// // //                 onClick={() => handleAddSubDomain()}\n// // //               >\n// // //                 <FiPlus />\n// // //                 Create Your First SubDomain\n// // //               </button>\n// // //               <p className=\"help-text\">\n// // //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// // //               </p>\n// // //             </div>\n// // //           </div>\n// // //         )}\n// // //       </div>\n\n// // //       {/* Add/Edit Modal */}\n// // //       {showAddModal && (\n// // //         <SubDomainModal\n// // //           subDomain={editingSubDomain}\n// // //           parent={selectedParent}\n// // //           domain={domain}\n// // //           onClose={() => {\n// // //             setShowAddModal(false);\n// // //             setEditingSubDomain(null);\n// // //             setSelectedParent(null);\n// // //           }}\n// // //           onSave={() => {\n// // //             setShowAddModal(false);\n// // //             setEditingSubDomain(null);\n// // //             setSelectedParent(null);\n// // //             fetchDomainAndSubDomains();\n// // //           }}\n// // //         />\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // SubDomain Node Component\n// // // const SubDomainNode = ({ \n// // //   subDomain, \n// // //   level, \n// // //   isExpanded, \n// // //   onToggleExpanded, \n// // //   onEdit, \n// // //   onDelete, \n// // //   onAddChild,\n// // //   expandedNodes \n// // // }) => {\n// // //   const [showMenu, setShowMenu] = useState(false);\n// // //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // //   const isLeaf = !hasChildren;\n\n// // //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// // //     title: subDomain.title,\n// // //     level,\n// // //     hasChildren,\n// // //     isLeaf,\n// // //     isExpanded,\n// // //     projectCount: subDomain.projectCount\n// // //   });\n\n// // //   return (\n// // //     <div className={`subdomain-node level-${level}`}>\n// // //       <div className=\"node-content\">\n// // //         <div className=\"node-main\">\n// // //           {hasChildren ? (\n// // //             <button \n// // //               className=\"expand-button\"\n// // //               onClick={() => onToggleExpanded(subDomain.id)}\n// // //             >\n// // //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// // //             </button>\n// // //           ) : (\n// // //             <div className=\"expand-placeholder\" />\n// // //           )}\n          \n// // //           <div className=\"node-icon\">\n// // //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// // //           </div>\n          \n// // //           <div className=\"node-info\">\n// // //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// // //             <p className=\"node-description\">{subDomain.description}</p>\n// // //             <div className=\"node-stats\">\n// // //               {hasChildren && (\n// // //                 <span className=\"stat-badge\">\n// // //                   {subDomain.children.length} sub-domains\n// // //                 </span>\n// // //               )}\n// // //               {subDomain.projectCount > 0 && (\n// // //                 <span className=\"stat-badge projects\">\n// // //                   {subDomain.projectCount} projects\n// // //                 </span>\n// // //               )}\n// // //               {isLeaf && (\n// // //                 <span className=\"stat-badge leaf\">\n// // //                   Can have projects\n// // //                 </span>\n// // //               )}\n// // //             </div>\n// // //           </div>\n// // //         </div>\n        \n// // //         <div className=\"node-actions\">\n// // //           <button \n// // //             className=\"action-button add\" \n// // //             onClick={() => onAddChild(subDomain)}\n// // //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// // //           >\n// // //             <FiPlus />\n// // //           </button>\n// // //           <div className=\"action-menu\">\n// // //             <button \n// // //               onClick={() => setShowMenu(!showMenu)}\n// // //               title=\"More actions\"\n// // //             >\n// // //               <FiMoreVertical />\n// // //             </button>\n// // //             {showMenu && (\n// // //               <div className=\"dropdown-menu\">\n// // //                 <button onClick={() => {\n// // //                   onEdit(subDomain);\n// // //                   setShowMenu(false);\n// // //                 }}>\n// // //                   <FiEdit /> Edit\n// // //                 </button>\n// // //                 <button onClick={() => {\n// // //                   onAddChild(subDomain);\n// // //                   setShowMenu(false);\n// // //                 }}>\n// // //                   <FiPlus /> Add Child SubDomain\n// // //                 </button>\n// // //                 <button onClick={() => {\n// // //                   onDelete(subDomain);\n// // //                   setShowMenu(false);\n// // //                 }} className=\"danger\">\n// // //                   <FiTrash2 /> Delete\n// // //                 </button>\n// // //               </div>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       </div>\n      \n// // //       {/* Children */}\n// // //       {hasChildren && isExpanded && (\n// // //         <div className=\"node-children\">\n// // //           {subDomain.children.map((child) => (\n// // //             <SubDomainNode\n// // //               key={child.id}\n// // //               subDomain={child}\n// // //               level={level + 1}\n// // //               isExpanded={expandedNodes.has(child.id)}\n// // //               onToggleExpanded={onToggleExpanded}\n// // //               onEdit={onEdit}\n// // //               onDelete={onDelete}\n// // //               onAddChild={onAddChild}\n// // //               expandedNodes={expandedNodes}\n// // //             />\n// // //           ))}\n// // //         </div>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // SubDomain Modal Component - FIXED VERSION\n// // // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// // //   const [formData, setFormData] = useState({\n// // //     title: subDomain?.title || '',\n// // //     description: subDomain?.description || ''\n// // //   });\n// // //   const [loading, setLoading] = useState(false);\n\n// // //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// // //     isEditing: !!subDomain,\n// // //     parentTitle: parent?.title,\n// // //     domainTitle: domain?.title,\n// // //     formData\n// // //   });\n\n// // //   // Enhanced slug generation with better validation\n// // //   const generateSlug = (title) => {\n// // //     if (!title || title.trim() === '') {\n// // //       return '';\n// // //     }\n    \n// // //     let slug = title\n// // //       .toLowerCase()\n// // //       .trim()\n// // //       .replace(/[^a-z0-9\\s-]/g, '') // Remove special chars except spaces and hyphens\n// // //       .replace(/\\s+/g, '-')         // Replace spaces with hyphens\n// // //       .replace(/-+/g, '-')          // Remove consecutive hyphens\n// // //       .replace(/^-|-$/g, '');       // Remove leading/trailing hyphens\n    \n// // //     // Ensure minimum length - if too short, add timestamp\n// // //     if (slug.length < 3) {\n// // //       slug = slug + '-' + Date.now().toString().slice(-4);\n// // //     }\n    \n// // //     // Ensure maximum length\n// // //     if (slug.length > 50) {\n// // //       slug = slug.substring(0, 50).replace(/-$/, '');\n// // //     }\n    \n// // //     return slug;\n// // //   };\n\n// // //   const slugPreview = generateSlug(formData.title);\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     setLoading(true);\n\n// // //     try {\n// // //       // Generate slug from title\n// // //       const slug = generateSlug(formData.title);\n      \n// // //       // Validate slug\n// // //       if (!slug || slug.length < 3) {\n// // //         toast.error('Title must generate a valid slug (at least 3 characters)');\n// // //         setLoading(false);\n// // //         return;\n// // //       }\n\n// // //       const requestData = {\n// // //         title: formData.title.trim(),\n// // //         description: formData.description.trim(),\n       \n// // //         domainId: domain.id,\n// // //         parentId: parent?.id || null\n// // //       };\n\n// // //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// // //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// // //       console.log('🔍 SUBDOMAIN SAVE - Generated slug:', slug, 'Length:', slug.length);\n// // //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// // //       if (subDomain) {\n// // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// // //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// // //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// // //         toast.success('Sub-domain updated successfully');\n// // //       } else {\n// // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// // //         const response = await authService.createSubDomain(requestData);\n// // //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// // //         toast.success('Sub-domain created successfully');\n// // //       }\n\n// // //       onSave();\n// // //     } catch (error) {\n// // //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// // //       console.error('❌ SUBDOMAIN SAVE - Error response:', error.response);\n// // //       console.error('❌ SUBDOMAIN SAVE - Error data:', error.response?.data);\n      \n// // //       // Better error handling\n// // //       const errorMessage = error.response?.data?.message || \n// // //                           error.response?.data?.error || \n// // //                           'Failed to save sub-domain';\n// // //       toast.error(errorMessage);\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   const getModalTitle = () => {\n// // //     if (subDomain) {\n// // //       return `Edit SubDomain: ${subDomain.title}`;\n// // //     }\n// // //     if (parent) {\n// // //       return `Add SubDomain under: ${parent.title}`;\n// // //     }\n// // //     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n// // //   };\n\n// // //   const getLevel = () => {\n// // //     if (!parent) return 'Root Level';\n// // //     // This is a simplified level calculation\n// // //     return `Level ${(parent.level || 0) + 1}`;\n// // //   };\n\n// // //   return (\n// // //     <div className=\"modal-overlay\">\n// // //       <div className=\"modal\">\n// // //         <div className=\"modal-header\">\n// // //           <h2>{getModalTitle()}</h2>\n// // //           <button onClick={onClose}>×</button>\n// // //         </div>\n        \n// // //         <form onSubmit={handleSubmit}>\n// // //           <div className=\"form-group\">\n// // //             <label>SubDomain Title *</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={formData.title}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// // //               required\n// // //               minLength={3}\n// // //               maxLength={100}\n// // //             />\n// // //             {formData.title && (\n// // //               <div className=\"slug-preview\">\n// // //                 <small>\n// // //                   URL Slug: <code>{slugPreview || 'enter-title-to-see-slug'}</code>\n// // //                   {slugPreview && slugPreview.length < 3 && (\n// // //                     <span style={{color: 'red'}}> (Too short - needs at least 3 chars)</span>\n// // //                   )}\n// // //                 </small>\n// // //               </div>\n// // //             )}\n// // //           </div>\n          \n// // //           <div className=\"form-group\">\n// // //             <label>Description (Optional)</label>\n// // //             <textarea\n// // //               value={formData.description}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// // //               rows={3}\n// // //               placeholder=\"Describe what this sub-domain covers...\"\n// // //               maxLength={500}\n// // //             />\n// // //           </div>\n          \n// // //           <div className=\"modal-info\">\n// // //             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n// // //             {parent && (\n// // //               <>\n// // //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// // //               </>\n// // //             )}\n// // //             <strong>Level:</strong> {getLevel()}\n// // //           </div>\n          \n// // //           <div className=\"modal-actions\">\n// // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // //               Cancel\n// // //             </button>\n// // //             <button \n// // //               type=\"submit\" \n// // //               className=\"primary-button\" \n// // //               disabled={loading || !formData.title.trim() || slugPreview.length < 3}\n// // //             >\n// // //               {loading ? 'Saving...' : 'Save SubDomain'}\n// // //             </button>\n// // //           </div>\n// // //         </form>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default SubDomainManagement;\n\n\n// // // // // src/components/domains/SubDomainManagement.js - REPLACE THE TEST VERSION\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import { useParams, useNavigate } from 'react-router-dom';\n// // // // import { authService } from '../../services/authService';\n// // // // import { toast } from 'react-toastify';\n// // // // import {\n// // // //   FiPlus,\n// // // //   FiEdit,\n// // // //   FiTrash2,\n// // // //   FiChevronDown,\n// // // //   FiChevronRight,\n// // // //   FiFolder,\n// // // //   FiFolderPlus,\n// // // //   FiFileText,\n// // // //   FiArrowLeft,\n// // // //   FiMoreVertical,\n// // // //   FiMove,\n// // // //   FiTarget\n// // // // } from 'react-icons/fi';\n\n// // // // const SubDomainManagement = () => {\n// // // //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n  \n// // // //   const { domainId } = useParams();\n// // // //   const navigate = useNavigate();\n  \n// // // //   const [domain, setDomain] = useState(null);\n// // // //   const [subDomains, setSubDomains] = useState([]);\n// // // //   const [loading, setLoading] = useState(true);\n// // // //   const [showAddModal, setShowAddModal] = useState(false);\n// // // //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// // // //   const [selectedParent, setSelectedParent] = useState(null);\n// // // //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// // // //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// // // //     domainId,\n// // // //     domain: domain?.title,\n// // // //     subDomainsCount: subDomains.length,\n// // // //     loading,\n// // // //     selectedParent: selectedParent?.title,\n// // // //     expandedCount: expandedNodes.size\n// // // //   });\n\n// // // //   useEffect(() => {\n// // // //     if (domainId) {\n// // // //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// // // //       fetchDomainAndSubDomains();\n// // // //     }\n// // // //   }, [domainId]);\n\n// // // //   const fetchDomainAndSubDomains = async () => {\n// // // //     try {\n// // // //       setLoading(true);\n      \n// // // //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// // // //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n      \n// // // //       // First, let's try to get domain details\n// // // //       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains with filter');\n// // // //       const domainsResponse = await authService.getDomains({ id: domainId });\n// // // //       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n      \n// // // //       // Extract domain from response\n// // // //       let domainData = null;\n// // // //       if (domainsResponse.data?.domains && domainsResponse.data.domains.length > 0) {\n// // // //         domainData = domainsResponse.data.domains.find(d => d.id == domainId);\n// // // //       } else if (domainsResponse.data?.data?.domains && domainsResponse.data.data.domains.length > 0) {\n// // // //         domainData = domainsResponse.data.data.domains.find(d => d.id == domainId);\n// // // //       } else if (Array.isArray(domainsResponse.data)) {\n// // // //         domainData = domainsResponse.data.find(d => d.id == domainId);\n// // // //       }\n      \n// // // //       console.log('🎯 SUBDOMAIN FETCH - Extracted domain:', domainData);\n      \n// // // //       // If we don't have domain data, create a placeholder\n// // // //       if (!domainData) {\n// // // //         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n// // // //         domainData = {\n// // // //           id: domainId,\n// // // //           title: `Domain ${domainId}`,\n// // // //           description: 'Loading domain details...',\n// // // //           projectCount: 0\n// // // //         };\n// // // //       }\n      \n// // // //       setDomain(domainData);\n      \n// // // //       // Try to get hierarchy if domain exists\n// // // //       try {\n// // // //         console.log('🌐 SUBDOMAIN FETCH - Calling getDomainHierarchy');\n// // // //         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n// // // //         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n        \n// // // //         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n// // // //         console.log('🎯 SUBDOMAIN FETCH - Extracted hierarchy data:', hierarchyData);\n        \n// // // //         setSubDomains(hierarchyData?.subDomains || []);\n        \n// // // //         // Auto-expand first level\n// // // //         if (hierarchyData?.subDomains?.length > 0) {\n// // // //           const firstLevelIds = hierarchyData.subDomains.map(sd => sd.id);\n// // // //           setExpandedNodes(new Set(firstLevelIds));\n// // // //           console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// // // //         }\n// // // //       } catch (hierarchyError) {\n// // // //         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed, starting with empty structure:', hierarchyError);\n// // // //         setSubDomains([]);\n// // // //       }\n      \n// // // //     } catch (error) {\n// // // //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// // // //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// // // //       toast.error('Failed to fetch domain information');\n      \n// // // //       // Create fallback domain\n// // // //       setDomain({\n// // // //         id: domainId,\n// // // //         title: `Domain ${domainId}`,\n// // // //         description: 'Error loading domain details',\n// // // //         projectCount: 0\n// // // //       });\n// // // //       setSubDomains([]);\n// // // //     } finally {\n// // // //       setLoading(false);\n// // // //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// // // //     }\n// // // //   };\n\n// // // //   const handleAddSubDomain = (parent = null) => {\n// // // //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// // // //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n    \n// // // //     setSelectedParent(parent);\n// // // //     setEditingSubDomain(null);\n// // // //     setShowAddModal(true);\n    \n// // // //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// // // //       showAddModal: true, \n// // // //       selectedParent: parent?.title,\n// // // //       editingSubDomain: null \n// // // //     });\n// // // //   };\n\n// // // //   const handleEditSubDomain = (subDomain) => {\n// // // //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// // // //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n    \n// // // //     setSelectedParent(null);\n// // // //     setEditingSubDomain(subDomain);\n// // // //     setShowAddModal(true);\n// // // //   };\n\n// // // //   const handleDeleteSubDomain = async (subDomain) => {\n// // // //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // //     const hasProjects = subDomain.projectCount > 0;\n    \n// // // //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// // // //     if (hasChildren) {\n// // // //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// // // //     }\n// // // //     if (hasProjects) {\n// // // //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// // // //     }\n    \n// // // //     if (!window.confirm(confirmMessage)) {\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// // // //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// // // //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// // // //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n      \n// // // //       const response = await authService.deleteSubDomain(subDomain.id);\n      \n// // // //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n      \n// // // //       toast.success('Sub-domain deleted successfully');\n// // // //       fetchDomainAndSubDomains();\n// // // //     } catch (error) {\n// // // //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// // // //       toast.error('Failed to delete sub-domain');\n// // // //     }\n// // // //   };\n\n// // // //   const toggleExpanded = (nodeId) => {\n// // // //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n    \n// // // //     const newExpanded = new Set(expandedNodes);\n// // // //     if (newExpanded.has(nodeId)) {\n// // // //       newExpanded.delete(nodeId);\n// // // //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// // // //     } else {\n// // // //       newExpanded.add(nodeId);\n// // // //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// // // //     }\n// // // //     setExpandedNodes(newExpanded);\n// // // //   };\n\n// // // //   if (loading) {\n// // // //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n    \n// // // //     return (\n// // // //       <div className=\"loading-container\">\n// // // //         <div className=\"loading-spinner\"></div>\n// // // //         <p>Loading sub-domains...</p>\n// // // //       </div>\n// // // //     );\n// // // //   }\n\n// // // //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// // // //   return (\n// // // //     <div className=\"subdomain-management\">\n// // // //       {/* Header with Breadcrumb */}\n// // // //       <div className=\"page-header\">\n// // // //         <div className=\"header-content\">\n// // // //           <div className=\"breadcrumb\">\n// // // //             <button \n// // // //               className=\"breadcrumb-link\"\n// // // //               onClick={() => navigate('/domains')}\n// // // //             >\n// // // //               <FiArrowLeft />\n// // // //               Domains\n// // // //             </button>\n// // // //             <span className=\"breadcrumb-separator\">/</span>\n// // // //             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n// // // //           </div>\n// // // //           <h1>SubDomain Management</h1>\n// // // //           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n// // // //         </div>\n// // // //         <div className=\"header-actions\">\n// // // //           <button \n// // // //             className=\"primary-button\" \n// // // //             onClick={() => handleAddSubDomain()}\n// // // //           >\n// // // //             <FiPlus />\n// // // //             Add Root SubDomain\n// // // //           </button>\n// // // //         </div>\n// // // //       </div>\n\n// // // //       {/* Quick Guide */}\n// // // //       <div className=\"quick-guide\">\n// // // //         <h3>How to Build Your SubDomain Hierarchy:</h3>\n// // // //         <div className=\"guide-steps\">\n// // // //           <div className=\"guide-step\">\n// // // //             <span className=\"step-number\">1</span>\n// // // //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// // // //           </div>\n// // // //           <div className=\"guide-step\">\n// // // //             <span className=\"step-number\">2</span>\n// // // //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// // // //           </div>\n// // // //           <div className=\"guide-step\">\n// // // //             <span className=\"step-number\">3</span>\n// // // //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// // // //           </div>\n// // // //         </div>\n// // // //       </div>\n\n// // // //       {/* Domain Info Card */}\n// // // //       {domain && (\n// // // //         <div className=\"domain-info-card\">\n// // // //           <div className=\"domain-icon\">\n// // // //             <FiFolder />\n// // // //           </div>\n// // // //           <div className=\"domain-details\">\n// // // //             <h3>{domain.title}</h3>\n// // // //             <p>{domain.description}</p>\n// // // //             <div className=\"domain-stats\">\n// // // //               <span className=\"stat-item\">\n// // // //                 <strong>{subDomains.length}</strong> root sub-domains\n// // // //               </span>\n// // // //               <span className=\"stat-item\">\n// // // //                 <strong>{domain.projectCount || 0}</strong> total projects\n// // // //               </span>\n// // // //             </div>\n// // // //           </div>\n// // // //         </div>\n// // // //       )}\n\n// // // //       {/* SubDomain Tree */}\n// // // //       <div className=\"subdomain-tree-container\">\n// // // //         <div className=\"tree-header\">\n// // // //           <h2>SubDomain Hierarchy</h2>\n// // // //           <div className=\"tree-legend\">\n// // // //             <span className=\"legend-item\">\n// // // //               <FiFolder className=\"folder-icon\" />\n// // // //               Has children\n// // // //             </span>\n// // // //             <span className=\"legend-item\">\n// // // //               <FiTarget className=\"leaf-icon\" />\n// // // //               Leaf (can have projects)\n// // // //             </span>\n// // // //           </div>\n// // // //         </div>\n\n// // // //         {subDomains.length > 0 ? (\n// // // //           <div className=\"subdomain-tree\">\n// // // //             {subDomains.map((subDomain) => (\n// // // //               <SubDomainNode\n// // // //                 key={subDomain.id}\n// // // //                 subDomain={subDomain}\n// // // //                 level={0}\n// // // //                 isExpanded={expandedNodes.has(subDomain.id)}\n// // // //                 onToggleExpanded={toggleExpanded}\n// // // //                 onEdit={handleEditSubDomain}\n// // // //                 onDelete={handleDeleteSubDomain}\n// // // //                 onAddChild={handleAddSubDomain}\n// // // //                 expandedNodes={expandedNodes}\n// // // //               />\n// // // //             ))}\n// // // //           </div>\n// // // //         ) : (\n// // // //           <div className=\"empty-tree-state\">\n// // // //             <FiFolderPlus size={64} />\n// // // //             <h3>No SubDomains Yet</h3>\n// // // //             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n// // // //             <div className=\"empty-state-examples\">\n// // // //               <h4>Example Structure:</h4>\n// // // //               <div className=\"example-tree\">\n// // // //                 <div className=\"example-item\">📂 Machine Learning</div>\n// // // //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// // // //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// // // //                 <div className=\"example-item\">🎯 Data Science</div>\n// // // //               </div>\n// // // //             </div>\n// // // //             <div className=\"empty-state-actions\">\n// // // //               <button \n// // // //                 className=\"primary-button large\" \n// // // //                 onClick={() => handleAddSubDomain()}\n// // // //               >\n// // // //                 <FiPlus />\n// // // //                 Create Your First SubDomain\n// // // //               </button>\n// // // //               <p className=\"help-text\">\n// // // //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// // // //               </p>\n// // // //             </div>\n// // // //           </div>\n// // // //         )}\n// // // //       </div>\n\n// // // //       {/* Add/Edit Modal */}\n// // // //       {showAddModal && (\n// // // //         <SubDomainModal\n// // // //           subDomain={editingSubDomain}\n// // // //           parent={selectedParent}\n// // // //           domain={domain}\n// // // //           onClose={() => {\n// // // //             setShowAddModal(false);\n// // // //             setEditingSubDomain(null);\n// // // //             setSelectedParent(null);\n// // // //           }}\n// // // //           onSave={() => {\n// // // //             setShowAddModal(false);\n// // // //             setEditingSubDomain(null);\n// // // //             setSelectedParent(null);\n// // // //             fetchDomainAndSubDomains();\n// // // //           }}\n// // // //         />\n// // // //       )}\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // // SubDomain Node Component\n// // // // const SubDomainNode = ({ \n// // // //   subDomain, \n// // // //   level, \n// // // //   isExpanded, \n// // // //   onToggleExpanded, \n// // // //   onEdit, \n// // // //   onDelete, \n// // // //   onAddChild,\n// // // //   expandedNodes \n// // // // }) => {\n// // // //   const [showMenu, setShowMenu] = useState(false);\n// // // //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // //   const isLeaf = !hasChildren;\n\n// // // //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// // // //     title: subDomain.title,\n// // // //     level,\n// // // //     hasChildren,\n// // // //     isLeaf,\n// // // //     isExpanded,\n// // // //     projectCount: subDomain.projectCount\n// // // //   });\n\n// // // //   return (\n// // // //     <div className={`subdomain-node level-${level}`}>\n// // // //       <div className=\"node-content\">\n// // // //         <div className=\"node-main\">\n// // // //           {hasChildren ? (\n// // // //             <button \n// // // //               className=\"expand-button\"\n// // // //               onClick={() => onToggleExpanded(subDomain.id)}\n// // // //             >\n// // // //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// // // //             </button>\n// // // //           ) : (\n// // // //             <div className=\"expand-placeholder\" />\n// // // //           )}\n          \n// // // //           <div className=\"node-icon\">\n// // // //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// // // //           </div>\n          \n// // // //           <div className=\"node-info\">\n// // // //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// // // //             <p className=\"node-description\">{subDomain.description}</p>\n// // // //             <div className=\"node-stats\">\n// // // //               {hasChildren && (\n// // // //                 <span className=\"stat-badge\">\n// // // //                   {subDomain.children.length} sub-domains\n// // // //                 </span>\n// // // //               )}\n// // // //               {subDomain.projectCount > 0 && (\n// // // //                 <span className=\"stat-badge projects\">\n// // // //                   {subDomain.projectCount} projects\n// // // //                 </span>\n// // // //               )}\n// // // //               {isLeaf && (\n// // // //                 <span className=\"stat-badge leaf\">\n// // // //                   Can have projects\n// // // //                 </span>\n// // // //               )}\n// // // //             </div>\n// // // //           </div>\n// // // //         </div>\n        \n// // // //         <div className=\"node-actions\">\n// // // //           <button \n// // // //             className=\"action-button add\" \n// // // //             onClick={() => onAddChild(subDomain)}\n// // // //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// // // //           >\n// // // //             <FiPlus />\n// // // //           </button>\n// // // //           <div className=\"action-menu\">\n// // // //             <button \n// // // //               onClick={() => setShowMenu(!showMenu)}\n// // // //               title=\"More actions\"\n// // // //             >\n// // // //               <FiMoreVertical />\n// // // //             </button>\n// // // //             {showMenu && (\n// // // //               <div className=\"dropdown-menu\">\n// // // //                 <button onClick={() => {\n// // // //                   onEdit(subDomain);\n// // // //                   setShowMenu(false);\n// // // //                 }}>\n// // // //                   <FiEdit /> Edit\n// // // //                 </button>\n// // // //                 <button onClick={() => {\n// // // //                   onAddChild(subDomain);\n// // // //                   setShowMenu(false);\n// // // //                 }}>\n// // // //                   <FiPlus /> Add Child SubDomain\n// // // //                 </button>\n// // // //                 <button onClick={() => {\n// // // //                   onDelete(subDomain);\n// // // //                   setShowMenu(false);\n// // // //                 }} className=\"danger\">\n// // // //                   <FiTrash2 /> Delete\n// // // //                 </button>\n// // // //               </div>\n// // // //             )}\n// // // //           </div>\n// // // //         </div>\n// // // //       </div>\n      \n// // // //       {/* Children */}\n// // // //       {hasChildren && isExpanded && (\n// // // //         <div className=\"node-children\">\n// // // //           {subDomain.children.map((child) => (\n// // // //             <SubDomainNode\n// // // //               key={child.id}\n// // // //               subDomain={child}\n// // // //               level={level + 1}\n// // // //               isExpanded={expandedNodes.has(child.id)}\n// // // //               onToggleExpanded={onToggleExpanded}\n// // // //               onEdit={onEdit}\n// // // //               onDelete={onDelete}\n// // // //               onAddChild={onAddChild}\n// // // //               expandedNodes={expandedNodes}\n// // // //             />\n// // // //           ))}\n// // // //         </div>\n// // // //       )}\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // // SubDomain Modal Component\n// // // // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// // // //   const [formData, setFormData] = useState({\n// // // //     title: subDomain?.title || '',\n// // // //     description: subDomain?.description || ''\n// // // //   });\n// // // //   const [loading, setLoading] = useState(false);\n\n// // // //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// // // //     isEditing: !!subDomain,\n// // // //     parentTitle: parent?.title,\n// // // //     domainTitle: domain?.title,\n// // // //     formData\n// // // //   });\n\n// // // //   // Generate slug preview\n// // // //   const generateSlug = (title) => {\n// // // //     return title\n// // // //       .toLowerCase()\n// // // //       .replace(/[^a-z0-9]/g, '-')\n// // // //       .replace(/-+/g, '-')\n// // // //       .replace(/^-|-$/g, '');\n// // // //   };\n\n// // // //   const slugPreview = generateSlug(formData.title);\n\n// // // //   const handleSubmit = async (e) => {\n// // // //     e.preventDefault();\n// // // //     setLoading(true);\n\n// // // //     try {\n// // // //       // Generate slug from title\n// // // //       const slug = generateSlug(formData.title);\n\n// // // //       const requestData = {\n// // // //         ...formData,\n// // // //         // slug: slug,\n// // // //         domainId: domain.id,\n// // // //         parentId: parent?.id || null\n// // // //       };\n\n// // // //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// // // //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// // // //       console.log('📋 SUBDOMAIN SAVE - Generated slug:', slug);\n// // // //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// // // //       if (subDomain) {\n// // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// // // //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// // // //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// // // //         toast.success('Sub-domain updated successfully');\n// // // //       } else {\n// // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// // // //         const response = await authService.createSubDomain(requestData);\n// // // //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// // // //         toast.success('Sub-domain created successfully');\n// // // //       }\n\n// // // //       onSave();\n// // // //     } catch (error) {\n// // // //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// // // //       console.error('❌ SUBDOMAIN SAVE - Error response:', error.response);\n// // // //       console.error('❌ SUBDOMAIN SAVE - Error data:', error.response?.data);\n// // // //       toast.error('Failed to save sub-domain');\n// // // //     } finally {\n// // // //       setLoading(false);\n// // // //     }\n// // // //   };\n\n// // // //   const getModalTitle = () => {\n// // // //     if (subDomain) {\n// // // //       return `Edit SubDomain: ${subDomain.title}`;\n// // // //     }\n// // // //     if (parent) {\n// // // //       return `Add SubDomain under: ${parent.title}`;\n// // // //     }\n// // // //     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n// // // //   };\n\n// // // //   const getLevel = () => {\n// // // //     if (!parent) return 'Root Level';\n// // // //     // This is a simplified level calculation\n// // // //     return `Level ${(parent.level || 0) + 1}`;\n// // // //   };\n\n// // // //   return (\n// // // //     <div className=\"modal-overlay\">\n// // // //       <div className=\"modal\">\n// // // //         <div className=\"modal-header\">\n// // // //           <h2>{getModalTitle()}</h2>\n// // // //           <button onClick={onClose}>×</button>\n// // // //         </div>\n        \n// // // //         <form onSubmit={handleSubmit}>\n// // // //           <div className=\"form-group\">\n// // // //             <label>SubDomain Title</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={formData.title}\n// // // //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // // //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// // // //               required\n// // // //             />\n// // // //             {formData.title && (\n// // // //               <div className=\"slug-preview\">\n// // // //                 <small>URL Slug: <code>{slugPreview || 'enter-title-to-see-slug'}</code></small>\n// // // //               </div>\n// // // //             )}\n// // // //           </div>\n          \n// // // //           <div className=\"form-group\">\n// // // //             <label>Description (Optional)</label>\n// // // //             <textarea\n// // // //               value={formData.description}\n// // // //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// // // //               rows={3}\n// // // //               placeholder=\"Describe what this sub-domain covers...\"\n// // // //             />\n// // // //           </div>\n          \n// // // //           <div className=\"modal-info\">\n// // // //             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n// // // //             {parent && (\n// // // //               <>\n// // // //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// // // //               </>\n// // // //             )}\n// // // //             <strong>Level:</strong> {getLevel()}\n// // // //           </div>\n          \n// // // //           <div className=\"modal-actions\">\n// // // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // // //               Cancel\n// // // //             </button>\n// // // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // // //               {loading ? 'Saving...' : 'Save SubDomain'}\n// // // //             </button>\n// // // //           </div>\n// // // //         </form>\n// // // //       </div>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default SubDomainManagement;\n\n\n\n// // // // // // src/components/domains/SubDomainManagement.js - REPLACE THE TEST VERSION\n// // // // // import React, { useState, useEffect } from 'react';\n// // // // // import { useParams, useNavigate } from 'react-router-dom';\n// // // // // import { authService } from '../../services/authService';\n// // // // // import { toast } from 'react-toastify';\n// // // // // import {\n// // // // //   FiPlus,\n// // // // //   FiEdit,\n// // // // //   FiTrash2,\n// // // // //   FiChevronDown,\n// // // // //   FiChevronRight,\n// // // // //   FiFolder,\n// // // // //   FiFolderPlus,\n// // // // //   FiFileText,\n// // // // //   FiArrowLeft,\n// // // // //   FiMoreVertical,\n// // // // //   FiMove,\n// // // // //   FiTarget\n// // // // // } from 'react-icons/fi';\n\n// // // // // const SubDomainManagement = () => {\n// // // // //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n  \n// // // // //   const { domainId } = useParams();\n// // // // //   const navigate = useNavigate();\n  \n// // // // //   const [domain, setDomain] = useState(null);\n// // // // //   const [subDomains, setSubDomains] = useState([]);\n// // // // //   const [loading, setLoading] = useState(true);\n// // // // //   const [showAddModal, setShowAddModal] = useState(false);\n// // // // //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// // // // //   const [selectedParent, setSelectedParent] = useState(null);\n// // // // //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// // // // //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// // // // //     domainId,\n// // // // //     domain: domain?.title,\n// // // // //     subDomainsCount: subDomains.length,\n// // // // //     loading,\n// // // // //     selectedParent: selectedParent?.title,\n// // // // //     expandedCount: expandedNodes.size\n// // // // //   });\n\n// // // // //   useEffect(() => {\n// // // // //     if (domainId) {\n// // // // //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// // // // //       fetchDomainAndSubDomains();\n// // // // //     }\n// // // // //   }, [domainId]);\n\n// // // // //   const fetchDomainAndSubDomains = async () => {\n// // // // //     try {\n// // // // //       setLoading(true);\n      \n// // // // //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// // // // //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n      \n// // // // //       // First, let's try to get domain details\n// // // // //       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains with filter');\n// // // // //       const domainsResponse = await authService.getDomains({ id: domainId });\n// // // // //       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n      \n// // // // //       // Extract domain from response\n// // // // //       let domainData = null;\n// // // // //       if (domainsResponse.data?.domains && domainsResponse.data.domains.length > 0) {\n// // // // //         domainData = domainsResponse.data.domains.find(d => d.id == domainId);\n// // // // //       } else if (domainsResponse.data?.data?.domains && domainsResponse.data.data.domains.length > 0) {\n// // // // //         domainData = domainsResponse.data.data.domains.find(d => d.id == domainId);\n// // // // //       } else if (Array.isArray(domainsResponse.data)) {\n// // // // //         domainData = domainsResponse.data.find(d => d.id == domainId);\n// // // // //       }\n      \n// // // // //       console.log('🎯 SUBDOMAIN FETCH - Extracted domain:', domainData);\n      \n// // // // //       // If we don't have domain data, create a placeholder\n// // // // //       if (!domainData) {\n// // // // //         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n// // // // //         domainData = {\n// // // // //           id: domainId,\n// // // // //           title: `Domain ${domainId}`,\n// // // // //           description: 'Loading domain details...',\n// // // // //           projectCount: 0\n// // // // //         };\n// // // // //       }\n      \n// // // // //       setDomain(domainData);\n      \n// // // // //       // Try to get hierarchy if domain exists\n// // // // //       try {\n// // // // //         console.log('🌐 SUBDOMAIN FETCH - Calling getDomainHierarchy');\n// // // // //         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n// // // // //         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n        \n// // // // //         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n// // // // //         console.log('🎯 SUBDOMAIN FETCH - Extracted hierarchy data:', hierarchyData);\n        \n// // // // //         setSubDomains(hierarchyData?.subDomains || []);\n        \n// // // // //         // Auto-expand first level\n// // // // //         if (hierarchyData?.subDomains?.length > 0) {\n// // // // //           const firstLevelIds = hierarchyData.subDomains.map(sd => sd.id);\n// // // // //           setExpandedNodes(new Set(firstLevelIds));\n// // // // //           console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// // // // //         }\n// // // // //       } catch (hierarchyError) {\n// // // // //         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed, starting with empty structure:', hierarchyError);\n// // // // //         setSubDomains([]);\n// // // // //       }\n      \n// // // // //     } catch (error) {\n// // // // //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// // // // //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// // // // //       toast.error('Failed to fetch domain information');\n      \n// // // // //       // Create fallback domain\n// // // // //       setDomain({\n// // // // //         id: domainId,\n// // // // //         title: `Domain ${domainId}`,\n// // // // //         description: 'Error loading domain details',\n// // // // //         projectCount: 0\n// // // // //       });\n// // // // //       setSubDomains([]);\n// // // // //     } finally {\n// // // // //       setLoading(false);\n// // // // //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// // // // //     }\n// // // // //   };\n\n// // // // //   const handleAddSubDomain = (parent = null) => {\n// // // // //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n    \n// // // // //     setSelectedParent(parent);\n// // // // //     setEditingSubDomain(null);\n// // // // //     setShowAddModal(true);\n    \n// // // // //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// // // // //       showAddModal: true, \n// // // // //       selectedParent: parent?.title,\n// // // // //       editingSubDomain: null \n// // // // //     });\n// // // // //   };\n\n// // // // //   const handleEditSubDomain = (subDomain) => {\n// // // // //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n    \n// // // // //     setSelectedParent(null);\n// // // // //     setEditingSubDomain(subDomain);\n// // // // //     setShowAddModal(true);\n// // // // //   };\n\n// // // // //   const handleDeleteSubDomain = async (subDomain) => {\n// // // // //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // //     const hasProjects = subDomain.projectCount > 0;\n    \n// // // // //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// // // // //     if (hasChildren) {\n// // // // //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// // // // //     }\n// // // // //     if (hasProjects) {\n// // // // //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// // // // //     }\n    \n// // // // //     if (!window.confirm(confirmMessage)) {\n// // // // //       return;\n// // // // //     }\n\n// // // // //     try {\n// // // // //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// // // // //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// // // // //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// // // // //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n      \n// // // // //       const response = await authService.deleteSubDomain(subDomain.id);\n      \n// // // // //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n      \n// // // // //       toast.success('Sub-domain deleted successfully');\n// // // // //       fetchDomainAndSubDomains();\n// // // // //     } catch (error) {\n// // // // //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// // // // //       toast.error('Failed to delete sub-domain');\n// // // // //     }\n// // // // //   };\n\n// // // // //   const toggleExpanded = (nodeId) => {\n// // // // //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n    \n// // // // //     const newExpanded = new Set(expandedNodes);\n// // // // //     if (newExpanded.has(nodeId)) {\n// // // // //       newExpanded.delete(nodeId);\n// // // // //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// // // // //     } else {\n// // // // //       newExpanded.add(nodeId);\n// // // // //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// // // // //     }\n// // // // //     setExpandedNodes(newExpanded);\n// // // // //   };\n\n// // // // //   if (loading) {\n// // // // //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n    \n// // // // //     return (\n// // // // //       <div className=\"loading-container\">\n// // // // //         <div className=\"loading-spinner\"></div>\n// // // // //         <p>Loading sub-domains...</p>\n// // // // //       </div>\n// // // // //     );\n// // // // //   }\n\n// // // // //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// // // // //   return (\n// // // // //     <div className=\"subdomain-management\">\n// // // // //       {/* Header with Breadcrumb */}\n// // // // //       <div className=\"page-header\">\n// // // // //         <div className=\"header-content\">\n// // // // //           <div className=\"breadcrumb\">\n// // // // //             <button \n// // // // //               className=\"breadcrumb-link\"\n// // // // //               onClick={() => navigate('/domains')}\n// // // // //             >\n// // // // //               <FiArrowLeft />\n// // // // //               Domains\n// // // // //             </button>\n// // // // //             <span className=\"breadcrumb-separator\">/</span>\n// // // // //             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n// // // // //           </div>\n// // // // //           <h1>SubDomain Management</h1>\n// // // // //           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n// // // // //         </div>\n// // // // //         <div className=\"header-actions\">\n// // // // //           <button \n// // // // //             className=\"primary-button\" \n// // // // //             onClick={() => handleAddSubDomain()}\n// // // // //           >\n// // // // //             <FiPlus />\n// // // // //             Add Root SubDomain\n// // // // //           </button>\n// // // // //         </div>\n// // // // //       </div>\n\n// // // // //       {/* Quick Guide */}\n// // // // //       <div className=\"quick-guide\">\n// // // // //         <h3>How to Build Your SubDomain Hierarchy:</h3>\n// // // // //         <div className=\"guide-steps\">\n// // // // //           <div className=\"guide-step\">\n// // // // //             <span className=\"step-number\">1</span>\n// // // // //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// // // // //           </div>\n// // // // //           <div className=\"guide-step\">\n// // // // //             <span className=\"step-number\">2</span>\n// // // // //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// // // // //           </div>\n// // // // //           <div className=\"guide-step\">\n// // // // //             <span className=\"step-number\">3</span>\n// // // // //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       </div>\n\n// // // // //       {/* Domain Info Card */}\n// // // // //       {domain && (\n// // // // //         <div className=\"domain-info-card\">\n// // // // //           <div className=\"domain-icon\">\n// // // // //             <FiFolder />\n// // // // //           </div>\n// // // // //           <div className=\"domain-details\">\n// // // // //             <h3>{domain.title}</h3>\n// // // // //             <p>{domain.description}</p>\n// // // // //             <div className=\"domain-stats\">\n// // // // //               <span className=\"stat-item\">\n// // // // //                 <strong>{subDomains.length}</strong> root sub-domains\n// // // // //               </span>\n// // // // //               <span className=\"stat-item\">\n// // // // //                 <strong>{domain.projectCount || 0}</strong> total projects\n// // // // //               </span>\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       )}\n\n// // // // //       {/* SubDomain Tree */}\n// // // // //       <div className=\"subdomain-tree-container\">\n// // // // //         <div className=\"tree-header\">\n// // // // //           <h2>SubDomain Hierarchy</h2>\n// // // // //           <div className=\"tree-legend\">\n// // // // //             <span className=\"legend-item\">\n// // // // //               <FiFolder className=\"folder-icon\" />\n// // // // //               Has children\n// // // // //             </span>\n// // // // //             <span className=\"legend-item\">\n// // // // //               <FiTarget className=\"leaf-icon\" />\n// // // // //               Leaf (can have projects)\n// // // // //             </span>\n// // // // //           </div>\n// // // // //         </div>\n\n// // // // //         {subDomains.length > 0 ? (\n// // // // //           <div className=\"subdomain-tree\">\n// // // // //             {subDomains.map((subDomain) => (\n// // // // //               <SubDomainNode\n// // // // //                 key={subDomain.id}\n// // // // //                 subDomain={subDomain}\n// // // // //                 level={0}\n// // // // //                 isExpanded={expandedNodes.has(subDomain.id)}\n// // // // //                 onToggleExpanded={toggleExpanded}\n// // // // //                 onEdit={handleEditSubDomain}\n// // // // //                 onDelete={handleDeleteSubDomain}\n// // // // //                 onAddChild={handleAddSubDomain}\n// // // // //                 expandedNodes={expandedNodes}\n// // // // //               />\n// // // // //             ))}\n// // // // //           </div>\n// // // // //         ) : (\n// // // // //           <div className=\"empty-tree-state\">\n// // // // //             <FiFolderPlus size={64} />\n// // // // //             <h3>No SubDomains Yet</h3>\n// // // // //             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n// // // // //             <div className=\"empty-state-examples\">\n// // // // //               <h4>Example Structure:</h4>\n// // // // //               <div className=\"example-tree\">\n// // // // //                 <div className=\"example-item\">📂 Machine Learning</div>\n// // // // //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// // // // //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// // // // //                 <div className=\"example-item\">🎯 Data Science</div>\n// // // // //               </div>\n// // // // //             </div>\n// // // // //             <div className=\"empty-state-actions\">\n// // // // //               <button \n// // // // //                 className=\"primary-button large\" \n// // // // //                 onClick={() => handleAddSubDomain()}\n// // // // //               >\n// // // // //                 <FiPlus />\n// // // // //                 Create Your First SubDomain\n// // // // //               </button>\n// // // // //               <p className=\"help-text\">\n// // // // //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// // // // //               </p>\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         )}\n// // // // //       </div>\n\n// // // // //       {/* Add/Edit Modal */}\n// // // // //       {showAddModal && (\n// // // // //         <SubDomainModal\n// // // // //           subDomain={editingSubDomain}\n// // // // //           parent={selectedParent}\n// // // // //           domain={domain}\n// // // // //           onClose={() => {\n// // // // //             setShowAddModal(false);\n// // // // //             setEditingSubDomain(null);\n// // // // //             setSelectedParent(null);\n// // // // //           }}\n// // // // //           onSave={() => {\n// // // // //             setShowAddModal(false);\n// // // // //             setEditingSubDomain(null);\n// // // // //             setSelectedParent(null);\n// // // // //             fetchDomainAndSubDomains();\n// // // // //           }}\n// // // // //         />\n// // // // //       )}\n// // // // //     </div>\n// // // // //   );\n// // // // // };\n\n// // // // // // SubDomain Node Component\n// // // // // const SubDomainNode = ({ \n// // // // //   subDomain, \n// // // // //   level, \n// // // // //   isExpanded, \n// // // // //   onToggleExpanded, \n// // // // //   onEdit, \n// // // // //   onDelete, \n// // // // //   onAddChild,\n// // // // //   expandedNodes \n// // // // // }) => {\n// // // // //   const [showMenu, setShowMenu] = useState(false);\n// // // // //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // //   const isLeaf = !hasChildren;\n\n// // // // //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// // // // //     title: subDomain.title,\n// // // // //     level,\n// // // // //     hasChildren,\n// // // // //     isLeaf,\n// // // // //     isExpanded,\n// // // // //     projectCount: subDomain.projectCount\n// // // // //   });\n\n// // // // //   return (\n// // // // //     <div className={`subdomain-node level-${level}`}>\n// // // // //       <div className=\"node-content\">\n// // // // //         <div className=\"node-main\">\n// // // // //           {hasChildren ? (\n// // // // //             <button \n// // // // //               className=\"expand-button\"\n// // // // //               onClick={() => onToggleExpanded(subDomain.id)}\n// // // // //             >\n// // // // //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// // // // //             </button>\n// // // // //           ) : (\n// // // // //             <div className=\"expand-placeholder\" />\n// // // // //           )}\n          \n// // // // //           <div className=\"node-icon\">\n// // // // //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// // // // //           </div>\n          \n// // // // //           <div className=\"node-info\">\n// // // // //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// // // // //             <p className=\"node-description\">{subDomain.description}</p>\n// // // // //             <div className=\"node-stats\">\n// // // // //               {hasChildren && (\n// // // // //                 <span className=\"stat-badge\">\n// // // // //                   {subDomain.children.length} sub-domains\n// // // // //                 </span>\n// // // // //               )}\n// // // // //               {subDomain.projectCount > 0 && (\n// // // // //                 <span className=\"stat-badge projects\">\n// // // // //                   {subDomain.projectCount} projects\n// // // // //                 </span>\n// // // // //               )}\n// // // // //               {isLeaf && (\n// // // // //                 <span className=\"stat-badge leaf\">\n// // // // //                   Can have projects\n// // // // //                 </span>\n// // // // //               )}\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         </div>\n        \n// // // // //         <div className=\"node-actions\">\n// // // // //           <button \n// // // // //             className=\"action-button add\" \n// // // // //             onClick={() => onAddChild(subDomain)}\n// // // // //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// // // // //           >\n// // // // //             <FiPlus />\n// // // // //           </button>\n// // // // //           <div className=\"action-menu\">\n// // // // //             <button \n// // // // //               onClick={() => setShowMenu(!showMenu)}\n// // // // //               title=\"More actions\"\n// // // // //             >\n// // // // //               <FiMoreVertical />\n// // // // //             </button>\n// // // // //             {showMenu && (\n// // // // //               <div className=\"dropdown-menu\">\n// // // // //                 <button onClick={() => {\n// // // // //                   onEdit(subDomain);\n// // // // //                   setShowMenu(false);\n// // // // //                 }}>\n// // // // //                   <FiEdit /> Edit\n// // // // //                 </button>\n// // // // //                 <button onClick={() => {\n// // // // //                   onAddChild(subDomain);\n// // // // //                   setShowMenu(false);\n// // // // //                 }}>\n// // // // //                   <FiPlus /> Add Child SubDomain\n// // // // //                 </button>\n// // // // //                 <button onClick={() => {\n// // // // //                   onDelete(subDomain);\n// // // // //                   setShowMenu(false);\n// // // // //                 }} className=\"danger\">\n// // // // //                   <FiTrash2 /> Delete\n// // // // //                 </button>\n// // // // //               </div>\n// // // // //             )}\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       </div>\n      \n// // // // //       {/* Children */}\n// // // // //       {hasChildren && isExpanded && (\n// // // // //         <div className=\"node-children\">\n// // // // //           {subDomain.children.map((child) => (\n// // // // //             <SubDomainNode\n// // // // //               key={child.id}\n// // // // //               subDomain={child}\n// // // // //               level={level + 1}\n// // // // //               isExpanded={expandedNodes.has(child.id)}\n// // // // //               onToggleExpanded={onToggleExpanded}\n// // // // //               onEdit={onEdit}\n// // // // //               onDelete={onDelete}\n// // // // //               onAddChild={onAddChild}\n// // // // //               expandedNodes={expandedNodes}\n// // // // //             />\n// // // // //           ))}\n// // // // //         </div>\n// // // // //       )}\n// // // // //     </div>\n// // // // //   );\n// // // // // };\n\n// // // // // // SubDomain Modal Component\n// // // // // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// // // // //   const [formData, setFormData] = useState({\n// // // // //     title: subDomain?.title || '',\n// // // // //     description: subDomain?.description || ''\n// // // // //   });\n// // // // //   const [loading, setLoading] = useState(false);\n\n// // // // //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// // // // //     isEditing: !!subDomain,\n// // // // //     parentTitle: parent?.title,\n// // // // //     domainTitle: domain?.title,\n// // // // //     formData\n// // // // //   });\n\n// // // // //   // Generate slug preview\n// // // // //   const generateSlug = (title) => {\n// // // // //     return title\n// // // // //       .toLowerCase()\n// // // // //       .replace(/[^a-z0-9]/g, '-')\n// // // // //       .replace(/-+/g, '-')\n// // // // //       .replace(/^-|-$/g, '');\n// // // // //   };\n\n// // // // //   const slugPreview = generateSlug(formData.title);\n\n// // // // //   const handleSubmit = async (e) => {\n// // // // //     e.preventDefault();\n// // // // //     setLoading(true);\n\n// // // // //     try {\n// // // // //       // Generate slug from title\n// // // // //       const slug = generateSlug(formData.title);\n\n// // // // //       const requestData = {\n// // // // //         ...formData,\n// // // // //         slug: slug,\n// // // // //         domainId: domain.id,\n// // // // //         parentId: parent?.id || null\n// // // // //       };\n\n// // // // //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// // // // //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// // // // //       console.log('📋 SUBDOMAIN SAVE - Generated slug:', slug);\n// // // // //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// // // // //       if (subDomain) {\n// // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// // // // //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// // // // //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// // // // //         toast.success('Sub-domain updated successfully');\n// // // // //       } else {\n// // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// // // // //         const response = await authService.createSubDomain(requestData);\n// // // // //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// // // // //         toast.success('Sub-domain created successfully');\n// // // // //       }\n\n// // // // //       onSave();\n// // // // //     } catch (error) {\n// // // // //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// // // // //       console.error('❌ SUBDOMAIN SAVE - Error response:', error.response);\n// // // // //       console.error('❌ SUBDOMAIN SAVE - Error data:', error.response?.data);\n// // // // //       toast.error('Failed to save sub-domain');\n// // // // //     } finally {\n// // // // //       setLoading(false);\n// // // // //     }\n// // // // //   };\n\n// // // // //   const getModalTitle = () => {\n// // // // //     if (subDomain) {\n// // // // //       return `Edit SubDomain: ${subDomain.title}`;\n// // // // //     }\n// // // // //     if (parent) {\n// // // // //       return `Add SubDomain under: ${parent.title}`;\n// // // // //     }\n// // // // //     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n// // // // //   };\n\n// // // // //   const getLevel = () => {\n// // // // //     if (!parent) return 'Root Level';\n// // // // //     // This is a simplified level calculation\n// // // // //     return `Level ${(parent.level || 0) + 1}`;\n// // // // //   };\n\n// // // // //   return (\n// // // // //     <div className=\"modal-overlay\">\n// // // // //       <div className=\"modal\">\n// // // // //         <div className=\"modal-header\">\n// // // // //           <h2>{getModalTitle()}</h2>\n// // // // //           <button onClick={onClose}>×</button>\n// // // // //         </div>\n        \n// // // // //         <form onSubmit={handleSubmit}>\n// // // // //           <div className=\"form-group\">\n// // // // //             <label>SubDomain Title</label>\n// // // // //             <input\n// // // // //               type=\"text\"\n// // // // //               value={formData.title}\n// // // // //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // // // //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// // // // //               required\n// // // // //             />\n// // // // //             {formData.title && (\n// // // // //               <div className=\"slug-preview\">\n// // // // //                 <small>URL Slug: <code>{slugPreview || 'enter-title-to-see-slug'}</code></small>\n// // // // //               </div>\n// // // // //             )}\n// // // // //           </div>\n          \n// // // // //           <div className=\"form-group\">\n// // // // //             <label>Description (Optional)</label>\n// // // // //             <textarea\n// // // // //               value={formData.description}\n// // // // //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// // // // //               rows={3}\n// // // // //               placeholder=\"Describe what this sub-domain covers...\"\n// // // // //             />\n// // // // //           </div>\n          \n// // // // //           <div className=\"modal-info\">\n// // // // //             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n// // // // //             {parent && (\n// // // // //               <>\n// // // // //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// // // // //               </>\n// // // // //             )}\n// // // // //             <strong>Level:</strong> {getLevel()}\n// // // // //           </div>\n          \n// // // // //           <div className=\"modal-actions\">\n// // // // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // // // //               Cancel\n// // // // //             </button>\n// // // // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // // // //               {loading ? 'Saving...' : 'Save SubDomain'}\n// // // // //             </button>\n// // // // //           </div>\n// // // // //         </form>\n// // // // //       </div>\n// // // // //     </div>\n// // // // //   );\n// // // // // };\n\n// // // // // export default SubDomainManagement;\n\n\n// // // // // // // src/components/domains/SubDomainManagement.js - REPLACE THE TEST VERSION\n// // // // // // import React, { useState, useEffect } from 'react';\n// // // // // // import { useParams, useNavigate } from 'react-router-dom';\n// // // // // // import { authService } from '../../services/authService';\n// // // // // // import { toast } from 'react-toastify';\n// // // // // // import {\n// // // // // //   FiPlus,\n// // // // // //   FiEdit,\n// // // // // //   FiTrash2,\n// // // // // //   FiChevronDown,\n// // // // // //   FiChevronRight,\n// // // // // //   FiFolder,\n// // // // // //   FiFolderPlus,\n// // // // // //   FiFileText,\n// // // // // //   FiArrowLeft,\n// // // // // //   FiMoreVertical,\n// // // // // //   FiMove,\n// // // // // //   FiTarget\n// // // // // // } from 'react-icons/fi';\n\n// // // // // // const SubDomainManagement = () => {\n// // // // // //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n  \n// // // // // //   const { domainId } = useParams();\n// // // // // //   const navigate = useNavigate();\n  \n// // // // // //   const [domain, setDomain] = useState(null);\n// // // // // //   const [subDomains, setSubDomains] = useState([]);\n// // // // // //   const [loading, setLoading] = useState(true);\n// // // // // //   const [showAddModal, setShowAddModal] = useState(false);\n// // // // // //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// // // // // //   const [selectedParent, setSelectedParent] = useState(null);\n// // // // // //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// // // // // //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// // // // // //     domainId,\n// // // // // //     domain: domain?.title,\n// // // // // //     subDomainsCount: subDomains.length,\n// // // // // //     loading,\n// // // // // //     selectedParent: selectedParent?.title,\n// // // // // //     expandedCount: expandedNodes.size\n// // // // // //   });\n\n// // // // // //   useEffect(() => {\n// // // // // //     if (domainId) {\n// // // // // //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// // // // // //       fetchDomainAndSubDomains();\n// // // // // //     }\n// // // // // //   }, [domainId]);\n\n// // // // // //   const fetchDomainAndSubDomains = async () => {\n// // // // // //     try {\n// // // // // //       setLoading(true);\n      \n// // // // // //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// // // // // //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n      \n// // // // // //       // First, let's try to get domain details\n// // // // // //       console.log('🌐 SUBDOMAIN FETCH - Calling getDomains with filter');\n// // // // // //       const domainsResponse = await authService.getDomains({ id: domainId });\n// // // // // //       console.log('✅ SUBDOMAIN FETCH - Domains response:', domainsResponse.data);\n      \n// // // // // //       // Extract domain from response\n// // // // // //       let domainData = null;\n// // // // // //       if (domainsResponse.data?.domains && domainsResponse.data.domains.length > 0) {\n// // // // // //         domainData = domainsResponse.data.domains.find(d => d.id == domainId);\n// // // // // //       } else if (domainsResponse.data?.data?.domains && domainsResponse.data.data.domains.length > 0) {\n// // // // // //         domainData = domainsResponse.data.data.domains.find(d => d.id == domainId);\n// // // // // //       } else if (Array.isArray(domainsResponse.data)) {\n// // // // // //         domainData = domainsResponse.data.find(d => d.id == domainId);\n// // // // // //       }\n      \n// // // // // //       console.log('🎯 SUBDOMAIN FETCH - Extracted domain:', domainData);\n      \n// // // // // //       // If we don't have domain data, create a placeholder\n// // // // // //       if (!domainData) {\n// // // // // //         console.log('⚠️ SUBDOMAIN FETCH - No domain found, creating placeholder');\n// // // // // //         domainData = {\n// // // // // //           id: domainId,\n// // // // // //           title: `Domain ${domainId}`,\n// // // // // //           description: 'Loading domain details...',\n// // // // // //           projectCount: 0\n// // // // // //         };\n// // // // // //       }\n      \n// // // // // //       setDomain(domainData);\n      \n// // // // // //       // Try to get hierarchy if domain exists\n// // // // // //       try {\n// // // // // //         console.log('🌐 SUBDOMAIN FETCH - Calling getDomainHierarchy');\n// // // // // //         const hierarchyResponse = await authService.getDomainHierarchy(domainId);\n// // // // // //         console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n        \n// // // // // //         const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n// // // // // //         console.log('🎯 SUBDOMAIN FETCH - Extracted hierarchy data:', hierarchyData);\n        \n// // // // // //         setSubDomains(hierarchyData?.subDomains || []);\n        \n// // // // // //         // Auto-expand first level\n// // // // // //         if (hierarchyData?.subDomains?.length > 0) {\n// // // // // //           const firstLevelIds = hierarchyData.subDomains.map(sd => sd.id);\n// // // // // //           setExpandedNodes(new Set(firstLevelIds));\n// // // // // //           console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// // // // // //         }\n// // // // // //       } catch (hierarchyError) {\n// // // // // //         console.log('⚠️ SUBDOMAIN FETCH - Hierarchy fetch failed, starting with empty structure:', hierarchyError);\n// // // // // //         setSubDomains([]);\n// // // // // //       }\n      \n// // // // // //     } catch (error) {\n// // // // // //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// // // // // //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// // // // // //       toast.error('Failed to fetch domain information');\n      \n// // // // // //       // Create fallback domain\n// // // // // //       setDomain({\n// // // // // //         id: domainId,\n// // // // // //         title: `Domain ${domainId}`,\n// // // // // //         description: 'Error loading domain details',\n// // // // // //         projectCount: 0\n// // // // // //       });\n// // // // // //       setSubDomains([]);\n// // // // // //     } finally {\n// // // // // //       setLoading(false);\n// // // // // //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const handleAddSubDomain = (parent = null) => {\n// // // // // //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// // // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n    \n// // // // // //     setSelectedParent(parent);\n// // // // // //     setEditingSubDomain(null);\n// // // // // //     setShowAddModal(true);\n    \n// // // // // //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// // // // // //       showAddModal: true, \n// // // // // //       selectedParent: parent?.title,\n// // // // // //       editingSubDomain: null \n// // // // // //     });\n// // // // // //   };\n\n// // // // // //   const handleEditSubDomain = (subDomain) => {\n// // // // // //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// // // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n    \n// // // // // //     setSelectedParent(null);\n// // // // // //     setEditingSubDomain(subDomain);\n// // // // // //     setShowAddModal(true);\n// // // // // //   };\n\n// // // // // //   const handleDeleteSubDomain = async (subDomain) => {\n// // // // // //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // // //     const hasProjects = subDomain.projectCount > 0;\n    \n// // // // // //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// // // // // //     if (hasChildren) {\n// // // // // //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// // // // // //     }\n// // // // // //     if (hasProjects) {\n// // // // // //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// // // // // //     }\n    \n// // // // // //     if (!window.confirm(confirmMessage)) {\n// // // // // //       return;\n// // // // // //     }\n\n// // // // // //     try {\n// // // // // //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// // // // // //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// // // // // //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// // // // // //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n      \n// // // // // //       const response = await authService.deleteSubDomain(subDomain.id);\n      \n// // // // // //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n      \n// // // // // //       toast.success('Sub-domain deleted successfully');\n// // // // // //       fetchDomainAndSubDomains();\n// // // // // //     } catch (error) {\n// // // // // //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// // // // // //       toast.error('Failed to delete sub-domain');\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const toggleExpanded = (nodeId) => {\n// // // // // //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n    \n// // // // // //     const newExpanded = new Set(expandedNodes);\n// // // // // //     if (newExpanded.has(nodeId)) {\n// // // // // //       newExpanded.delete(nodeId);\n// // // // // //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// // // // // //     } else {\n// // // // // //       newExpanded.add(nodeId);\n// // // // // //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// // // // // //     }\n// // // // // //     setExpandedNodes(newExpanded);\n// // // // // //   };\n\n// // // // // //   if (loading) {\n// // // // // //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n    \n// // // // // //     return (\n// // // // // //       <div className=\"loading-container\">\n// // // // // //         <div className=\"loading-spinner\"></div>\n// // // // // //         <p>Loading sub-domains...</p>\n// // // // // //       </div>\n// // // // // //     );\n// // // // // //   }\n\n// // // // // //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// // // // // //   return (\n// // // // // //     <div className=\"subdomain-management\">\n// // // // // //       {/* Header with Breadcrumb */}\n// // // // // //       <div className=\"page-header\">\n// // // // // //         <div className=\"header-content\">\n// // // // // //           <div className=\"breadcrumb\">\n// // // // // //             <button \n// // // // // //               className=\"breadcrumb-link\"\n// // // // // //               onClick={() => navigate('/domains')}\n// // // // // //             >\n// // // // // //               <FiArrowLeft />\n// // // // // //               Domains\n// // // // // //             </button>\n// // // // // //             <span className=\"breadcrumb-separator\">/</span>\n// // // // // //             <span className=\"breadcrumb-current\">{domain?.title || 'Loading...'}</span>\n// // // // // //           </div>\n// // // // // //           <h1>SubDomain Management</h1>\n// // // // // //           <p>Manage the hierarchical structure of {domain?.title || 'this domain'}</p>\n// // // // // //         </div>\n// // // // // //         <div className=\"header-actions\">\n// // // // // //           <button \n// // // // // //             className=\"primary-button\" \n// // // // // //             onClick={() => handleAddSubDomain()}\n// // // // // //           >\n// // // // // //             <FiPlus />\n// // // // // //             Add Root SubDomain\n// // // // // //           </button>\n// // // // // //         </div>\n// // // // // //       </div>\n\n// // // // // //       {/* Quick Guide */}\n// // // // // //       <div className=\"quick-guide\">\n// // // // // //         <h3>How to Build Your SubDomain Hierarchy:</h3>\n// // // // // //         <div className=\"guide-steps\">\n// // // // // //           <div className=\"guide-step\">\n// // // // // //             <span className=\"step-number\">1</span>\n// // // // // //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// // // // // //           </div>\n// // // // // //           <div className=\"guide-step\">\n// // // // // //             <span className=\"step-number\">2</span>\n// // // // // //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// // // // // //           </div>\n// // // // // //           <div className=\"guide-step\">\n// // // // // //             <span className=\"step-number\">3</span>\n// // // // // //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       </div>\n\n// // // // // //       {/* Domain Info Card */}\n// // // // // //       {domain && (\n// // // // // //         <div className=\"domain-info-card\">\n// // // // // //           <div className=\"domain-icon\">\n// // // // // //             <FiFolder />\n// // // // // //           </div>\n// // // // // //           <div className=\"domain-details\">\n// // // // // //             <h3>{domain.title}</h3>\n// // // // // //             <p>{domain.description}</p>\n// // // // // //             <div className=\"domain-stats\">\n// // // // // //               <span className=\"stat-item\">\n// // // // // //                 <strong>{subDomains.length}</strong> root sub-domains\n// // // // // //               </span>\n// // // // // //               <span className=\"stat-item\">\n// // // // // //                 <strong>{domain.projectCount || 0}</strong> total projects\n// // // // // //               </span>\n// // // // // //             </div>\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       )}\n\n// // // // // //       {/* SubDomain Tree */}\n// // // // // //       <div className=\"subdomain-tree-container\">\n// // // // // //         <div className=\"tree-header\">\n// // // // // //           <h2>SubDomain Hierarchy</h2>\n// // // // // //           <div className=\"tree-legend\">\n// // // // // //             <span className=\"legend-item\">\n// // // // // //               <FiFolder className=\"folder-icon\" />\n// // // // // //               Has children\n// // // // // //             </span>\n// // // // // //             <span className=\"legend-item\">\n// // // // // //               <FiTarget className=\"leaf-icon\" />\n// // // // // //               Leaf (can have projects)\n// // // // // //             </span>\n// // // // // //           </div>\n// // // // // //         </div>\n\n// // // // // //         {subDomains.length > 0 ? (\n// // // // // //           <div className=\"subdomain-tree\">\n// // // // // //             {subDomains.map((subDomain) => (\n// // // // // //               <SubDomainNode\n// // // // // //                 key={subDomain.id}\n// // // // // //                 subDomain={subDomain}\n// // // // // //                 level={0}\n// // // // // //                 isExpanded={expandedNodes.has(subDomain.id)}\n// // // // // //                 onToggleExpanded={toggleExpanded}\n// // // // // //                 onEdit={handleEditSubDomain}\n// // // // // //                 onDelete={handleDeleteSubDomain}\n// // // // // //                 onAddChild={handleAddSubDomain}\n// // // // // //                 expandedNodes={expandedNodes}\n// // // // // //               />\n// // // // // //             ))}\n// // // // // //           </div>\n// // // // // //         ) : (\n// // // // // //           <div className=\"empty-tree-state\">\n// // // // // //             <FiFolderPlus size={64} />\n// // // // // //             <h3>No SubDomains Yet</h3>\n// // // // // //             <p>Start organizing your {domain?.title || 'domain'} projects by creating subdomains</p>\n// // // // // //             <div className=\"empty-state-examples\">\n// // // // // //               <h4>Example Structure:</h4>\n// // // // // //               <div className=\"example-tree\">\n// // // // // //                 <div className=\"example-item\">📂 Machine Learning</div>\n// // // // // //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// // // // // //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// // // // // //                 <div className=\"example-item\">🎯 Data Science</div>\n// // // // // //               </div>\n// // // // // //             </div>\n// // // // // //             <div className=\"empty-state-actions\">\n// // // // // //               <button \n// // // // // //                 className=\"primary-button large\" \n// // // // // //                 onClick={() => handleAddSubDomain()}\n// // // // // //               >\n// // // // // //                 <FiPlus />\n// // // // // //                 Create Your First SubDomain\n// // // // // //               </button>\n// // // // // //               <p className=\"help-text\">\n// // // // // //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// // // // // //               </p>\n// // // // // //             </div>\n// // // // // //           </div>\n// // // // // //         )}\n// // // // // //       </div>\n\n// // // // // //       {/* Add/Edit Modal */}\n// // // // // //       {showAddModal && (\n// // // // // //         <SubDomainModal\n// // // // // //           subDomain={editingSubDomain}\n// // // // // //           parent={selectedParent}\n// // // // // //           domain={domain}\n// // // // // //           onClose={() => {\n// // // // // //             setShowAddModal(false);\n// // // // // //             setEditingSubDomain(null);\n// // // // // //             setSelectedParent(null);\n// // // // // //           }}\n// // // // // //           onSave={() => {\n// // // // // //             setShowAddModal(false);\n// // // // // //             setEditingSubDomain(null);\n// // // // // //             setSelectedParent(null);\n// // // // // //             fetchDomainAndSubDomains();\n// // // // // //           }}\n// // // // // //         />\n// // // // // //       )}\n// // // // // //     </div>\n// // // // // //   );\n// // // // // // };\n\n// // // // // // // SubDomain Node Component\n// // // // // // const SubDomainNode = ({ \n// // // // // //   subDomain, \n// // // // // //   level, \n// // // // // //   isExpanded, \n// // // // // //   onToggleExpanded, \n// // // // // //   onEdit, \n// // // // // //   onDelete, \n// // // // // //   onAddChild,\n// // // // // //   expandedNodes \n// // // // // // }) => {\n// // // // // //   const [showMenu, setShowMenu] = useState(false);\n// // // // // //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // // //   const isLeaf = !hasChildren;\n\n// // // // // //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// // // // // //     title: subDomain.title,\n// // // // // //     level,\n// // // // // //     hasChildren,\n// // // // // //     isLeaf,\n// // // // // //     isExpanded,\n// // // // // //     projectCount: subDomain.projectCount\n// // // // // //   });\n\n// // // // // //   return (\n// // // // // //     <div className={`subdomain-node level-${level}`}>\n// // // // // //       <div className=\"node-content\">\n// // // // // //         <div className=\"node-main\">\n// // // // // //           {hasChildren ? (\n// // // // // //             <button \n// // // // // //               className=\"expand-button\"\n// // // // // //               onClick={() => onToggleExpanded(subDomain.id)}\n// // // // // //             >\n// // // // // //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// // // // // //             </button>\n// // // // // //           ) : (\n// // // // // //             <div className=\"expand-placeholder\" />\n// // // // // //           )}\n          \n// // // // // //           <div className=\"node-icon\">\n// // // // // //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// // // // // //           </div>\n          \n// // // // // //           <div className=\"node-info\">\n// // // // // //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// // // // // //             <p className=\"node-description\">{subDomain.description}</p>\n// // // // // //             <div className=\"node-stats\">\n// // // // // //               {hasChildren && (\n// // // // // //                 <span className=\"stat-badge\">\n// // // // // //                   {subDomain.children.length} sub-domains\n// // // // // //                 </span>\n// // // // // //               )}\n// // // // // //               {subDomain.projectCount > 0 && (\n// // // // // //                 <span className=\"stat-badge projects\">\n// // // // // //                   {subDomain.projectCount} projects\n// // // // // //                 </span>\n// // // // // //               )}\n// // // // // //               {isLeaf && (\n// // // // // //                 <span className=\"stat-badge leaf\">\n// // // // // //                   Can have projects\n// // // // // //                 </span>\n// // // // // //               )}\n// // // // // //             </div>\n// // // // // //           </div>\n// // // // // //         </div>\n        \n// // // // // //         <div className=\"node-actions\">\n// // // // // //           <button \n// // // // // //             className=\"action-button add\" \n// // // // // //             onClick={() => onAddChild(subDomain)}\n// // // // // //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// // // // // //           >\n// // // // // //             <FiPlus />\n// // // // // //           </button>\n// // // // // //           <div className=\"action-menu\">\n// // // // // //             <button \n// // // // // //               onClick={() => setShowMenu(!showMenu)}\n// // // // // //               title=\"More actions\"\n// // // // // //             >\n// // // // // //               <FiMoreVertical />\n// // // // // //             </button>\n// // // // // //             {showMenu && (\n// // // // // //               <div className=\"dropdown-menu\">\n// // // // // //                 <button onClick={() => {\n// // // // // //                   onEdit(subDomain);\n// // // // // //                   setShowMenu(false);\n// // // // // //                 }}>\n// // // // // //                   <FiEdit /> Edit\n// // // // // //                 </button>\n// // // // // //                 <button onClick={() => {\n// // // // // //                   onAddChild(subDomain);\n// // // // // //                   setShowMenu(false);\n// // // // // //                 }}>\n// // // // // //                   <FiPlus /> Add Child SubDomain\n// // // // // //                 </button>\n// // // // // //                 <button onClick={() => {\n// // // // // //                   onDelete(subDomain);\n// // // // // //                   setShowMenu(false);\n// // // // // //                 }} className=\"danger\">\n// // // // // //                   <FiTrash2 /> Delete\n// // // // // //                 </button>\n// // // // // //               </div>\n// // // // // //             )}\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       </div>\n      \n// // // // // //       {/* Children */}\n// // // // // //       {hasChildren && isExpanded && (\n// // // // // //         <div className=\"node-children\">\n// // // // // //           {subDomain.children.map((child) => (\n// // // // // //             <SubDomainNode\n// // // // // //               key={child.id}\n// // // // // //               subDomain={child}\n// // // // // //               level={level + 1}\n// // // // // //               isExpanded={expandedNodes.has(child.id)}\n// // // // // //               onToggleExpanded={onToggleExpanded}\n// // // // // //               onEdit={onEdit}\n// // // // // //               onDelete={onDelete}\n// // // // // //               onAddChild={onAddChild}\n// // // // // //               expandedNodes={expandedNodes}\n// // // // // //             />\n// // // // // //           ))}\n// // // // // //         </div>\n// // // // // //       )}\n// // // // // //     </div>\n// // // // // //   );\n// // // // // // };\n\n// // // // // // // SubDomain Modal Component\n// // // // // // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// // // // // //   const [formData, setFormData] = useState({\n// // // // // //     title: subDomain?.title || '',\n// // // // // //     description: subDomain?.description || ''\n// // // // // //   });\n// // // // // //   const [loading, setLoading] = useState(false);\n\n// // // // // //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// // // // // //     isEditing: !!subDomain,\n// // // // // //     parentTitle: parent?.title,\n// // // // // //     domainTitle: domain?.title,\n// // // // // //     formData\n// // // // // //   });\n\n// // // // // //   const handleSubmit = async (e) => {\n// // // // // //     e.preventDefault();\n// // // // // //     setLoading(true);\n\n// // // // // //     try {\n// // // // // //       const requestData = {\n// // // // // //         ...formData,\n// // // // // //         domainId: domain.id,\n// // // // // //         parentId: parent?.id || null\n// // // // // //       };\n\n// // // // // //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// // // // // //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// // // // // //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// // // // // //       if (subDomain) {\n// // // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// // // // // //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// // // // // //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// // // // // //         toast.success('Sub-domain updated successfully');\n// // // // // //       } else {\n// // // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// // // // // //         const response = await authService.createSubDomain(requestData);\n// // // // // //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// // // // // //         toast.success('Sub-domain created successfully');\n// // // // // //       }\n\n// // // // // //       onSave();\n// // // // // //     } catch (error) {\n// // // // // //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// // // // // //       toast.error('Failed to save sub-domain');\n// // // // // //     } finally {\n// // // // // //       setLoading(false);\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const getModalTitle = () => {\n// // // // // //     if (subDomain) {\n// // // // // //       return `Edit SubDomain: ${subDomain.title}`;\n// // // // // //     }\n// // // // // //     if (parent) {\n// // // // // //       return `Add SubDomain under: ${parent.title}`;\n// // // // // //     }\n// // // // // //     return `Add Root SubDomain in: ${domain?.title || 'Domain'}`;\n// // // // // //   };\n\n// // // // // //   const getLevel = () => {\n// // // // // //     if (!parent) return 'Root Level';\n// // // // // //     // This is a simplified level calculation\n// // // // // //     return `Level ${(parent.level || 0) + 1}`;\n// // // // // //   };\n\n// // // // // //   return (\n// // // // // //     <div className=\"modal-overlay\">\n// // // // // //       <div className=\"modal\">\n// // // // // //         <div className=\"modal-header\">\n// // // // // //           <h2>{getModalTitle()}</h2>\n// // // // // //           <button onClick={onClose}>×</button>\n// // // // // //         </div>\n        \n// // // // // //         <form onSubmit={handleSubmit}>\n// // // // // //           <div className=\"form-group\">\n// // // // // //             <label>SubDomain Title</label>\n// // // // // //             <input\n// // // // // //               type=\"text\"\n// // // // // //               value={formData.title}\n// // // // // //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // // // // //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// // // // // //               required\n// // // // // //             />\n// // // // // //           </div>\n          \n// // // // // //           <div className=\"form-group\">\n// // // // // //             <label>Description (Optional)</label>\n// // // // // //             <textarea\n// // // // // //               value={formData.description}\n// // // // // //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// // // // // //               rows={3}\n// // // // // //               placeholder=\"Describe what this sub-domain covers...\"\n// // // // // //             />\n// // // // // //           </div>\n          \n// // // // // //           <div className=\"modal-info\">\n// // // // // //             <strong>Domain:</strong> {domain?.title || 'Unknown'}<br />\n// // // // // //             {parent && (\n// // // // // //               <>\n// // // // // //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// // // // // //               </>\n// // // // // //             )}\n// // // // // //             <strong>Level:</strong> {getLevel()}\n// // // // // //           </div>\n          \n// // // // // //           <div className=\"modal-actions\">\n// // // // // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // // // // //               Cancel\n// // // // // //             </button>\n// // // // // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // // // // //               {loading ? 'Saving...' : 'Save SubDomain'}\n// // // // // //             </button>\n// // // // // //           </div>\n// // // // // //         </form>\n// // // // // //       </div>\n// // // // // //     </div>\n// // // // // //   );\n// // // // // // };\n\n// // // // // // export default SubDomainManagement;\n\n\n// // // // // // // // src/components/domains/SubDomainManagement.js - NEW FILE\n// // // // // // // import React, { useState, useEffect } from 'react';\n// // // // // // // import { useParams, useNavigate } from 'react-router-dom';\n// // // // // // // import { authService } from '../../services/authService';\n// // // // // // // import { toast } from 'react-toastify';\n// // // // // // // import {\n// // // // // // //   FiPlus,\n// // // // // // //   FiEdit,\n// // // // // // //   FiTrash2,\n// // // // // // //   FiChevronDown,\n// // // // // // //   FiChevronRight,\n// // // // // // //   FiFolder,\n// // // // // // //   FiFolderPlus,\n// // // // // // //   FiFileText,\n// // // // // // //   FiArrowLeft,\n// // // // // // //   FiMoreVertical,\n// // // // // // //   FiMove,\n// // // // // // //   FiTarget\n// // // // // // // } from 'react-icons/fi';\n\n// // // // // // // const SubDomainManagement = () => {\n// // // // // // //   console.log('🚀 SUBDOMAIN MANAGEMENT - Component mounting');\n  \n// // // // // // //   const { domainId } = useParams();\n// // // // // // //   const navigate = useNavigate();\n  \n// // // // // // //   const [domain, setDomain] = useState(null);\n// // // // // // //   const [subDomains, setSubDomains] = useState([]);\n// // // // // // //   const [loading, setLoading] = useState(true);\n// // // // // // //   const [showAddModal, setShowAddModal] = useState(false);\n// // // // // // //   const [editingSubDomain, setEditingSubDomain] = useState(null);\n// // // // // // //   const [selectedParent, setSelectedParent] = useState(null);\n// // // // // // //   const [expandedNodes, setExpandedNodes] = useState(new Set());\n\n// // // // // // //   console.log('📊 SUBDOMAIN MANAGEMENT - Current state:', {\n// // // // // // //     domainId,\n// // // // // // //     domain: domain?.title,\n// // // // // // //     subDomainsCount: subDomains.length,\n// // // // // // //     loading,\n// // // // // // //     selectedParent: selectedParent?.title,\n// // // // // // //     expandedCount: expandedNodes.size\n// // // // // // //   });\n\n// // // // // // //   useEffect(() => {\n// // // // // // //     if (domainId) {\n// // // // // // //       console.log('🔄 SUBDOMAIN MANAGEMENT - useEffect triggered, fetching data');\n// // // // // // //       fetchDomainAndSubDomains();\n// // // // // // //     }\n// // // // // // //   }, [domainId]);\n\n// // // // // // //   const fetchDomainAndSubDomains = async () => {\n// // // // // // //     try {\n// // // // // // //       setLoading(true);\n      \n// // // // // // //       console.log('🔍 SUBDOMAIN FETCH - Starting API calls');\n// // // // // // //       console.log('📋 SUBDOMAIN FETCH - Domain ID:', domainId);\n      \n// // // // // // //       // Fetch domain details and hierarchy\n// // // // // // //       const [domainResponse, hierarchyResponse] = await Promise.all([\n// // // // // // //         authService.getDomains({ id: domainId }),\n// // // // // // //         authService.getDomainHierarchy(domainId)\n// // // // // // //       ]);\n      \n// // // // // // //       console.log('✅ SUBDOMAIN FETCH - Domain response:', domainResponse.data);\n// // // // // // //       console.log('✅ SUBDOMAIN FETCH - Hierarchy response:', hierarchyResponse.data);\n      \n// // // // // // //       const domainData = domainResponse.data?.domains?.[0] || \n// // // // // // //                         domainResponse.data?.data?.domains?.[0] || \n// // // // // // //                         domainResponse.data;\n      \n// // // // // // //       const hierarchyData = hierarchyResponse.data?.data || hierarchyResponse.data;\n      \n// // // // // // //       console.log('🎯 SUBDOMAIN FETCH - Extracted domain:', domainData);\n// // // // // // //       console.log('🎯 SUBDOMAIN FETCH - Extracted hierarchy:', hierarchyData);\n      \n// // // // // // //       setDomain(domainData);\n// // // // // // //       setSubDomains(hierarchyData?.subDomains || []);\n      \n// // // // // // //       // Auto-expand first level\n// // // // // // //       if (hierarchyData?.subDomains?.length > 0) {\n// // // // // // //         const firstLevelIds = hierarchyData.subDomains.map(sd => sd.id);\n// // // // // // //         setExpandedNodes(new Set(firstLevelIds));\n// // // // // // //         console.log('🌳 SUBDOMAIN FETCH - Auto-expanded first level nodes:', firstLevelIds);\n// // // // // // //       }\n      \n// // // // // // //     } catch (error) {\n// // // // // // //       console.error('❌ SUBDOMAIN FETCH - Error occurred:', error);\n// // // // // // //       console.error('❌ SUBDOMAIN FETCH - Error response:', error.response);\n// // // // // // //       toast.error('Failed to fetch sub-domains');\n// // // // // // //     } finally {\n// // // // // // //       setLoading(false);\n// // // // // // //       console.log('🏁 SUBDOMAIN FETCH - Loading completed');\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   const handleAddSubDomain = (parent = null) => {\n// // // // // // //     console.log('➕ SUBDOMAIN MANAGEMENT - Add subdomain clicked');\n// // // // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - Parent:', parent);\n    \n// // // // // // //     setSelectedParent(parent);\n// // // // // // //     setEditingSubDomain(null);\n// // // // // // //     setShowAddModal(true);\n    \n// // // // // // //     console.log('📊 SUBDOMAIN MANAGEMENT - Modal state:', { \n// // // // // // //       showAddModal: true, \n// // // // // // //       selectedParent: parent?.title,\n// // // // // // //       editingSubDomain: null \n// // // // // // //     });\n// // // // // // //   };\n\n// // // // // // //   const handleEditSubDomain = (subDomain) => {\n// // // // // // //     console.log('✏️ SUBDOMAIN MANAGEMENT - Edit subdomain clicked');\n// // // // // // //     console.log('📋 SUBDOMAIN MANAGEMENT - SubDomain to edit:', subDomain);\n    \n// // // // // // //     setSelectedParent(null);\n// // // // // // //     setEditingSubDomain(subDomain);\n// // // // // // //     setShowAddModal(true);\n// // // // // // //   };\n\n// // // // // // //   const handleDeleteSubDomain = async (subDomain) => {\n// // // // // // //     const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // // // //     const hasProjects = subDomain.projectCount > 0;\n    \n// // // // // // //     let confirmMessage = `Are you sure you want to delete \"${subDomain.title}\"?`;\n// // // // // // //     if (hasChildren) {\n// // // // // // //       confirmMessage += '\\n\\nThis will also delete all nested sub-domains.';\n// // // // // // //     }\n// // // // // // //     if (hasProjects) {\n// // // // // // //       confirmMessage += '\\n\\nThis sub-domain has projects assigned to it.';\n// // // // // // //     }\n    \n// // // // // // //     if (!window.confirm(confirmMessage)) {\n// // // // // // //       return;\n// // // // // // //     }\n\n// // // // // // //     try {\n// // // // // // //       console.log('🗑️ SUBDOMAIN DELETE - Starting API call');\n// // // // // // //       console.log('📋 SUBDOMAIN DELETE - SubDomain to delete:', subDomain);\n// // // // // // //       console.log('📋 SUBDOMAIN DELETE - Has children:', hasChildren);\n// // // // // // //       console.log('📋 SUBDOMAIN DELETE - Has projects:', hasProjects);\n      \n// // // // // // //       const response = await authService.deleteSubDomain(subDomain.id);\n      \n// // // // // // //       console.log('✅ SUBDOMAIN DELETE - Response:', response.data);\n      \n// // // // // // //       toast.success('Sub-domain deleted successfully');\n// // // // // // //       fetchDomainAndSubDomains();\n// // // // // // //     } catch (error) {\n// // // // // // //       console.error('❌ SUBDOMAIN DELETE - Error:', error);\n// // // // // // //       toast.error('Failed to delete sub-domain');\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   const toggleExpanded = (nodeId) => {\n// // // // // // //     console.log('🔄 SUBDOMAIN TREE - Toggle expansion for node:', nodeId);\n    \n// // // // // // //     const newExpanded = new Set(expandedNodes);\n// // // // // // //     if (newExpanded.has(nodeId)) {\n// // // // // // //       newExpanded.delete(nodeId);\n// // // // // // //       console.log('📊 SUBDOMAIN TREE - Collapsed node:', nodeId);\n// // // // // // //     } else {\n// // // // // // //       newExpanded.add(nodeId);\n// // // // // // //       console.log('📊 SUBDOMAIN TREE - Expanded node:', nodeId);\n// // // // // // //     }\n// // // // // // //     setExpandedNodes(newExpanded);\n// // // // // // //   };\n\n// // // // // // //   const isLeafNode = (subDomain) => {\n// // // // // // //     return !subDomain.children || subDomain.children.length === 0;\n// // // // // // //   };\n\n// // // // // // //   const getNodeLevel = (subDomain, level = 0) => {\n// // // // // // //     return level;\n// // // // // // //   };\n\n// // // // // // //   if (loading) {\n// // // // // // //     console.log('⏳ SUBDOMAIN MANAGEMENT - Showing loading state');\n    \n// // // // // // //     return (\n// // // // // // //       <div className=\"loading-container\">\n// // // // // // //         <div className=\"loading-spinner\"></div>\n// // // // // // //         <p>Loading sub-domains...</p>\n// // // // // // //       </div>\n// // // // // // //     );\n// // // // // // //   }\n\n// // // // // // //   if (!domain) {\n// // // // // // //     console.log('❌ SUBDOMAIN MANAGEMENT - Domain not found');\n    \n// // // // // // //     return (\n// // // // // // //       <div className=\"empty-state\">\n// // // // // // //         <h3>Domain not found</h3>\n// // // // // // //         <p>The requested domain could not be loaded.</p>\n// // // // // // //         <button \n// // // // // // //           className=\"primary-button\" \n// // // // // // //           onClick={() => navigate('/domains')}\n// // // // // // //         >\n// // // // // // //           <FiArrowLeft />\n// // // // // // //           Back to Domains\n// // // // // // //         </button>\n// // // // // // //       </div>\n// // // // // // //     );\n// // // // // // //   }\n\n// // // // // // //   console.log('🎨 SUBDOMAIN MANAGEMENT - Rendering main component');\n\n// // // // // // //   return (\n// // // // // // //     <div className=\"subdomain-management\">\n// // // // // // //       {/* Header with Breadcrumb */}\n// // // // // // //       <div className=\"page-header\">\n// // // // // // //         <div className=\"header-content\">\n// // // // // // //           <div className=\"breadcrumb\">\n// // // // // // //             <button \n// // // // // // //               className=\"breadcrumb-link\"\n// // // // // // //               onClick={() => navigate('/domains')}\n// // // // // // //             >\n// // // // // // //               <FiArrowLeft />\n// // // // // // //               Domains\n// // // // // // //             </button>\n// // // // // // //             <span className=\"breadcrumb-separator\">/</span>\n// // // // // // //             <span className=\"breadcrumb-current\">{domain.title}</span>\n// // // // // // //           </div>\n// // // // // // //           <h1>SubDomain Management</h1>\n// // // // // // //           <p>Manage the hierarchical structure of {domain.title}</p>\n// // // // // // //         </div>\n// // // // // // //         <div className=\"header-actions\">\n// // // // // // //           <button \n// // // // // // //             className=\"primary-button\" \n// // // // // // //             onClick={() => handleAddSubDomain()}\n// // // // // // //           >\n// // // // // // //             <FiPlus />\n// // // // // // //             Add Root SubDomain\n// // // // // // //           </button>\n// // // // // // //         </div>\n// // // // // // //       </div>\n\n// // // // // // //       {/* Quick Guide */}\n// // // // // // //       <div className=\"quick-guide\">\n// // // // // // //         <h3>How to Add SubDomains:</h3>\n// // // // // // //         <div className=\"guide-steps\">\n// // // // // // //           <div className=\"guide-step\">\n// // // // // // //             <span className=\"step-number\">1</span>\n// // // // // // //             <span className=\"step-text\">Click <strong>\"Add Root SubDomain\"</strong> to create top-level categories</span>\n// // // // // // //           </div>\n// // // // // // //           <div className=\"guide-step\">\n// // // // // // //             <span className=\"step-number\">2</span>\n// // // // // // //             <span className=\"step-text\">Click the <FiPlus className=\"inline-icon\" /> button next to any subdomain to add children</span>\n// // // // // // //           </div>\n// // // // // // //           <div className=\"guide-step\">\n// // // // // // //             <span className=\"step-number\">3</span>\n// // // // // // //             <span className=\"step-text\">Only <FiTarget className=\"inline-icon leaf\" /> leaf subdomains can have projects assigned</span>\n// // // // // // //           </div>\n// // // // // // //         </div>\n// // // // // // //       </div>\n\n// // // // // // //       {/* Domain Info Card */}\n// // // // // // //       <div className=\"domain-info-card\">\n// // // // // // //         <div className=\"domain-icon\">\n// // // // // // //           <FiFolder />\n// // // // // // //         </div>\n// // // // // // //         <div className=\"domain-details\">\n// // // // // // //           <h3>{domain.title}</h3>\n// // // // // // //           <p>{domain.description}</p>\n// // // // // // //           <div className=\"domain-stats\">\n// // // // // // //             <span className=\"stat-item\">\n// // // // // // //               <strong>{subDomains.length}</strong> root sub-domains\n// // // // // // //             </span>\n// // // // // // //             <span className=\"stat-item\">\n// // // // // // //               <strong>{domain.projectCount || 0}</strong> total projects\n// // // // // // //             </span>\n// // // // // // //           </div>\n// // // // // // //         </div>\n// // // // // // //       </div>\n\n// // // // // // //       {/* SubDomain Tree */}\n// // // // // // //       <div className=\"subdomain-tree-container\">\n// // // // // // //         <div className=\"tree-header\">\n// // // // // // //           <h2>SubDomain Hierarchy</h2>\n// // // // // // //           <div className=\"tree-legend\">\n// // // // // // //             <span className=\"legend-item\">\n// // // // // // //               <FiFolder className=\"folder-icon\" />\n// // // // // // //               Has children\n// // // // // // //             </span>\n// // // // // // //             <span className=\"legend-item\">\n// // // // // // //               <FiTarget className=\"leaf-icon\" />\n// // // // // // //               Leaf (can have projects)\n// // // // // // //             </span>\n// // // // // // //           </div>\n// // // // // // //         </div>\n\n// // // // // // //         {subDomains.length > 0 ? (\n// // // // // // //           <div className=\"subdomain-tree\">\n// // // // // // //             {subDomains.map((subDomain) => (\n// // // // // // //               <SubDomainNode\n// // // // // // //                 key={subDomain.id}\n// // // // // // //                 subDomain={subDomain}\n// // // // // // //                 level={0}\n// // // // // // //                 isExpanded={expandedNodes.has(subDomain.id)}\n// // // // // // //                 onToggleExpanded={toggleExpanded}\n// // // // // // //                 onEdit={handleEditSubDomain}\n// // // // // // //                 onDelete={handleDeleteSubDomain}\n// // // // // // //                 onAddChild={handleAddSubDomain}\n// // // // // // //                 expandedNodes={expandedNodes}\n// // // // // // //               />\n// // // // // // //             ))}\n// // // // // // //           </div>\n// // // // // // //         ) : (\n// // // // // // //           <div className=\"empty-tree-state\">\n// // // // // // //             <FiFolderPlus size={64} />\n// // // // // // //             <h3>No SubDomains Yet</h3>\n// // // // // // //             <p>Start organizing your {domain.title} projects by creating subdomains</p>\n// // // // // // //             <div className=\"empty-state-examples\">\n// // // // // // //               <h4>Example Structure:</h4>\n// // // // // // //               <div className=\"example-tree\">\n// // // // // // //                 <div className=\"example-item\">📂 Machine Learning</div>\n// // // // // // //                 <div className=\"example-item nested\">🎯 Deep Learning</div>\n// // // // // // //                 <div className=\"example-item nested\">🎯 Computer Vision</div>\n// // // // // // //                 <div className=\"example-item\">🎯 Data Science</div>\n// // // // // // //               </div>\n// // // // // // //             </div>\n// // // // // // //             <div className=\"empty-state-actions\">\n// // // // // // //               <button \n// // // // // // //                 className=\"primary-button large\" \n// // // // // // //                 onClick={() => handleAddSubDomain()}\n// // // // // // //               >\n// // // // // // //                 <FiPlus />\n// // // // // // //                 Create Your First SubDomain\n// // // // // // //               </button>\n// // // // // // //               <p className=\"help-text\">\n// // // // // // //                 💡 Tip: Start with broad categories, then add specific subcategories as needed\n// // // // // // //               </p>\n// // // // // // //             </div>\n// // // // // // //           </div>\n// // // // // // //         )}\n// // // // // // //       </div>\n\n// // // // // // //       {/* Add/Edit Modal */}\n// // // // // // //       {showAddModal && (\n// // // // // // //         <SubDomainModal\n// // // // // // //           subDomain={editingSubDomain}\n// // // // // // //           parent={selectedParent}\n// // // // // // //           domain={domain}\n// // // // // // //           onClose={() => {\n// // // // // // //             setShowAddModal(false);\n// // // // // // //             setEditingSubDomain(null);\n// // // // // // //             setSelectedParent(null);\n// // // // // // //           }}\n// // // // // // //           onSave={() => {\n// // // // // // //             setShowAddModal(false);\n// // // // // // //             setEditingSubDomain(null);\n// // // // // // //             setSelectedParent(null);\n// // // // // // //             fetchDomainAndSubDomains();\n// // // // // // //           }}\n// // // // // // //         />\n// // // // // // //       )}\n// // // // // // //     </div>\n// // // // // // //   );\n// // // // // // // };\n\n// // // // // // // // SubDomain Node Component\n// // // // // // // const SubDomainNode = ({ \n// // // // // // //   subDomain, \n// // // // // // //   level, \n// // // // // // //   isExpanded, \n// // // // // // //   onToggleExpanded, \n// // // // // // //   onEdit, \n// // // // // // //   onDelete, \n// // // // // // //   onAddChild,\n// // // // // // //   expandedNodes \n// // // // // // // }) => {\n// // // // // // //   const [showMenu, setShowMenu] = useState(false);\n// // // // // // //   const hasChildren = subDomain.children && subDomain.children.length > 0;\n// // // // // // //   const isLeaf = !hasChildren;\n\n// // // // // // //   console.log('🌳 SUBDOMAIN NODE - Rendering:', {\n// // // // // // //     title: subDomain.title,\n// // // // // // //     level,\n// // // // // // //     hasChildren,\n// // // // // // //     isLeaf,\n// // // // // // //     isExpanded,\n// // // // // // //     projectCount: subDomain.projectCount\n// // // // // // //   });\n\n// // // // // // //   return (\n// // // // // // //     <div className={`subdomain-node level-${level}`}>\n// // // // // // //       <div className=\"node-content\">\n// // // // // // //         <div className=\"node-main\">\n// // // // // // //           {hasChildren ? (\n// // // // // // //             <button \n// // // // // // //               className=\"expand-button\"\n// // // // // // //               onClick={() => onToggleExpanded(subDomain.id)}\n// // // // // // //             >\n// // // // // // //               {isExpanded ? <FiChevronDown /> : <FiChevronRight />}\n// // // // // // //             </button>\n// // // // // // //           ) : (\n// // // // // // //             <div className=\"expand-placeholder\" />\n// // // // // // //           )}\n          \n// // // // // // //           <div className=\"node-icon\">\n// // // // // // //             {isLeaf ? <FiTarget className=\"leaf-icon\" /> : <FiFolder className=\"folder-icon\" />}\n// // // // // // //           </div>\n          \n// // // // // // //           <div className=\"node-info\">\n// // // // // // //             <h4 className=\"node-title\">{subDomain.title}</h4>\n// // // // // // //             <p className=\"node-description\">{subDomain.description}</p>\n// // // // // // //             <div className=\"node-stats\">\n// // // // // // //               {hasChildren && (\n// // // // // // //                 <span className=\"stat-badge\">\n// // // // // // //                   {subDomain.children.length} sub-domains\n// // // // // // //                 </span>\n// // // // // // //               )}\n// // // // // // //               {subDomain.projectCount > 0 && (\n// // // // // // //                 <span className=\"stat-badge projects\">\n// // // // // // //                   {subDomain.projectCount} projects\n// // // // // // //                 </span>\n// // // // // // //               )}\n// // // // // // //               {isLeaf && (\n// // // // // // //                 <span className=\"stat-badge leaf\">\n// // // // // // //                   Can have projects\n// // // // // // //                 </span>\n// // // // // // //               )}\n// // // // // // //             </div>\n// // // // // // //           </div>\n// // // // // // //         </div>\n        \n// // // // // // //         <div className=\"node-actions\">\n// // // // // // //           <button \n// // // // // // //             className=\"action-button add\" \n// // // // // // //             onClick={() => onAddChild(subDomain)}\n// // // // // // //             title={`Add child subdomain under \"${subDomain.title}\"`}\n// // // // // // //           >\n// // // // // // //             <FiPlus />\n// // // // // // //           </button>\n// // // // // // //           <div className=\"action-menu\">\n// // // // // // //             <button \n// // // // // // //               onClick={() => setShowMenu(!showMenu)}\n// // // // // // //               title=\"More actions\"\n// // // // // // //             >\n// // // // // // //               <FiMoreVertical />\n// // // // // // //             </button>\n// // // // // // //             {showMenu && (\n// // // // // // //               <div className=\"dropdown-menu\">\n// // // // // // //                 <button onClick={() => onEdit(subDomain)}>\n// // // // // // //                   <FiEdit /> Edit\n// // // // // // //                 </button>\n// // // // // // //                 <button onClick={() => onAddChild(subDomain)}>\n// // // // // // //                   <FiPlus /> Add Child SubDomain\n// // // // // // //                 </button>\n// // // // // // //                 <button onClick={() => onDelete(subDomain)} className=\"danger\">\n// // // // // // //                   <FiTrash2 /> Delete\n// // // // // // //                 </button>\n// // // // // // //               </div>\n// // // // // // //             )}\n// // // // // // //           </div>\n// // // // // // //         </div>\n// // // // // // //       </div>\n      \n// // // // // // //       {/* Children */}\n// // // // // // //       {hasChildren && isExpanded && (\n// // // // // // //         <div className=\"node-children\">\n// // // // // // //           {subDomain.children.map((child) => (\n// // // // // // //             <SubDomainNode\n// // // // // // //               key={child.id}\n// // // // // // //               subDomain={child}\n// // // // // // //               level={level + 1}\n// // // // // // //               isExpanded={expandedNodes.has(child.id)}\n// // // // // // //               onToggleExpanded={onToggleExpanded}\n// // // // // // //               onEdit={onEdit}\n// // // // // // //               onDelete={onDelete}\n// // // // // // //               onAddChild={onAddChild}\n// // // // // // //               expandedNodes={expandedNodes}\n// // // // // // //             />\n// // // // // // //           ))}\n// // // // // // //         </div>\n// // // // // // //       )}\n// // // // // // //     </div>\n// // // // // // //   );\n// // // // // // // };\n\n// // // // // // // // SubDomain Modal Component\n// // // // // // // const SubDomainModal = ({ subDomain, parent, domain, onClose, onSave }) => {\n// // // // // // //   const [formData, setFormData] = useState({\n// // // // // // //     title: subDomain?.title || '',\n// // // // // // //     description: subDomain?.description || ''\n// // // // // // //   });\n// // // // // // //   const [loading, setLoading] = useState(false);\n\n// // // // // // //   console.log('📝 SUBDOMAIN MODAL - Props:', {\n// // // // // // //     isEditing: !!subDomain,\n// // // // // // //     parentTitle: parent?.title,\n// // // // // // //     domainTitle: domain?.title,\n// // // // // // //     formData\n// // // // // // //   });\n\n// // // // // // //   const handleSubmit = async (e) => {\n// // // // // // //     e.preventDefault();\n// // // // // // //     setLoading(true);\n\n// // // // // // //     try {\n// // // // // // //       const requestData = {\n// // // // // // //         ...formData,\n// // // // // // //         domainId: domain.id,\n// // // // // // //         parentId: parent?.id || null\n// // // // // // //       };\n\n// // // // // // //       console.log('💾 SUBDOMAIN SAVE - Starting API call');\n// // // // // // //       console.log('📋 SUBDOMAIN SAVE - Request data:', requestData);\n// // // // // // //       console.log('📋 SUBDOMAIN SAVE - Is editing:', !!subDomain);\n\n// // // // // // //       if (subDomain) {\n// // // // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains/' + subDomain.id);\n// // // // // // //         const response = await authService.updateSubDomain(subDomain.id, requestData);\n// // // // // // //         console.log('✅ SUBDOMAIN UPDATE - Response:', response.data);\n// // // // // // //         toast.success('Sub-domain updated successfully');\n// // // // // // //       } else {\n// // // // // // //         console.log('🌐 SUBDOMAIN SAVE - API URL: /admin/subdomains');\n// // // // // // //         const response = await authService.createSubDomain(requestData);\n// // // // // // //         console.log('✅ SUBDOMAIN CREATE - Response:', response.data);\n// // // // // // //         toast.success('Sub-domain created successfully');\n// // // // // // //       }\n\n// // // // // // //       onSave();\n// // // // // // //     } catch (error) {\n// // // // // // //       console.error('❌ SUBDOMAIN SAVE - Error:', error);\n// // // // // // //       toast.error('Failed to save sub-domain');\n// // // // // // //     } finally {\n// // // // // // //       setLoading(false);\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   const getModalTitle = () => {\n// // // // // // //     if (subDomain) {\n// // // // // // //       return `Edit SubDomain: ${subDomain.title}`;\n// // // // // // //     }\n// // // // // // //     if (parent) {\n// // // // // // //       return `Add SubDomain under: ${parent.title}`;\n// // // // // // //     }\n// // // // // // //     return `Add Root SubDomain in: ${domain.title}`;\n// // // // // // //   };\n\n// // // // // // //   return (\n// // // // // // //     <div className=\"modal-overlay\">\n// // // // // // //       <div className=\"modal\">\n// // // // // // //         <div className=\"modal-header\">\n// // // // // // //           <h2>{getModalTitle()}</h2>\n// // // // // // //           <button onClick={onClose}>×</button>\n// // // // // // //         </div>\n        \n// // // // // // //         <form onSubmit={handleSubmit}>\n// // // // // // //           <div className=\"form-group\">\n// // // // // // //             <label>SubDomain Title</label>\n// // // // // // //             <input\n// // // // // // //               type=\"text\"\n// // // // // // //               value={formData.title}\n// // // // // // //               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // // // // // //               placeholder=\"e.g., Machine Learning, Deep Learning\"\n// // // // // // //               required\n// // // // // // //             />\n// // // // // // //           </div>\n          \n// // // // // // //           <div className=\"form-group\">\n// // // // // // //             <label>Description (Optional)</label>\n// // // // // // //             <textarea\n// // // // // // //               value={formData.description}\n// // // // // // //               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n// // // // // // //               rows={3}\n// // // // // // //               placeholder=\"Describe what this sub-domain covers...\"\n// // // // // // //             />\n// // // // // // //           </div>\n          \n// // // // // // //           <div className=\"modal-info\">\n// // // // // // //             <strong>Domain:</strong> {domain.title}<br />\n// // // // // // //             {parent && (\n// // // // // // //               <>\n// // // // // // //                 <strong>Parent SubDomain:</strong> {parent.title}<br />\n// // // // // // //               </>\n// // // // // // //             )}\n// // // // // // //             <strong>Level:</strong> {parent ? `Level ${getLevel(parent) + 1}` : 'Root Level'}\n// // // // // // //           </div>\n          \n// // // // // // //           <div className=\"modal-actions\">\n// // // // // // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // // // // // //               Cancel\n// // // // // // //             </button>\n// // // // // // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // // // // // //               {loading ? 'Saving...' : 'Save SubDomain'}\n// // // // // // //             </button>\n// // // // // // //           </div>\n// // // // // // //         </form>\n// // // // // // //       </div>\n// // // // // // //     </div>\n// // // // // // //   );\n// // // // // // // };\n\n// // // // // // // // Helper function to get level\n// // // // // // // const getLevel = (subDomain, level = 0) => {\n// // // // // // //   // This would need to be calculated based on the hierarchy\n// // // // // // //   return level + 1;\n// // // // // // // };\n\n// // // // // // // export default SubDomainManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}