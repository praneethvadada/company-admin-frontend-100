{"ast":null,"code":"var _jsxFileName = \"/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/components/projects/ProjectManagement.js\";\n// src/components/projects/ProjectManagement.js - SIMPLE DEBUG VERSION\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectManagement = () => {\n  console.log('üöÄ PROJECT MANAGEMENT - Component successfully rendering!');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '2rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: '#1e293b',\n        marginBottom: '1rem'\n      },\n      children: \"\\uD83C\\uDFAF Project Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: '#64748b',\n        fontSize: '1.125rem'\n      },\n      children: \"\\u2705 Success! You've reached the Projects page.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#f1f5f9',\n        padding: '1rem',\n        borderRadius: '0.5rem',\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Debug Information:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2705 ProjectManagement component loaded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2705 Route /projects is working\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2705 Navigation successful\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\uD83C\\uDF89 Ready to implement full functionality!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '2rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          background: 'var(--primary-color)',\n          color: 'white',\n          border: 'none',\n          padding: '0.75rem 1.5rem',\n          borderRadius: '0.375rem',\n          cursor: 'pointer'\n        },\n        onClick: () => {\n          console.log('üéØ PROJECT MANAGEMENT - Button clicked!');\n          alert('Projects page is working! üéâ');\n        },\n        children: \"Test Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = ProjectManagement;\nexport default ProjectManagement;\n\n// // src/components/projects/ProjectManagement.js - SIMPLIFIED VERSION FOR VIEWING/MANAGING PROJECTS\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { authService } from '../../services/authService';\n// import { toast } from 'react-toastify';\n// import {\n//   FiEdit,\n//   FiTrash2,\n//   FiSearch,\n//   FiFilter,\n//   FiMove,\n//   FiArchive,\n//   FiStar,\n//   FiEye,\n//   FiUsers,\n//   FiImage,\n//   FiMoreVertical,\n//   FiFolder,\n//   FiFileText,\n//   FiPlus,\n//   FiSettings,\n//   FiArrowRight\n// } from 'react-icons/fi';\n\n// const ProjectManagement = () => {\n//   console.log('üöÄ PROJECT MANAGEMENT - Component rendering/mounting');\n\n//   const navigate = useNavigate();\n//   const [projects, setProjects] = useState([]);\n//   const [domains, setDomains] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [pagination, setPagination] = useState({\n//     currentPage: 1,\n//     totalPages: 1,\n//     totalItems: 0\n//   });\n//   const [filters, setFilters] = useState({\n//     search: '',\n//     domainId: '',\n//     isActive: true,\n//     isFeatured: null,\n//     sortBy: 'updatedAt',\n//     sortOrder: 'DESC'\n//   });\n//   const [editingProject, setEditingProject] = useState(null);\n//   const [selectedProject, setSelectedProject] = useState(null);\n//   const [showEditModal, setShowEditModal] = useState(false);\n\n//   console.log('üìä PROJECT MANAGEMENT - Current state:', {\n//     projectsCount: projects.length,\n//     loading,\n//     pagination,\n//     filters,\n//     editingProject: !!editingProject,\n//     selectedProject: !!selectedProject\n//   });\n\n//   useEffect(() => {\n//     console.log('üîÑ PROJECT MANAGEMENT - useEffect triggered');\n//     fetchInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     console.log('üîÑ PROJECT MANAGEMENT - Filters or pagination changed');\n//     fetchProjects();\n//   }, [filters, pagination.currentPage]);\n\n//   const fetchInitialData = async () => {\n//     try {\n//       console.log('üì° INITIAL DATA - Fetching domains...');\n//       const domainsResponse = await authService.getDomains({ limit: 100 });\n//       console.log('‚úÖ INITIAL DATA - Domains fetched:', domainsResponse.data);\n\n//       setDomains(domainsResponse.data?.domains || []);\n//     } catch (error) {\n//       console.error('‚ùå INITIAL DATA - Error fetching domains:', error);\n//       toast.error('Failed to load domains');\n//     }\n//   };\n\n//   const fetchProjects = async () => {\n//     try {\n//       setLoading(true);\n\n//       // Clean up filters - remove empty strings and null values\n//       const cleanFilters = {};\n//       Object.keys(filters).forEach(key => {\n//         const value = filters[key];\n//         if (value !== '' && value !== null && value !== undefined) {\n//           cleanFilters[key] = value;\n//         }\n//       });\n\n//       const params = {\n//         page: pagination.currentPage,\n//         limit: 12,\n//         ...cleanFilters\n//       };\n\n//       console.log('üì° PROJECT FETCH - Starting with params:', params);\n\n//       const response = await authService.getProjects(params);\n//       console.log('‚úÖ PROJECT FETCH - Response:', response.data);\n\n//       setProjects(response.data.projects || []);\n//       setPagination(response.data.pagination || pagination);\n\n//     } catch (error) {\n//       console.error('‚ùå PROJECT FETCH - Error:', error);\n//       toast.error('Failed to fetch projects');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = (searchTerm) => {\n//     console.log('üîç PROJECT SEARCH - Search term:', searchTerm);\n//     setFilters(prev => ({ ...prev, search: searchTerm }));\n//     setPagination(prev => ({ ...prev, currentPage: 1 }));\n//   };\n\n//   const handleFilterChange = (filterKey, value) => {\n//     console.log('üéõÔ∏è PROJECT FILTER - Changed:', filterKey, '=', value);\n//     setFilters(prev => ({ ...prev, [filterKey]: value }));\n//     setPagination(prev => ({ ...prev, currentPage: 1 }));\n//   };\n\n//   const handleEditProject = (project) => {\n//     console.log('‚úèÔ∏è PROJECT EDIT - Editing:', project.title);\n//     setEditingProject(project);\n//     setShowEditModal(true);\n//   };\n\n//   const handleDeleteProject = async (project) => {\n//     console.log('üóëÔ∏è PROJECT DELETE - Requesting deletion:', project.title);\n\n//     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n//       console.log('‚ùå PROJECT DELETE - Cancelled by user');\n//       return;\n//     }\n\n//     try {\n//       console.log('üì° PROJECT DELETE - API call for:', project.id);\n//       await authService.deleteProject(project.id);\n//       console.log('‚úÖ PROJECT DELETE - Success');\n//       toast.success('Project deleted successfully');\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('‚ùå PROJECT DELETE - Error:', error);\n//       toast.error('Failed to delete project');\n//     }\n//   };\n\n//   const handleArchiveProject = async (project) => {\n//     const isArchiving = project.isActive;\n//     const action = isArchiving ? 'archive' : 'restore';\n\n//     console.log('üìÅ PROJECT ARCHIVE - Action:', action, 'for:', project.title);\n\n//     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n//       return;\n//     }\n\n//     try {\n//       await authService.archiveProject(project.id, {\n//         archive: isArchiving,\n//         reason: `${action} via admin panel`\n//       });\n//       console.log('‚úÖ PROJECT ARCHIVE - Success');\n//       toast.success(`Project ${action}d successfully`);\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('‚ùå PROJECT ARCHIVE - Error:', error);\n//       toast.error(`Failed to ${action} project`);\n//     }\n//   };\n\n//   const handleToggleFeatured = async (project) => {\n//     console.log('‚≠ê PROJECT FEATURED - Toggle for:', project.title);\n\n//     try {\n//       await authService.updateProject(project.id, {\n//         isFeatured: !project.isFeatured\n//       });\n//       console.log('‚úÖ PROJECT FEATURED - Success');\n//       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('‚ùå PROJECT FEATURED - Error:', error);\n//       toast.error('Failed to update featured status');\n//     }\n//   };\n\n//   const navigateToCreateProject = () => {\n//     console.log('üåê NAVIGATION - Redirecting to domains for project creation');\n//     navigate('/domains');\n//     toast.info('Navigate to Domains ‚Üí SubDomains to create new projects');\n//   };\n\n//   if (loading && projects.length === 0) {\n//     return (\n//       <div className=\"loading-container\">\n//         <div className=\"loading-spinner\"></div>\n//         <p>Loading projects...</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"project-management\">\n//       <div className=\"page-header\">\n//         <div className=\"header-content\">\n//           <h1>Project Management</h1>\n//           <p>View and manage your existing projects</p>\n//         </div>\n//         <div className=\"header-actions\">\n//           <button \n//             className=\"secondary-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             <FiSettings />\n//             Manage Domains\n//           </button>\n//           <button \n//             className=\"primary-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             <FiPlus />\n//             Create New Project\n//             <FiArrowRight />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Info Banner */}\n//       <div className=\"info-banner\">\n//         <div className=\"banner-content\">\n//           <FiFileText className=\"banner-icon\" />\n//           <div className=\"banner-text\">\n//             <strong>Want to create a new project?</strong>\n//             <p>Go to <strong>Domains ‚Üí SubDomains</strong> and click \"Add Project\" on any leaf subdomain for better organization.</p>\n//           </div>\n//           <button \n//             className=\"banner-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             Go to Domains <FiArrowRight />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Filters and Controls */}\n//       <div className=\"controls-section\">\n//         <div className=\"search-bar\">\n//           <FiSearch className=\"search-icon\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search projects...\"\n//             value={filters.search}\n//             onChange={(e) => handleSearch(e.target.value)}\n//           />\n//         </div>\n\n//         <div className=\"filter-controls\">\n//           <select\n//             value={filters.domainId}\n//             onChange={(e) => handleFilterChange('domainId', e.target.value)}\n//           >\n//             <option value=\"\">All Domains</option>\n//             {domains.map(domain => (\n//               <option key={domain.id} value={domain.id}>{domain.title}</option>\n//             ))}\n//           </select>\n\n//           <select\n//             value={filters.isFeatured === null ? '' : filters.isFeatured}\n//             onChange={(e) => handleFilterChange('isFeatured', \n//               e.target.value === '' ? null : e.target.value === 'true'\n//             )}\n//           >\n//             <option value=\"\">All Projects</option>\n//             <option value=\"true\">Featured Only</option>\n//             <option value=\"false\">Non-Featured</option>\n//           </select>\n\n//           <select\n//             value={filters.isActive}\n//             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n//           >\n//             <option value=\"true\">Active Projects</option>\n//             <option value=\"false\">Archived Projects</option>\n//           </select>\n\n//           <select\n//             value={filters.sortBy}\n//             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n//           >\n//             <option value=\"updatedAt\">Sort by Last Updated</option>\n//             <option value=\"title\">Sort by Title</option>\n//             <option value=\"createdAt\">Sort by Date Created</option>\n//             <option value=\"leadCount\">Sort by Leads</option>\n//             <option value=\"viewCount\">Sort by Views</option>\n//           </select>\n//         </div>\n//       </div>\n\n//       {/* Projects Grid */}\n//       <div className=\"projects-grid\">\n//         {projects.length > 0 ? (\n//           projects.map((project) => (\n//             <ProjectCard\n//               key={project.id}\n//               project={project}\n//               onEdit={handleEditProject}\n//               onDelete={handleDeleteProject}\n//               onArchive={handleArchiveProject}\n//               onToggleFeatured={handleToggleFeatured}\n//               onViewDetails={(project) => setSelectedProject(project)}\n//             />\n//           ))\n//         ) : (\n//           <div className=\"empty-state\">\n//             <FiFileText size={48} />\n//             <h3>No projects found</h3>\n//             <p>Projects are created from Domain ‚Üí SubDomain pages for better organization</p>\n//             <div className=\"empty-state-actions\">\n//               <button className=\"primary-button\" onClick={navigateToCreateProject}>\n//                 <FiSettings />\n//                 Go to Domains\n//               </button>\n//               <p className=\"help-text\">\n//                 üí° Tip: Organize your projects by creating domains and subdomains first\n//               </p>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Pagination */}\n//       {pagination.totalPages > 1 && (\n//         <div className=\"pagination\">\n//           <button\n//             disabled={pagination.currentPage === 1}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n//           >\n//             Previous\n//           </button>\n\n//           <span className=\"page-info\">\n//             Page {pagination.currentPage} of {pagination.totalPages}\n//             ({pagination.totalItems} total)\n//           </span>\n\n//           <button\n//             disabled={pagination.currentPage === pagination.totalPages}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n//           >\n//             Next\n//           </button>\n//         </div>\n//       )}\n\n//       {/* Edit Project Modal */}\n//       {showEditModal && editingProject && (\n//         <ProjectEditModal\n//           project={editingProject}\n//           onClose={() => {\n//             setShowEditModal(false);\n//             setEditingProject(null);\n//           }}\n//           onSave={() => {\n//             setShowEditModal(false);\n//             setEditingProject(null);\n//             fetchProjects();\n//           }}\n//         />\n//       )}\n\n//       {/* Project Details Modal */}\n//       {selectedProject && (\n//         <ProjectDetailsModal\n//           project={selectedProject}\n//           onClose={() => setSelectedProject(null)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // Project Card Component\n// const ProjectCard = ({ \n//   project, \n//   onEdit, \n//   onDelete, \n//   onArchive, \n//   onToggleFeatured, \n//   onViewDetails \n// }) => {\n//   const [showMenu, setShowMenu] = useState(false);\n\n//   return (\n//     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n//       <div className=\"project-header\">\n//         <div className=\"project-image\">\n//           {project.images && project.images.length > 0 ? (\n//             <img src={project.images[0].url} alt={project.title} />\n//           ) : (\n//             <div className=\"image-placeholder\">\n//               <FiImage />\n//             </div>\n//           )}\n//         </div>\n\n//         <div className=\"project-badges\">\n//           {project.isFeatured && (\n//             <span className=\"badge featured\">\n//               <FiStar /> Featured\n//             </span>\n//           )}\n//           {!project.isActive && (\n//             <span className=\"badge archived\">Archived</span>\n//           )}\n//         </div>\n\n//         <div className=\"project-menu\">\n//           <button onClick={() => setShowMenu(!showMenu)}>\n//             <FiMoreVertical />\n//           </button>\n//           {showMenu && (\n//             <div className=\"dropdown-menu\">\n//               <button onClick={() => onViewDetails(project)}>\n//                 <FiEye /> View Details\n//               </button>\n//               <button onClick={() => onEdit(project)}>\n//                 <FiEdit /> Edit\n//               </button>\n//               <button onClick={() => onToggleFeatured(project)}>\n//                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n//               </button>\n//               <button onClick={() => onArchive(project)}>\n//                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n//               </button>\n//               <button onClick={() => onDelete(project)} className=\"danger\">\n//                 <FiTrash2 /> Delete\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       <div className=\"project-content\">\n//         <h3 className=\"project-title\">{project.title}</h3>\n//         <p className=\"project-subdomain\">\n//           <FiFolder className=\"subdomain-icon\" />\n//           {project.subDomain?.domain?.title} ‚Üí {project.subDomain?.title || 'No sub-domain'}\n//         </p>\n//         <p className=\"project-abstract\">\n//           {project.abstract?.substring(0, 100)}...\n//         </p>\n//       </div>\n\n//       <div className=\"project-footer\">\n//         <div className=\"project-stats\">\n//           <div className=\"stat\">\n//             <FiEye />\n//             <span>{project.viewCount || 0}</span>\n//           </div>\n//           <div className=\"stat\">\n//             <FiUsers />\n//             <span>{project.leadCount || 0}</span>\n//           </div>\n//         </div>\n\n//         <div className=\"project-actions\">\n//           <button onClick={() => onEdit(project)} className=\"edit-button\">\n//             <FiEdit />\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Project Edit Modal Component\n// const ProjectEditModal = ({ project, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     title: project?.title || '',\n//     abstract: project?.abstract || '',\n//     specifications: project?.specifications || '',\n//     learningOutcomes: project?.learningOutcomes || '',\n//     isFeatured: project?.isFeatured || false\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   console.log('üìù PROJECT EDIT MODAL - Project:', project.title);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     try {\n//       console.log('üíæ PROJECT UPDATE - Starting with data:', formData);\n//       await authService.updateProject(project.id, formData);\n//       console.log('‚úÖ PROJECT UPDATE - Success');\n//       toast.success('Project updated successfully');\n//       onSave();\n//     } catch (error) {\n//       console.error('‚ùå PROJECT UPDATE - Error:', error);\n//       toast.error('Failed to update project');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal large\">\n//         <div className=\"modal-header\">\n//           <h2>Edit Project: {project.title}</h2>\n//           <button onClick={onClose}>√ó</button>\n//         </div>\n\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label>Project Title</label>\n//             <input\n//               type=\"text\"\n//               value={formData.title}\n//               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"modal-info\">\n//             <strong>Domain:</strong> {project.subDomain?.domain?.title || 'Unknown'}<br />\n//             <strong>SubDomain:</strong> {project.subDomain?.title || 'Unknown'}<br />\n//             <span className=\"info-note\">\n//               üí° To move this project to a different domain/subdomain, contact your administrator\n//             </span>\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label>Abstract</label>\n//             <textarea\n//               value={formData.abstract}\n//               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n//               rows={4}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label>Specifications</label>\n//             <textarea\n//               value={formData.specifications}\n//               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n//               rows={6}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label>Learning Outcomes</label>\n//             <textarea\n//               value={formData.learningOutcomes}\n//               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n//               rows={4}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"form-group checkbox\">\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 checked={formData.isFeatured}\n//                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n//               />\n//               Featured Project\n//             </label>\n//           </div>\n\n//           <div className=\"modal-actions\">\n//             <button type=\"button\" onClick={onClose} disabled={loading}>\n//               Cancel\n//             </button>\n//             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n//               {loading ? 'Updating...' : 'Update Project'}\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Project Details Modal\n// const ProjectDetailsModal = ({ project, onClose }) => {\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal large\">\n//         <div className=\"modal-header\">\n//           <h2>{project.title}</h2>\n//           <button onClick={onClose}>√ó</button>\n//         </div>\n\n//         <div className=\"project-details\">\n//           <div className=\"detail-section\">\n//             <h3>Location</h3>\n//             <p><strong>Domain:</strong> {project.subDomain?.domain?.title || 'Unknown'}</p>\n//             <p><strong>SubDomain:</strong> {project.subDomain?.title || 'Unknown'}</p>\n//           </div>\n\n//           <div className=\"detail-section\">\n//             <h3>Abstract</h3>\n//             <p>{project.abstract}</p>\n//           </div>\n\n//           <div className=\"detail-section\">\n//             <h3>Specifications</h3>\n//             <p>{project.specifications}</p>\n//           </div>\n\n//           <div className=\"detail-section\">\n//             <h3>Learning Outcomes</h3>\n//             <p>{project.learningOutcomes}</p>\n//           </div>\n\n//           <div className=\"detail-stats\">\n//             <div className=\"stat-item\">\n//               <strong>Views:</strong> {project.viewCount || 0}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Leads:</strong> {project.leadCount || 0}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ProjectManagement;\n\n// // // src/components/projects/ProjectManagement.js - FIXED WITH LOGGING\n// // import React, { useState, useEffect } from 'react';\n// // import { authService } from '../../services/authService';\n// // import { toast } from 'react-toastify';\n// // import {\n// //   FiPlus,\n// //   FiEdit,\n// //   FiTrash2,\n// //   FiSearch,\n// //   FiFilter,\n// //   FiMove,\n// //   FiArchive,\n// //   FiStar,\n// //   FiEye,\n// //   FiUsers,\n// //   FiImage,\n// //   FiMoreVertical,\n// //   FiFolder,\n// //   FiFileText\n// // } from 'react-icons/fi';\n\n// // const ProjectManagement = () => {\n// //   const [projects, setProjects] = useState([]);\n// //   const [domains, setDomains] = useState([]);\n// //   const [subDomains, setSubDomains] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [pagination, setPagination] = useState({\n// //     currentPage: 1,\n// //     totalPages: 1,\n// //     totalItems: 0\n// //   });\n// //   const [filters, setFilters] = useState({\n// //     search: '',\n// //     subDomainId: '',\n// //     isActive: true,\n// //     isFeatured: null,\n// //     sortBy: 'title',\n// //     sortOrder: 'ASC'\n// //   });\n// //   const [showAddModal, setShowAddModal] = useState(false);\n// //   const [editingProject, setEditingProject] = useState(null);\n// //   const [selectedProject, setSelectedProject] = useState(null);\n\n// //   useEffect(() => {\n// //     console.log('üöÄ ProjectManagement component mounted');\n// //     fetchInitialData();\n// //   }, []);\n\n// //   useEffect(() => {\n// //     console.log('üîÑ Filters or pagination changed:', { filters, currentPage: pagination.currentPage });\n// //     fetchProjects();\n// //   }, [filters, pagination.currentPage]);\n\n// //   const fetchInitialData = async () => {\n// //     try {\n// //       console.log('üì° Fetching initial data (domains)...');\n// //       const [domainsResponse] = await Promise.all([\n// //         authService.getDomains({ limit: 100 })\n// //       ]);\n\n// //       console.log('‚úÖ Domains fetched:', domainsResponse);\n// //       setDomains(domainsResponse.data.domains || []);\n// //     } catch (error) {\n// //       console.error('‚ùå Error fetching initial data:', error);\n// //       toast.error('Failed to load domains');\n// //     }\n// //   };\n\n// //   const fetchProjects = async () => {\n// //     try {\n// //       setLoading(true);\n\n// //       // Clean up filters - remove empty strings and null values\n// //       const cleanFilters = {};\n// //       Object.keys(filters).forEach(key => {\n// //         const value = filters[key];\n// //         // Only add non-empty values to the params\n// //         if (value !== '' && value !== null && value !== undefined) {\n// //           cleanFilters[key] = value;\n// //         }\n// //       });\n\n// //       const params = {\n// //         page: pagination.currentPage,\n// //         limit: 12,\n// //         ...cleanFilters\n// //       };\n\n// //       console.log('üì° Fetching projects with params:', params);\n// //       console.log('üîç Raw filters before cleaning:', filters);\n// //       console.log('üßπ Cleaned filters:', cleanFilters);\n\n// //       const response = await authService.getProjects(params);\n// //       console.log('‚úÖ Projects API response:', response);\n\n// //       setProjects(response.data.projects || []);\n// //       setPagination(response.data.pagination || pagination);\n\n// //       console.log('üìä Projects set:', response.data.projects?.length || 0, 'projects');\n// //       console.log('üìÑ Pagination set:', response.data.pagination);\n\n// //     } catch (error) {\n// //       console.error('‚ùå Error fetching projects:', error);\n// //       console.error('‚ùå Error details:', {\n// //         message: error.message,\n// //         response: error.response?.data,\n// //         status: error.response?.status,\n// //         config: error.config\n// //       });\n// //       toast.error('Failed to fetch projects');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const fetchSubDomains = async (domainId) => {\n// //     try {\n// //       console.log('üì° Fetching subdomains for domain:', domainId);\n// //       const response = await authService.getLeafSubDomains(domainId);\n// //       console.log('‚úÖ Subdomains fetched:', response);\n// //       setSubDomains(response.data || []);\n// //     } catch (error) {\n// //       console.error('‚ùå Error fetching sub-domains:', error);\n// //     }\n// //   };\n\n// //   const handleSearch = (searchTerm) => {\n// //     console.log('üîç Search term changed:', searchTerm);\n// //     setFilters(prev => ({ ...prev, search: searchTerm }));\n// //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// //   };\n\n// //   const handleFilterChange = (filterKey, value) => {\n// //     console.log('üéõÔ∏è Filter changed:', filterKey, '=', value);\n// //     setFilters(prev => ({ ...prev, [filterKey]: value }));\n// //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// //   };\n\n// //   const handleDomainChange = (domainId) => {\n// //     console.log('üè¢ Domain changed:', domainId);\n// //     if (domainId) {\n// //       fetchSubDomains(domainId);\n// //     } else {\n// //       setSubDomains([]);\n// //     }\n// //     // Reset subdomain filter when domain changes\n// //     setFilters(prev => ({ ...prev, subDomainId: '' }));\n// //   };\n\n// //   const handleAddProject = () => {\n// //     console.log('‚ûï Add project clicked');\n// //     setEditingProject(null);\n// //     setShowAddModal(true);\n// //   };\n\n// //   const handleEditProject = (project) => {\n// //     console.log('‚úèÔ∏è Edit project clicked:', project.id, project.title);\n// //     setEditingProject(project);\n// //     setShowAddModal(true);\n// //   };\n\n// //   const handleDeleteProject = async (project) => {\n// //     console.log('üóëÔ∏è Delete project requested:', project.id, project.title);\n\n// //     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n// //       console.log('‚ùå Delete cancelled by user');\n// //       return;\n// //     }\n\n// //     try {\n// //       console.log('üì° Deleting project:', project.id);\n// //       await authService.deleteProject(project.id);\n// //       console.log('‚úÖ Project deleted successfully');\n// //       toast.success('Project deleted successfully');\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('‚ùå Error deleting project:', error);\n// //       toast.error('Failed to delete project');\n// //     }\n// //   };\n\n// //   const handleMoveProject = async (project, newSubDomainId) => {\n// //     console.log('üì¶ Move project requested:', project.id, 'to subdomain:', newSubDomainId);\n\n// //     try {\n// //       await authService.moveProject(project.id, {\n// //         newSubDomainId,\n// //         reason: 'Moved via admin panel'\n// //       });\n// //       console.log('‚úÖ Project moved successfully');\n// //       toast.success('Project moved successfully');\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('‚ùå Error moving project:', error);\n// //       toast.error('Failed to move project');\n// //     }\n// //   };\n\n// //   const handleArchiveProject = async (project) => {\n// //     const isArchiving = project.isActive;\n// //     const action = isArchiving ? 'archive' : 'restore';\n\n// //     console.log('üìÅ Archive/restore project requested:', project.id, action);\n\n// //     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n// //       console.log('‚ùå Archive/restore cancelled by user');\n// //       return;\n// //     }\n\n// //     try {\n// //       await authService.archiveProject(project.id, {\n// //         archive: isArchiving,\n// //         reason: `${action} via admin panel`\n// //       });\n// //       console.log('‚úÖ Project archived/restored successfully');\n// //       toast.success(`Project ${action}d successfully`);\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error(`‚ùå Error ${action}ing project:`, error);\n// //       toast.error(`Failed to ${action} project`);\n// //     }\n// //   };\n\n// //   const handleToggleFeatured = async (project) => {\n// //     console.log('‚≠ê Toggle featured requested:', project.id, 'current:', project.isFeatured);\n\n// //     try {\n// //       await authService.updateProject(project.id, {\n// //         isFeatured: !project.isFeatured\n// //       });\n// //       console.log('‚úÖ Featured status updated successfully');\n// //       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('‚ùå Error updating featured status:', error);\n// //       toast.error('Failed to update featured status');\n// //     }\n// //   };\n\n// //   if (loading && projects.length === 0) {\n// //     return (\n// //       <div className=\"loading-container\">\n// //         <div className=\"loading-spinner\"></div>\n// //         <p>Loading projects...</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"project-management\">\n// //       <div className=\"page-header\">\n// //         <div className=\"header-content\">\n// //           <h1>Project Management</h1>\n// //           <p>Manage your project portfolio and content</p>\n// //         </div>\n// //         <button className=\"primary-button\" onClick={handleAddProject}>\n// //           <FiPlus />\n// //           Add Project\n// //         </button>\n// //       </div>\n\n// //       {/* Filters and Controls */}\n// //       <div className=\"controls-section\">\n// //         <div className=\"search-bar\">\n// //           <FiSearch className=\"search-icon\" />\n// //           <input\n// //             type=\"text\"\n// //             placeholder=\"Search projects...\"\n// //             value={filters.search}\n// //             onChange={(e) => handleSearch(e.target.value)}\n// //           />\n// //         </div>\n\n// //         <div className=\"filter-controls\">\n// //           {/* Domain Selector */}\n// //           <select\n// //             onChange={(e) => handleDomainChange(e.target.value)}\n// //           >\n// //             <option value=\"\">Select Domain</option>\n// //             {domains.map(domain => (\n// //               <option key={domain.id} value={domain.id}>{domain.title}</option>\n// //             ))}\n// //           </select>\n\n// //           {/* Subdomain Selector */}\n// //           <select\n// //             value={filters.subDomainId}\n// //             onChange={(e) => handleFilterChange('subDomainId', e.target.value)}\n// //             disabled={subDomains.length === 0}\n// //           >\n// //             <option value=\"\">All Sub-domains</option>\n// //             {subDomains.map(sub => (\n// //               <option key={sub.id} value={sub.id}>{sub.title}</option>\n// //             ))}\n// //           </select>\n\n// //           <select\n// //             value={filters.isFeatured === null ? '' : filters.isFeatured}\n// //             onChange={(e) => handleFilterChange('isFeatured', \n// //               e.target.value === '' ? null : e.target.value === 'true'\n// //             )}\n// //           >\n// //             <option value=\"\">All Projects</option>\n// //             <option value=\"true\">Featured Only</option>\n// //             <option value=\"false\">Non-Featured</option>\n// //           </select>\n\n// //           <select\n// //             value={filters.isActive}\n// //             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n// //           >\n// //             <option value=\"true\">Active Projects</option>\n// //             <option value=\"false\">Archived Projects</option>\n// //           </select>\n\n// //           <select\n// //             value={filters.sortBy}\n// //             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n// //           >\n// //             <option value=\"title\">Sort by Title</option>\n// //             <option value=\"createdAt\">Sort by Date</option>\n// //             <option value=\"leadCount\">Sort by Leads</option>\n// //             <option value=\"viewCount\">Sort by Views</option>\n// //           </select>\n// //         </div>\n// //       </div>\n\n// //       {/* Projects Grid */}\n// //       <div className=\"projects-grid\">\n// //         {projects.length > 0 ? (\n// //           projects.map((project) => (\n// //             <ProjectCard\n// //               key={project.id}\n// //               project={project}\n// //               onEdit={handleEditProject}\n// //               onDelete={handleDeleteProject}\n// //               onMove={handleMoveProject}\n// //               onArchive={handleArchiveProject}\n// //               onToggleFeatured={handleToggleFeatured}\n// //               onViewDetails={(project) => setSelectedProject(project)}\n// //             />\n// //           ))\n// //         ) : (\n// //           <div className=\"empty-state\">\n// //             <FiFileText size={48} />\n// //             <h3>No projects found</h3>\n// //             <p>Create your first project to get started</p>\n// //             <button className=\"primary-button\" onClick={handleAddProject}>\n// //               <FiPlus />\n// //               Add Project\n// //             </button>\n// //           </div>\n// //         )}\n// //       </div>\n\n// //       {/* Pagination */}\n// //       {pagination.totalPages > 1 && (\n// //         <div className=\"pagination\">\n// //           <button\n// //             disabled={pagination.currentPage === 1}\n// //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n// //           >\n// //             Previous\n// //           </button>\n\n// //           <span className=\"page-info\">\n// //             Page {pagination.currentPage} of {pagination.totalPages}\n// //             ({pagination.totalItems} total)\n// //           </span>\n\n// //           <button\n// //             disabled={pagination.currentPage === pagination.totalPages}\n// //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n// //           >\n// //             Next\n// //           </button>\n// //         </div>\n// //       )}\n\n// //       {/* Add/Edit Modal */}\n// //       {showAddModal && (\n// //         <ProjectModal\n// //           project={editingProject}\n// //           domains={domains}\n// //           onClose={() => setShowAddModal(false)}\n// //           onSave={() => {\n// //             setShowAddModal(false);\n// //             fetchProjects();\n// //           }}\n// //         />\n// //       )}\n\n// //       {/* Project Details Modal */}\n// //       {selectedProject && (\n// //         <ProjectDetailsModal\n// //           project={selectedProject}\n// //           onClose={() => setSelectedProject(null)}\n// //         />\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // // Project Card Component\n// // const ProjectCard = ({ \n// //   project, \n// //   onEdit, \n// //   onDelete, \n// //   onMove, \n// //   onArchive, \n// //   onToggleFeatured, \n// //   onViewDetails \n// // }) => {\n// //   const [showMenu, setShowMenu] = useState(false);\n\n// //   return (\n// //     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n// //       <div className=\"project-header\">\n// //         <div className=\"project-image\">\n// //           {project.images && project.images.length > 0 ? (\n// //             <img src={project.images[0].url} alt={project.title} />\n// //           ) : (\n// //             <div className=\"image-placeholder\">\n// //               <FiImage />\n// //             </div>\n// //           )}\n// //         </div>\n\n// //         <div className=\"project-badges\">\n// //           {project.isFeatured && (\n// //             <span className=\"badge featured\">\n// //               <FiStar /> Featured\n// //             </span>\n// //           )}\n// //           {!project.isActive && (\n// //             <span className=\"badge archived\">Archived</span>\n// //           )}\n// //         </div>\n\n// //         <div className=\"project-menu\">\n// //           <button onClick={() => setShowMenu(!showMenu)}>\n// //             <FiMoreVertical />\n// //           </button>\n// //           {showMenu && (\n// //             <div className=\"dropdown-menu\">\n// //               <button onClick={() => onViewDetails(project)}>\n// //                 <FiEye /> View Details\n// //               </button>\n// //               <button onClick={() => onEdit(project)}>\n// //                 <FiEdit /> Edit\n// //               </button>\n// //               <button onClick={() => onToggleFeatured(project)}>\n// //                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n// //               </button>\n// //               <button onClick={() => onMove(project)}>\n// //                 <FiMove /> Move\n// //               </button>\n// //               <button onClick={() => onArchive(project)}>\n// //                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n// //               </button>\n// //               <button onClick={() => onDelete(project)} className=\"danger\">\n// //                 <FiTrash2 /> Delete\n// //               </button>\n// //             </div>\n// //           )}\n// //         </div>\n// //       </div>\n\n// //       <div className=\"project-content\">\n// //         <h3 className=\"project-title\">{project.title}</h3>\n// //         <p className=\"project-subdomain\">\n// //           <FiFolder className=\"subdomain-icon\" />\n// //           {project.subDomain?.title || 'No sub-domain'}\n// //         </p>\n// //         <p className=\"project-abstract\">\n// //           {project.abstract?.substring(0, 100)}...\n// //         </p>\n// //       </div>\n\n// //       <div className=\"project-footer\">\n// //         <div className=\"project-stats\">\n// //           <div className=\"stat\">\n// //             <FiEye />\n// //             <span>{project.viewCount || 0}</span>\n// //           </div>\n// //           <div className=\"stat\">\n// //             <FiUsers />\n// //             <span>{project.leadCount || 0}</span>\n// //           </div>\n// //         </div>\n\n// //         <div className=\"project-actions\">\n// //           <button onClick={() => onEdit(project)} className=\"edit-button\">\n// //             <FiEdit />\n// //           </button>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // // Project Modal Component (Add/Edit)\n// // const ProjectModal = ({ project, domains, onClose, onSave }) => {\n// //   const [formData, setFormData] = useState({\n// //     title: project?.title || '',\n// //     abstract: project?.abstract || '',\n// //     specifications: project?.specifications || '',\n// //     learningOutcomes: project?.learningOutcomes || '',\n// //     subDomainId: project?.subDomainId || '',\n// //     isFeatured: project?.isFeatured || false\n// //   });\n// //   const [loading, setLoading] = useState(false);\n// //   const [selectedDomain, setSelectedDomain] = useState('');\n// //   const [subDomains, setSubDomains] = useState([]);\n\n// //   useEffect(() => {\n// //     if (selectedDomain) {\n// //       fetchSubDomains(selectedDomain);\n// //     }\n// //   }, [selectedDomain]);\n\n// //   const fetchSubDomains = async (domainId) => {\n// //     try {\n// //       console.log('üì° Modal: Fetching subdomains for domain:', domainId);\n// //       const response = await authService.getLeafSubDomains(domainId);\n// //       console.log('‚úÖ Modal: Subdomains fetched:', response);\n// //       setSubDomains(response.data || []);\n// //     } catch (error) {\n// //       console.error('‚ùå Modal: Error fetching sub-domains:', error);\n// //     }\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     setLoading(true);\n\n// //     console.log('üíæ Modal: Submitting form data:', formData);\n\n// //     try {\n// //       if (project) {\n// //         console.log('üì° Modal: Updating project:', project.id);\n// //         await authService.updateProject(project.id, formData);\n// //         console.log('‚úÖ Modal: Project updated successfully');\n// //         toast.success('Project updated successfully');\n// //       } else {\n// //         console.log('üì° Modal: Creating new project');\n// //         await authService.createProject(formData);\n// //         console.log('‚úÖ Modal: Project created successfully');\n// //         toast.success('Project created successfully');\n// //       }\n// //       onSave();\n// //     } catch (error) {\n// //       console.error('‚ùå Modal: Error saving project:', error);\n// //       toast.error('Failed to save project');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"modal-overlay\">\n// //       <div className=\"modal large\">\n// //         <div className=\"modal-header\">\n// //           <h2>{project ? 'Edit Project' : 'Add New Project'}</h2>\n// //           <button onClick={onClose}>√ó</button>\n// //         </div>\n\n// //         <form onSubmit={handleSubmit}>\n// //           <div className=\"form-grid\">\n// //             <div className=\"form-group\">\n// //               <label>Project Title</label>\n// //               <input\n// //                 type=\"text\"\n// //                 value={formData.title}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// //                 required\n// //               />\n// //             </div>\n\n// //             <div className=\"form-group\">\n// //               <label>Domain</label>\n// //               <select\n// //                 value={selectedDomain}\n// //                 onChange={(e) => setSelectedDomain(e.target.value)}\n// //                 required={!project}\n// //               >\n// //                 <option value=\"\">Select Domain</option>\n// //                 {domains.map(domain => (\n// //                   <option key={domain.id} value={domain.id}>{domain.title}</option>\n// //                 ))}\n// //               </select>\n// //             </div>\n\n// //             <div className=\"form-group\">\n// //               <label>Sub-Domain</label>\n// //               <select\n// //                 value={formData.subDomainId}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, subDomainId: e.target.value }))}\n// //                 required\n// //               >\n// //                 <option value=\"\">Select Sub-Domain</option>\n// //                 {subDomains.map(sub => (\n// //                   <option key={sub.id} value={sub.id}>{sub.title}</option>\n// //                 ))}\n// //               </select>\n// //             </div>\n// //           </div>\n\n// //           <div className=\"form-group\">\n// //             <label>Abstract</label>\n// //             <textarea\n// //               value={formData.abstract}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n// //               rows={4}\n// //               required\n// //             />\n// //           </div>\n\n// //           <div className=\"form-group\">\n// //             <label>Specifications</label>\n// //             <textarea\n// //               value={formData.specifications}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n// //               rows={6}\n// //               required\n// //             />\n// //           </div>\n\n// //           <div className=\"form-group\">\n// //             <label>Learning Outcomes</label>\n// //             <textarea\n// //               value={formData.learningOutcomes}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n// //               rows={4}\n// //               required\n// //             />\n// //           </div>\n\n// //           <div className=\"form-group checkbox\">\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 checked={formData.isFeatured}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n// //               />\n// //               Featured Project\n// //             </label>\n// //           </div>\n\n// //           <div className=\"modal-actions\">\n// //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// //               Cancel\n// //             </button>\n// //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// //               {loading ? 'Saving...' : 'Save'}\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // // Project Details Modal\n// // const ProjectDetailsModal = ({ project, onClose }) => {\n// //   return (\n// //     <div className=\"modal-overlay\">\n// //       <div className=\"modal large\">\n// //         <div className=\"modal-header\">\n// //           <h2>{project.title}</h2>\n// //           <button onClick={onClose}>√ó</button>\n// //         </div>\n\n// //         <div className=\"project-details\">\n// //           <div className=\"detail-section\">\n// //             <h3>Abstract</h3>\n// //             <p>{project.abstract}</p>\n// //           </div>\n\n// //           <div className=\"detail-section\">\n// //             <h3>Specifications</h3>\n// //             <p>{project.specifications}</p>\n// //           </div>\n\n// //           <div className=\"detail-section\">\n// //             <h3>Learning Outcomes</h3>\n// //             <p>{project.learningOutcomes}</p>\n// //           </div>\n\n// //           <div className=\"detail-stats\">\n// //             <div className=\"stat-item\">\n// //               <strong>Views:</strong> {project.viewCount || 0}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Leads:</strong> {project.leadCount || 0}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ProjectManagement;\n\n// // // // src/components/projects/ProjectManagement.js - NEW FILE\n// // // import React, { useState, useEffect } from 'react';\n// // // import { authService } from '../../services/authService';\n// // // import { toast } from 'react-toastify';\n// // // import {\n// // //   FiPlus,\n// // //   FiEdit,\n// // //   FiTrash2,\n// // //   FiSearch,\n// // //   FiFilter,\n// // //   FiMove,\n// // //   FiArchive,\n// // //   FiStar,\n// // //   FiEye,\n// // //   FiUsers,\n// // //   FiImage,\n// // //   FiMoreVertical,\n// // //   FiFolder,\n// // //   FiFileText\n// // // } from 'react-icons/fi';\n\n// // // const ProjectManagement = () => {\n// // //   const [projects, setProjects] = useState([]);\n// // //   const [domains, setDomains] = useState([]);\n// // //   const [subDomains, setSubDomains] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [pagination, setPagination] = useState({\n// // //     currentPage: 1,\n// // //     totalPages: 1,\n// // //     totalItems: 0\n// // //   });\n// // //   const [filters, setFilters] = useState({\n// // //     search: '',\n// // //     subDomainId: '',\n// // //     isActive: true,\n// // //     isFeatured: null,\n// // //     sortBy: 'title',\n// // //     sortOrder: 'ASC'\n// // //   });\n// // //   const [showAddModal, setShowAddModal] = useState(false);\n// // //   const [editingProject, setEditingProject] = useState(null);\n// // //   const [selectedProject, setSelectedProject] = useState(null);\n\n// // //   useEffect(() => {\n// // //     fetchInitialData();\n// // //   }, []);\n\n// // //   useEffect(() => {\n// // //     fetchProjects();\n// // //   }, [filters, pagination.currentPage]);\n\n// // //   const fetchInitialData = async () => {\n// // //     try {\n// // //       const [domainsResponse] = await Promise.all([\n// // //         authService.getDomains({ limit: 100 })\n// // //       ]);\n\n// // //       setDomains(domainsResponse.data.domains || []);\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error fetching initial data:', error);\n// // //       toast.error('Failed to load domains');\n// // //     }\n// // //   };\n\n// // //   const fetchProjects = async () => {\n// // //     try {\n// // //       setLoading(true);\n// // //       const params = {\n// // //         page: pagination.currentPage,\n// // //         limit: 12,\n// // //         ...filters\n// // //       };\n\n// // //       const response = await authService.getProjects(params);\n// // //       console.log('‚úÖ Projects fetched:', response);\n\n// // //       setProjects(response.data.projects || []);\n// // //       setPagination(response.data.pagination || pagination);\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error fetching projects:', error);\n// // //       toast.error('Failed to fetch projects');\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   const fetchSubDomains = async (domainId) => {\n// // //     try {\n// // //       const response = await authService.getLeafSubDomains(domainId);\n// // //       setSubDomains(response.data || []);\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error fetching sub-domains:', error);\n// // //     }\n// // //   };\n\n// // //   const handleSearch = (searchTerm) => {\n// // //     setFilters(prev => ({ ...prev, search: searchTerm }));\n// // //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// // //   };\n\n// // //   const handleFilterChange = (filterKey, value) => {\n// // //     setFilters(prev => ({ ...prev, [filterKey]: value }));\n// // //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// // //   };\n\n// // //   const handleAddProject = () => {\n// // //     setEditingProject(null);\n// // //     setShowAddModal(true);\n// // //   };\n\n// // //   const handleEditProject = (project) => {\n// // //     setEditingProject(project);\n// // //     setShowAddModal(true);\n// // //   };\n\n// // //   const handleDeleteProject = async (project) => {\n// // //     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       await authService.deleteProject(project.id);\n// // //       toast.success('Project deleted successfully');\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error deleting project:', error);\n// // //       toast.error('Failed to delete project');\n// // //     }\n// // //   };\n\n// // //   const handleMoveProject = async (project, newSubDomainId) => {\n// // //     try {\n// // //       await authService.moveProject(project.id, {\n// // //         newSubDomainId,\n// // //         reason: 'Moved via admin panel'\n// // //       });\n// // //       toast.success('Project moved successfully');\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error moving project:', error);\n// // //       toast.error('Failed to move project');\n// // //     }\n// // //   };\n\n// // //   const handleArchiveProject = async (project) => {\n// // //     const isArchiving = project.isActive;\n// // //     const action = isArchiving ? 'archive' : 'restore';\n\n// // //     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       await authService.archiveProject(project.id, {\n// // //         archive: isArchiving,\n// // //         reason: `${action} via admin panel`\n// // //       });\n// // //       toast.success(`Project ${action}d successfully`);\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error(`‚ùå Error ${action}ing project:`, error);\n// // //       toast.error(`Failed to ${action} project`);\n// // //     }\n// // //   };\n\n// // //   const handleToggleFeatured = async (project) => {\n// // //     try {\n// // //       await authService.updateProject(project.id, {\n// // //         isFeatured: !project.isFeatured\n// // //       });\n// // //       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error updating featured status:', error);\n// // //       toast.error('Failed to update featured status');\n// // //     }\n// // //   };\n\n// // //   if (loading && projects.length === 0) {\n// // //     return (\n// // //       <div className=\"loading-container\">\n// // //         <div className=\"loading-spinner\"></div>\n// // //         <p>Loading projects...</p>\n// // //       </div>\n// // //     );\n// // //   }\n\n// // //   return (\n// // //     <div className=\"project-management\">\n// // //       <div className=\"page-header\">\n// // //         <div className=\"header-content\">\n// // //           <h1>Project Management</h1>\n// // //           <p>Manage your project portfolio and content</p>\n// // //         </div>\n// // //         <button className=\"primary-button\" onClick={handleAddProject}>\n// // //           <FiPlus />\n// // //           Add Project\n// // //         </button>\n// // //       </div>\n\n// // //       {/* Filters and Controls */}\n// // //       <div className=\"controls-section\">\n// // //         <div className=\"search-bar\">\n// // //           <FiSearch className=\"search-icon\" />\n// // //           <input\n// // //             type=\"text\"\n// // //             placeholder=\"Search projects...\"\n// // //             value={filters.search}\n// // //             onChange={(e) => handleSearch(e.target.value)}\n// // //           />\n// // //         </div>\n\n// // //         <div className=\"filter-controls\">\n// // //           <select\n// // //             value={filters.subDomainId}\n// // //             onChange={(e) => handleFilterChange('subDomainId', e.target.value)}\n// // //           >\n// // //             <option value=\"\">All Sub-domains</option>\n// // //             {subDomains.map(sub => (\n// // //               <option key={sub.id} value={sub.id}>{sub.title}</option>\n// // //             ))}\n// // //           </select>\n\n// // //           <select\n// // //             value={filters.isFeatured === null ? '' : filters.isFeatured}\n// // //             onChange={(e) => handleFilterChange('isFeatured', \n// // //               e.target.value === '' ? null : e.target.value === 'true'\n// // //             )}\n// // //           >\n// // //             <option value=\"\">All Projects</option>\n// // //             <option value=\"true\">Featured Only</option>\n// // //             <option value=\"false\">Non-Featured</option>\n// // //           </select>\n\n// // //           <select\n// // //             value={filters.isActive}\n// // //             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n// // //           >\n// // //             <option value=\"true\">Active Projects</option>\n// // //             <option value=\"false\">Archived Projects</option>\n// // //           </select>\n\n// // //           <select\n// // //             value={filters.sortBy}\n// // //             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n// // //           >\n// // //             <option value=\"title\">Sort by Title</option>\n// // //             <option value=\"createdAt\">Sort by Date</option>\n// // //             <option value=\"leadCount\">Sort by Leads</option>\n// // //             <option value=\"viewCount\">Sort by Views</option>\n// // //           </select>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Projects Grid */}\n// // //       <div className=\"projects-grid\">\n// // //         {projects.length > 0 ? (\n// // //           projects.map((project) => (\n// // //             <ProjectCard\n// // //               key={project.id}\n// // //               project={project}\n// // //               onEdit={handleEditProject}\n// // //               onDelete={handleDeleteProject}\n// // //               onMove={handleMoveProject}\n// // //               onArchive={handleArchiveProject}\n// // //               onToggleFeatured={handleToggleFeatured}\n// // //               onViewDetails={(project) => setSelectedProject(project)}\n// // //             />\n// // //           ))\n// // //         ) : (\n// // //           <div className=\"empty-state\">\n// // //             <FiFileText size={48} />\n// // //             <h3>No projects found</h3>\n// // //             <p>Create your first project to get started</p>\n// // //             <button className=\"primary-button\" onClick={handleAddProject}>\n// // //               <FiPlus />\n// // //               Add Project\n// // //             </button>\n// // //           </div>\n// // //         )}\n// // //       </div>\n\n// // //       {/* Pagination */}\n// // //       {pagination.totalPages > 1 && (\n// // //         <div className=\"pagination\">\n// // //           <button\n// // //             disabled={pagination.currentPage === 1}\n// // //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n// // //           >\n// // //             Previous\n// // //           </button>\n\n// // //           <span className=\"page-info\">\n// // //             Page {pagination.currentPage} of {pagination.totalPages}\n// // //             ({pagination.totalItems} total)\n// // //           </span>\n\n// // //           <button\n// // //             disabled={pagination.currentPage === pagination.totalPages}\n// // //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n// // //           >\n// // //             Next\n// // //           </button>\n// // //         </div>\n// // //       )}\n\n// // //       {/* Add/Edit Modal */}\n// // //       {showAddModal && (\n// // //         <ProjectModal\n// // //           project={editingProject}\n// // //           domains={domains}\n// // //           onClose={() => setShowAddModal(false)}\n// // //           onSave={() => {\n// // //             setShowAddModal(false);\n// // //             fetchProjects();\n// // //           }}\n// // //         />\n// // //       )}\n\n// // //       {/* Project Details Modal */}\n// // //       {selectedProject && (\n// // //         <ProjectDetailsModal\n// // //           project={selectedProject}\n// // //           onClose={() => setSelectedProject(null)}\n// // //         />\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Card Component\n// // // const ProjectCard = ({ \n// // //   project, \n// // //   onEdit, \n// // //   onDelete, \n// // //   onMove, \n// // //   onArchive, \n// // //   onToggleFeatured, \n// // //   onViewDetails \n// // // }) => {\n// // //   const [showMenu, setShowMenu] = useState(false);\n\n// // //   return (\n// // //     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n// // //       <div className=\"project-header\">\n// // //         <div className=\"project-image\">\n// // //           {project.images && project.images.length > 0 ? (\n// // //             <img src={project.images[0].url} alt={project.title} />\n// // //           ) : (\n// // //             <div className=\"image-placeholder\">\n// // //               <FiImage />\n// // //             </div>\n// // //           )}\n// // //         </div>\n\n// // //         <div className=\"project-badges\">\n// // //           {project.isFeatured && (\n// // //             <span className=\"badge featured\">\n// // //               <FiStar /> Featured\n// // //             </span>\n// // //           )}\n// // //           {!project.isActive && (\n// // //             <span className=\"badge archived\">Archived</span>\n// // //           )}\n// // //         </div>\n\n// // //         <div className=\"project-menu\">\n// // //           <button onClick={() => setShowMenu(!showMenu)}>\n// // //             <FiMoreVertical />\n// // //           </button>\n// // //           {showMenu && (\n// // //             <div className=\"dropdown-menu\">\n// // //               <button onClick={() => onViewDetails(project)}>\n// // //                 <FiEye /> View Details\n// // //               </button>\n// // //               <button onClick={() => onEdit(project)}>\n// // //                 <FiEdit /> Edit\n// // //               </button>\n// // //               <button onClick={() => onToggleFeatured(project)}>\n// // //                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n// // //               </button>\n// // //               <button onClick={() => onMove(project)}>\n// // //                 <FiMove /> Move\n// // //               </button>\n// // //               <button onClick={() => onArchive(project)}>\n// // //                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n// // //               </button>\n// // //               <button onClick={() => onDelete(project)} className=\"danger\">\n// // //                 <FiTrash2 /> Delete\n// // //               </button>\n// // //             </div>\n// // //           )}\n// // //         </div>\n// // //       </div>\n\n// // //       <div className=\"project-content\">\n// // //         <h3 className=\"project-title\">{project.title}</h3>\n// // //         <p className=\"project-subdomain\">\n// // //           <FiFolder className=\"subdomain-icon\" />\n// // //           {project.subDomain?.title || 'No sub-domain'}\n// // //         </p>\n// // //         <p className=\"project-abstract\">\n// // //           {project.abstract?.substring(0, 100)}...\n// // //         </p>\n// // //       </div>\n\n// // //       <div className=\"project-footer\">\n// // //         <div className=\"project-stats\">\n// // //           <div className=\"stat\">\n// // //             <FiEye />\n// // //             <span>{project.viewCount || 0}</span>\n// // //           </div>\n// // //           <div className=\"stat\">\n// // //             <FiUsers />\n// // //             <span>{project.leadCount || 0}</span>\n// // //           </div>\n// // //         </div>\n\n// // //         <div className=\"project-actions\">\n// // //           <button onClick={() => onEdit(project)} className=\"edit-button\">\n// // //             <FiEdit />\n// // //           </button>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Modal Component (Add/Edit)\n// // // const ProjectModal = ({ project, domains, onClose, onSave }) => {\n// // //   const [formData, setFormData] = useState({\n// // //     title: project?.title || '',\n// // //     abstract: project?.abstract || '',\n// // //     specifications: project?.specifications || '',\n// // //     learningOutcomes: project?.learningOutcomes || '',\n// // //     subDomainId: project?.subDomainId || '',\n// // //     isFeatured: project?.isFeatured || false\n// // //   });\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [selectedDomain, setSelectedDomain] = useState('');\n// // //   const [subDomains, setSubDomains] = useState([]);\n\n// // //   useEffect(() => {\n// // //     if (selectedDomain) {\n// // //       fetchSubDomains(selectedDomain);\n// // //     }\n// // //   }, [selectedDomain]);\n\n// // //   const fetchSubDomains = async (domainId) => {\n// // //     try {\n// // //       const response = await authService.getLeafSubDomains(domainId);\n// // //       setSubDomains(response.data || []);\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error fetching sub-domains:', error);\n// // //     }\n// // //   };\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     setLoading(true);\n\n// // //     try {\n// // //       if (project) {\n// // //         await authService.updateProject(project.id, formData);\n// // //         toast.success('Project updated successfully');\n// // //       } else {\n// // //         await authService.createProject(formData);\n// // //         toast.success('Project created successfully');\n// // //       }\n// // //       onSave();\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error saving project:', error);\n// // //       toast.error('Failed to save project');\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div className=\"modal-overlay\">\n// // //       <div className=\"modal large\">\n// // //         <div className=\"modal-header\">\n// // //           <h2>{project ? 'Edit Project' : 'Add New Project'}</h2>\n// // //           <button onClick={onClose}>√ó</button>\n// // //         </div>\n\n// // //         <form onSubmit={handleSubmit}>\n// // //           <div className=\"form-grid\">\n// // //             <div className=\"form-group\">\n// // //               <label>Project Title</label>\n// // //               <input\n// // //                 type=\"text\"\n// // //                 value={formData.title}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // //                 required\n// // //               />\n// // //             </div>\n\n// // //             <div className=\"form-group\">\n// // //               <label>Domain</label>\n// // //               <select\n// // //                 value={selectedDomain}\n// // //                 onChange={(e) => setSelectedDomain(e.target.value)}\n// // //                 required={!project}\n// // //               >\n// // //                 <option value=\"\">Select Domain</option>\n// // //                 {domains.map(domain => (\n// // //                   <option key={domain.id} value={domain.id}>{domain.title}</option>\n// // //                 ))}\n// // //               </select>\n// // //             </div>\n\n// // //             <div className=\"form-group\">\n// // //               <label>Sub-Domain</label>\n// // //               <select\n// // //                 value={formData.subDomainId}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, subDomainId: e.target.value }))}\n// // //                 required\n// // //               >\n// // //                 <option value=\"\">Select Sub-Domain</option>\n// // //                 {subDomains.map(sub => (\n// // //                   <option key={sub.id} value={sub.id}>{sub.title}</option>\n// // //                 ))}\n// // //               </select>\n// // //             </div>\n// // //           </div>\n\n// // //           <div className=\"form-group\">\n// // //             <label>Abstract</label>\n// // //             <textarea\n// // //               value={formData.abstract}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n// // //               rows={4}\n// // //               required\n// // //             />\n// // //           </div>\n\n// // //           <div className=\"form-group\">\n// // //             <label>Specifications</label>\n// // //             <textarea\n// // //               value={formData.specifications}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n// // //               rows={6}\n// // //               required\n// // //             />\n// // //           </div>\n\n// // //           <div className=\"form-group\">\n// // //             <label>Learning Outcomes</label>\n// // //             <textarea\n// // //               value={formData.learningOutcomes}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n// // //               rows={4}\n// // //               required\n// // //             />\n// // //           </div>\n\n// // //           <div className=\"form-group checkbox\">\n// // //             <label>\n// // //               <input\n// // //                 type=\"checkbox\"\n// // //                 checked={formData.isFeatured}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n// // //               />\n// // //               Featured Project\n// // //             </label>\n// // //           </div>\n\n// // //           <div className=\"modal-actions\">\n// // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // //               Cancel\n// // //             </button>\n// // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // //               {loading ? 'Saving...' : 'Save'}\n// // //             </button>\n// // //           </div>\n// // //         </form>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Details Modal\n// // // const ProjectDetailsModal = ({ project, onClose }) => {\n// // //   return (\n// // //     <div className=\"modal-overlay\">\n// // //       <div className=\"modal large\">\n// // //         <div className=\"modal-header\">\n// // //           <h2>{project.title}</h2>\n// // //           <button onClick={onClose}>√ó</button>\n// // //         </div>\n\n// // //         <div className=\"project-details\">\n// // //           <div className=\"detail-section\">\n// // //             <h3>Abstract</h3>\n// // //             <p>{project.abstract}</p>\n// // //           </div>\n\n// // //           <div className=\"detail-section\">\n// // //             <h3>Specifications</h3>\n// // //             <p>{project.specifications}</p>\n// // //           </div>\n\n// // //           <div className=\"detail-section\">\n// // //             <h3>Learning Outcomes</h3>\n// // //             <p>{project.learningOutcomes}</p>\n// // //           </div>\n\n// // //           <div className=\"detail-stats\">\n// // //             <div className=\"stat-item\">\n// // //               <strong>Views:</strong> {project.viewCount || 0}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Leads:</strong> {project.leadCount || 0}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ProjectManagement;\nvar _c;\n$RefreshReg$(_c, \"ProjectManagement\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ProjectManagement","console","log","style","padding","children","color","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","background","borderRadius","marginTop","border","cursor","onClick","alert","_c","$RefreshReg$"],"sources":["/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/components/projects/ProjectManagement.js"],"sourcesContent":["// src/components/projects/ProjectManagement.js - SIMPLE DEBUG VERSION\nimport React from 'react';\n\nconst ProjectManagement = () => {\n  console.log('üöÄ PROJECT MANAGEMENT - Component successfully rendering!');\n  \n  return (\n    <div style={{ padding: '2rem' }}>\n      <h1 style={{ color: '#1e293b', marginBottom: '1rem' }}>\n        üéØ Project Management\n      </h1>\n      <p style={{ color: '#64748b', fontSize: '1.125rem' }}>\n        ‚úÖ Success! You've reached the Projects page.\n      </p>\n      <div style={{ \n        background: '#f1f5f9', \n        padding: '1rem', \n        borderRadius: '0.5rem',\n        marginTop: '1rem'\n      }}>\n        <h3>Debug Information:</h3>\n        <ul>\n          <li>‚úÖ ProjectManagement component loaded</li>\n          <li>‚úÖ Route /projects is working</li>\n          <li>‚úÖ Navigation successful</li>\n          <li>üéâ Ready to implement full functionality!</li>\n        </ul>\n      </div>\n      \n      <div style={{ marginTop: '2rem' }}>\n        <button \n          style={{\n            background: 'var(--primary-color)',\n            color: 'white',\n            border: 'none',\n            padding: '0.75rem 1.5rem',\n            borderRadius: '0.375rem',\n            cursor: 'pointer'\n          }}\n          onClick={() => {\n            console.log('üéØ PROJECT MANAGEMENT - Button clicked!');\n            alert('Projects page is working! üéâ');\n          }}\n        >\n          Test Button\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectManagement;\n\n\n// // src/components/projects/ProjectManagement.js - SIMPLIFIED VERSION FOR VIEWING/MANAGING PROJECTS\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { authService } from '../../services/authService';\n// import { toast } from 'react-toastify';\n// import {\n//   FiEdit,\n//   FiTrash2,\n//   FiSearch,\n//   FiFilter,\n//   FiMove,\n//   FiArchive,\n//   FiStar,\n//   FiEye,\n//   FiUsers,\n//   FiImage,\n//   FiMoreVertical,\n//   FiFolder,\n//   FiFileText,\n//   FiPlus,\n//   FiSettings,\n//   FiArrowRight\n// } from 'react-icons/fi';\n\n// const ProjectManagement = () => {\n//   console.log('üöÄ PROJECT MANAGEMENT - Component rendering/mounting');\n  \n//   const navigate = useNavigate();\n//   const [projects, setProjects] = useState([]);\n//   const [domains, setDomains] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [pagination, setPagination] = useState({\n//     currentPage: 1,\n//     totalPages: 1,\n//     totalItems: 0\n//   });\n//   const [filters, setFilters] = useState({\n//     search: '',\n//     domainId: '',\n//     isActive: true,\n//     isFeatured: null,\n//     sortBy: 'updatedAt',\n//     sortOrder: 'DESC'\n//   });\n//   const [editingProject, setEditingProject] = useState(null);\n//   const [selectedProject, setSelectedProject] = useState(null);\n//   const [showEditModal, setShowEditModal] = useState(false);\n\n//   console.log('üìä PROJECT MANAGEMENT - Current state:', {\n//     projectsCount: projects.length,\n//     loading,\n//     pagination,\n//     filters,\n//     editingProject: !!editingProject,\n//     selectedProject: !!selectedProject\n//   });\n\n//   useEffect(() => {\n//     console.log('üîÑ PROJECT MANAGEMENT - useEffect triggered');\n//     fetchInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     console.log('üîÑ PROJECT MANAGEMENT - Filters or pagination changed');\n//     fetchProjects();\n//   }, [filters, pagination.currentPage]);\n\n//   const fetchInitialData = async () => {\n//     try {\n//       console.log('üì° INITIAL DATA - Fetching domains...');\n//       const domainsResponse = await authService.getDomains({ limit: 100 });\n//       console.log('‚úÖ INITIAL DATA - Domains fetched:', domainsResponse.data);\n      \n//       setDomains(domainsResponse.data?.domains || []);\n//     } catch (error) {\n//       console.error('‚ùå INITIAL DATA - Error fetching domains:', error);\n//       toast.error('Failed to load domains');\n//     }\n//   };\n\n//   const fetchProjects = async () => {\n//     try {\n//       setLoading(true);\n      \n//       // Clean up filters - remove empty strings and null values\n//       const cleanFilters = {};\n//       Object.keys(filters).forEach(key => {\n//         const value = filters[key];\n//         if (value !== '' && value !== null && value !== undefined) {\n//           cleanFilters[key] = value;\n//         }\n//       });\n      \n//       const params = {\n//         page: pagination.currentPage,\n//         limit: 12,\n//         ...cleanFilters\n//       };\n      \n//       console.log('üì° PROJECT FETCH - Starting with params:', params);\n      \n//       const response = await authService.getProjects(params);\n//       console.log('‚úÖ PROJECT FETCH - Response:', response.data);\n      \n//       setProjects(response.data.projects || []);\n//       setPagination(response.data.pagination || pagination);\n      \n//     } catch (error) {\n//       console.error('‚ùå PROJECT FETCH - Error:', error);\n//       toast.error('Failed to fetch projects');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = (searchTerm) => {\n//     console.log('üîç PROJECT SEARCH - Search term:', searchTerm);\n//     setFilters(prev => ({ ...prev, search: searchTerm }));\n//     setPagination(prev => ({ ...prev, currentPage: 1 }));\n//   };\n\n//   const handleFilterChange = (filterKey, value) => {\n//     console.log('üéõÔ∏è PROJECT FILTER - Changed:', filterKey, '=', value);\n//     setFilters(prev => ({ ...prev, [filterKey]: value }));\n//     setPagination(prev => ({ ...prev, currentPage: 1 }));\n//   };\n\n//   const handleEditProject = (project) => {\n//     console.log('‚úèÔ∏è PROJECT EDIT - Editing:', project.title);\n//     setEditingProject(project);\n//     setShowEditModal(true);\n//   };\n\n//   const handleDeleteProject = async (project) => {\n//     console.log('üóëÔ∏è PROJECT DELETE - Requesting deletion:', project.title);\n    \n//     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n//       console.log('‚ùå PROJECT DELETE - Cancelled by user');\n//       return;\n//     }\n\n//     try {\n//       console.log('üì° PROJECT DELETE - API call for:', project.id);\n//       await authService.deleteProject(project.id);\n//       console.log('‚úÖ PROJECT DELETE - Success');\n//       toast.success('Project deleted successfully');\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('‚ùå PROJECT DELETE - Error:', error);\n//       toast.error('Failed to delete project');\n//     }\n//   };\n\n//   const handleArchiveProject = async (project) => {\n//     const isArchiving = project.isActive;\n//     const action = isArchiving ? 'archive' : 'restore';\n    \n//     console.log('üìÅ PROJECT ARCHIVE - Action:', action, 'for:', project.title);\n    \n//     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n//       return;\n//     }\n\n//     try {\n//       await authService.archiveProject(project.id, {\n//         archive: isArchiving,\n//         reason: `${action} via admin panel`\n//       });\n//       console.log('‚úÖ PROJECT ARCHIVE - Success');\n//       toast.success(`Project ${action}d successfully`);\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('‚ùå PROJECT ARCHIVE - Error:', error);\n//       toast.error(`Failed to ${action} project`);\n//     }\n//   };\n\n//   const handleToggleFeatured = async (project) => {\n//     console.log('‚≠ê PROJECT FEATURED - Toggle for:', project.title);\n    \n//     try {\n//       await authService.updateProject(project.id, {\n//         isFeatured: !project.isFeatured\n//       });\n//       console.log('‚úÖ PROJECT FEATURED - Success');\n//       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('‚ùå PROJECT FEATURED - Error:', error);\n//       toast.error('Failed to update featured status');\n//     }\n//   };\n\n//   const navigateToCreateProject = () => {\n//     console.log('üåê NAVIGATION - Redirecting to domains for project creation');\n//     navigate('/domains');\n//     toast.info('Navigate to Domains ‚Üí SubDomains to create new projects');\n//   };\n\n//   if (loading && projects.length === 0) {\n//     return (\n//       <div className=\"loading-container\">\n//         <div className=\"loading-spinner\"></div>\n//         <p>Loading projects...</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"project-management\">\n//       <div className=\"page-header\">\n//         <div className=\"header-content\">\n//           <h1>Project Management</h1>\n//           <p>View and manage your existing projects</p>\n//         </div>\n//         <div className=\"header-actions\">\n//           <button \n//             className=\"secondary-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             <FiSettings />\n//             Manage Domains\n//           </button>\n//           <button \n//             className=\"primary-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             <FiPlus />\n//             Create New Project\n//             <FiArrowRight />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Info Banner */}\n//       <div className=\"info-banner\">\n//         <div className=\"banner-content\">\n//           <FiFileText className=\"banner-icon\" />\n//           <div className=\"banner-text\">\n//             <strong>Want to create a new project?</strong>\n//             <p>Go to <strong>Domains ‚Üí SubDomains</strong> and click \"Add Project\" on any leaf subdomain for better organization.</p>\n//           </div>\n//           <button \n//             className=\"banner-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             Go to Domains <FiArrowRight />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Filters and Controls */}\n//       <div className=\"controls-section\">\n//         <div className=\"search-bar\">\n//           <FiSearch className=\"search-icon\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search projects...\"\n//             value={filters.search}\n//             onChange={(e) => handleSearch(e.target.value)}\n//           />\n//         </div>\n        \n//         <div className=\"filter-controls\">\n//           <select\n//             value={filters.domainId}\n//             onChange={(e) => handleFilterChange('domainId', e.target.value)}\n//           >\n//             <option value=\"\">All Domains</option>\n//             {domains.map(domain => (\n//               <option key={domain.id} value={domain.id}>{domain.title}</option>\n//             ))}\n//           </select>\n          \n//           <select\n//             value={filters.isFeatured === null ? '' : filters.isFeatured}\n//             onChange={(e) => handleFilterChange('isFeatured', \n//               e.target.value === '' ? null : e.target.value === 'true'\n//             )}\n//           >\n//             <option value=\"\">All Projects</option>\n//             <option value=\"true\">Featured Only</option>\n//             <option value=\"false\">Non-Featured</option>\n//           </select>\n          \n//           <select\n//             value={filters.isActive}\n//             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n//           >\n//             <option value=\"true\">Active Projects</option>\n//             <option value=\"false\">Archived Projects</option>\n//           </select>\n          \n//           <select\n//             value={filters.sortBy}\n//             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n//           >\n//             <option value=\"updatedAt\">Sort by Last Updated</option>\n//             <option value=\"title\">Sort by Title</option>\n//             <option value=\"createdAt\">Sort by Date Created</option>\n//             <option value=\"leadCount\">Sort by Leads</option>\n//             <option value=\"viewCount\">Sort by Views</option>\n//           </select>\n//         </div>\n//       </div>\n\n//       {/* Projects Grid */}\n//       <div className=\"projects-grid\">\n//         {projects.length > 0 ? (\n//           projects.map((project) => (\n//             <ProjectCard\n//               key={project.id}\n//               project={project}\n//               onEdit={handleEditProject}\n//               onDelete={handleDeleteProject}\n//               onArchive={handleArchiveProject}\n//               onToggleFeatured={handleToggleFeatured}\n//               onViewDetails={(project) => setSelectedProject(project)}\n//             />\n//           ))\n//         ) : (\n//           <div className=\"empty-state\">\n//             <FiFileText size={48} />\n//             <h3>No projects found</h3>\n//             <p>Projects are created from Domain ‚Üí SubDomain pages for better organization</p>\n//             <div className=\"empty-state-actions\">\n//               <button className=\"primary-button\" onClick={navigateToCreateProject}>\n//                 <FiSettings />\n//                 Go to Domains\n//               </button>\n//               <p className=\"help-text\">\n//                 üí° Tip: Organize your projects by creating domains and subdomains first\n//               </p>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Pagination */}\n//       {pagination.totalPages > 1 && (\n//         <div className=\"pagination\">\n//           <button\n//             disabled={pagination.currentPage === 1}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n//           >\n//             Previous\n//           </button>\n          \n//           <span className=\"page-info\">\n//             Page {pagination.currentPage} of {pagination.totalPages}\n//             ({pagination.totalItems} total)\n//           </span>\n          \n//           <button\n//             disabled={pagination.currentPage === pagination.totalPages}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n//           >\n//             Next\n//           </button>\n//         </div>\n//       )}\n\n//       {/* Edit Project Modal */}\n//       {showEditModal && editingProject && (\n//         <ProjectEditModal\n//           project={editingProject}\n//           onClose={() => {\n//             setShowEditModal(false);\n//             setEditingProject(null);\n//           }}\n//           onSave={() => {\n//             setShowEditModal(false);\n//             setEditingProject(null);\n//             fetchProjects();\n//           }}\n//         />\n//       )}\n\n//       {/* Project Details Modal */}\n//       {selectedProject && (\n//         <ProjectDetailsModal\n//           project={selectedProject}\n//           onClose={() => setSelectedProject(null)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // Project Card Component\n// const ProjectCard = ({ \n//   project, \n//   onEdit, \n//   onDelete, \n//   onArchive, \n//   onToggleFeatured, \n//   onViewDetails \n// }) => {\n//   const [showMenu, setShowMenu] = useState(false);\n\n//   return (\n//     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n//       <div className=\"project-header\">\n//         <div className=\"project-image\">\n//           {project.images && project.images.length > 0 ? (\n//             <img src={project.images[0].url} alt={project.title} />\n//           ) : (\n//             <div className=\"image-placeholder\">\n//               <FiImage />\n//             </div>\n//           )}\n//         </div>\n        \n//         <div className=\"project-badges\">\n//           {project.isFeatured && (\n//             <span className=\"badge featured\">\n//               <FiStar /> Featured\n//             </span>\n//           )}\n//           {!project.isActive && (\n//             <span className=\"badge archived\">Archived</span>\n//           )}\n//         </div>\n        \n//         <div className=\"project-menu\">\n//           <button onClick={() => setShowMenu(!showMenu)}>\n//             <FiMoreVertical />\n//           </button>\n//           {showMenu && (\n//             <div className=\"dropdown-menu\">\n//               <button onClick={() => onViewDetails(project)}>\n//                 <FiEye /> View Details\n//               </button>\n//               <button onClick={() => onEdit(project)}>\n//                 <FiEdit /> Edit\n//               </button>\n//               <button onClick={() => onToggleFeatured(project)}>\n//                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n//               </button>\n//               <button onClick={() => onArchive(project)}>\n//                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n//               </button>\n//               <button onClick={() => onDelete(project)} className=\"danger\">\n//                 <FiTrash2 /> Delete\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n      \n//       <div className=\"project-content\">\n//         <h3 className=\"project-title\">{project.title}</h3>\n//         <p className=\"project-subdomain\">\n//           <FiFolder className=\"subdomain-icon\" />\n//           {project.subDomain?.domain?.title} ‚Üí {project.subDomain?.title || 'No sub-domain'}\n//         </p>\n//         <p className=\"project-abstract\">\n//           {project.abstract?.substring(0, 100)}...\n//         </p>\n//       </div>\n      \n//       <div className=\"project-footer\">\n//         <div className=\"project-stats\">\n//           <div className=\"stat\">\n//             <FiEye />\n//             <span>{project.viewCount || 0}</span>\n//           </div>\n//           <div className=\"stat\">\n//             <FiUsers />\n//             <span>{project.leadCount || 0}</span>\n//           </div>\n//         </div>\n        \n//         <div className=\"project-actions\">\n//           <button onClick={() => onEdit(project)} className=\"edit-button\">\n//             <FiEdit />\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Project Edit Modal Component\n// const ProjectEditModal = ({ project, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     title: project?.title || '',\n//     abstract: project?.abstract || '',\n//     specifications: project?.specifications || '',\n//     learningOutcomes: project?.learningOutcomes || '',\n//     isFeatured: project?.isFeatured || false\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   console.log('üìù PROJECT EDIT MODAL - Project:', project.title);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     try {\n//       console.log('üíæ PROJECT UPDATE - Starting with data:', formData);\n//       await authService.updateProject(project.id, formData);\n//       console.log('‚úÖ PROJECT UPDATE - Success');\n//       toast.success('Project updated successfully');\n//       onSave();\n//     } catch (error) {\n//       console.error('‚ùå PROJECT UPDATE - Error:', error);\n//       toast.error('Failed to update project');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal large\">\n//         <div className=\"modal-header\">\n//           <h2>Edit Project: {project.title}</h2>\n//           <button onClick={onClose}>√ó</button>\n//         </div>\n        \n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label>Project Title</label>\n//             <input\n//               type=\"text\"\n//               value={formData.title}\n//               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"modal-info\">\n//             <strong>Domain:</strong> {project.subDomain?.domain?.title || 'Unknown'}<br />\n//             <strong>SubDomain:</strong> {project.subDomain?.title || 'Unknown'}<br />\n//             <span className=\"info-note\">\n//               üí° To move this project to a different domain/subdomain, contact your administrator\n//             </span>\n//           </div>\n          \n//           <div className=\"form-group\">\n//             <label>Abstract</label>\n//             <textarea\n//               value={formData.abstract}\n//               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n//               rows={4}\n//               required\n//             />\n//           </div>\n          \n//           <div className=\"form-group\">\n//             <label>Specifications</label>\n//             <textarea\n//               value={formData.specifications}\n//               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n//               rows={6}\n//               required\n//             />\n//           </div>\n          \n//           <div className=\"form-group\">\n//             <label>Learning Outcomes</label>\n//             <textarea\n//               value={formData.learningOutcomes}\n//               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n//               rows={4}\n//               required\n//             />\n//           </div>\n          \n//           <div className=\"form-group checkbox\">\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 checked={formData.isFeatured}\n//                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n//               />\n//               Featured Project\n//             </label>\n//           </div>\n          \n//           <div className=\"modal-actions\">\n//             <button type=\"button\" onClick={onClose} disabled={loading}>\n//               Cancel\n//             </button>\n//             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n//               {loading ? 'Updating...' : 'Update Project'}\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Project Details Modal\n// const ProjectDetailsModal = ({ project, onClose }) => {\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal large\">\n//         <div className=\"modal-header\">\n//           <h2>{project.title}</h2>\n//           <button onClick={onClose}>√ó</button>\n//         </div>\n        \n//         <div className=\"project-details\">\n//           <div className=\"detail-section\">\n//             <h3>Location</h3>\n//             <p><strong>Domain:</strong> {project.subDomain?.domain?.title || 'Unknown'}</p>\n//             <p><strong>SubDomain:</strong> {project.subDomain?.title || 'Unknown'}</p>\n//           </div>\n          \n//           <div className=\"detail-section\">\n//             <h3>Abstract</h3>\n//             <p>{project.abstract}</p>\n//           </div>\n          \n//           <div className=\"detail-section\">\n//             <h3>Specifications</h3>\n//             <p>{project.specifications}</p>\n//           </div>\n          \n//           <div className=\"detail-section\">\n//             <h3>Learning Outcomes</h3>\n//             <p>{project.learningOutcomes}</p>\n//           </div>\n          \n//           <div className=\"detail-stats\">\n//             <div className=\"stat-item\">\n//               <strong>Views:</strong> {project.viewCount || 0}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Leads:</strong> {project.leadCount || 0}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ProjectManagement;\n\n\n// // // src/components/projects/ProjectManagement.js - FIXED WITH LOGGING\n// // import React, { useState, useEffect } from 'react';\n// // import { authService } from '../../services/authService';\n// // import { toast } from 'react-toastify';\n// // import {\n// //   FiPlus,\n// //   FiEdit,\n// //   FiTrash2,\n// //   FiSearch,\n// //   FiFilter,\n// //   FiMove,\n// //   FiArchive,\n// //   FiStar,\n// //   FiEye,\n// //   FiUsers,\n// //   FiImage,\n// //   FiMoreVertical,\n// //   FiFolder,\n// //   FiFileText\n// // } from 'react-icons/fi';\n\n// // const ProjectManagement = () => {\n// //   const [projects, setProjects] = useState([]);\n// //   const [domains, setDomains] = useState([]);\n// //   const [subDomains, setSubDomains] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [pagination, setPagination] = useState({\n// //     currentPage: 1,\n// //     totalPages: 1,\n// //     totalItems: 0\n// //   });\n// //   const [filters, setFilters] = useState({\n// //     search: '',\n// //     subDomainId: '',\n// //     isActive: true,\n// //     isFeatured: null,\n// //     sortBy: 'title',\n// //     sortOrder: 'ASC'\n// //   });\n// //   const [showAddModal, setShowAddModal] = useState(false);\n// //   const [editingProject, setEditingProject] = useState(null);\n// //   const [selectedProject, setSelectedProject] = useState(null);\n\n// //   useEffect(() => {\n// //     console.log('üöÄ ProjectManagement component mounted');\n// //     fetchInitialData();\n// //   }, []);\n\n// //   useEffect(() => {\n// //     console.log('üîÑ Filters or pagination changed:', { filters, currentPage: pagination.currentPage });\n// //     fetchProjects();\n// //   }, [filters, pagination.currentPage]);\n\n// //   const fetchInitialData = async () => {\n// //     try {\n// //       console.log('üì° Fetching initial data (domains)...');\n// //       const [domainsResponse] = await Promise.all([\n// //         authService.getDomains({ limit: 100 })\n// //       ]);\n      \n// //       console.log('‚úÖ Domains fetched:', domainsResponse);\n// //       setDomains(domainsResponse.data.domains || []);\n// //     } catch (error) {\n// //       console.error('‚ùå Error fetching initial data:', error);\n// //       toast.error('Failed to load domains');\n// //     }\n// //   };\n\n// //   const fetchProjects = async () => {\n// //     try {\n// //       setLoading(true);\n      \n// //       // Clean up filters - remove empty strings and null values\n// //       const cleanFilters = {};\n// //       Object.keys(filters).forEach(key => {\n// //         const value = filters[key];\n// //         // Only add non-empty values to the params\n// //         if (value !== '' && value !== null && value !== undefined) {\n// //           cleanFilters[key] = value;\n// //         }\n// //       });\n      \n// //       const params = {\n// //         page: pagination.currentPage,\n// //         limit: 12,\n// //         ...cleanFilters\n// //       };\n      \n// //       console.log('üì° Fetching projects with params:', params);\n// //       console.log('üîç Raw filters before cleaning:', filters);\n// //       console.log('üßπ Cleaned filters:', cleanFilters);\n      \n// //       const response = await authService.getProjects(params);\n// //       console.log('‚úÖ Projects API response:', response);\n      \n// //       setProjects(response.data.projects || []);\n// //       setPagination(response.data.pagination || pagination);\n      \n// //       console.log('üìä Projects set:', response.data.projects?.length || 0, 'projects');\n// //       console.log('üìÑ Pagination set:', response.data.pagination);\n      \n// //     } catch (error) {\n// //       console.error('‚ùå Error fetching projects:', error);\n// //       console.error('‚ùå Error details:', {\n// //         message: error.message,\n// //         response: error.response?.data,\n// //         status: error.response?.status,\n// //         config: error.config\n// //       });\n// //       toast.error('Failed to fetch projects');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const fetchSubDomains = async (domainId) => {\n// //     try {\n// //       console.log('üì° Fetching subdomains for domain:', domainId);\n// //       const response = await authService.getLeafSubDomains(domainId);\n// //       console.log('‚úÖ Subdomains fetched:', response);\n// //       setSubDomains(response.data || []);\n// //     } catch (error) {\n// //       console.error('‚ùå Error fetching sub-domains:', error);\n// //     }\n// //   };\n\n// //   const handleSearch = (searchTerm) => {\n// //     console.log('üîç Search term changed:', searchTerm);\n// //     setFilters(prev => ({ ...prev, search: searchTerm }));\n// //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// //   };\n\n// //   const handleFilterChange = (filterKey, value) => {\n// //     console.log('üéõÔ∏è Filter changed:', filterKey, '=', value);\n// //     setFilters(prev => ({ ...prev, [filterKey]: value }));\n// //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// //   };\n\n// //   const handleDomainChange = (domainId) => {\n// //     console.log('üè¢ Domain changed:', domainId);\n// //     if (domainId) {\n// //       fetchSubDomains(domainId);\n// //     } else {\n// //       setSubDomains([]);\n// //     }\n// //     // Reset subdomain filter when domain changes\n// //     setFilters(prev => ({ ...prev, subDomainId: '' }));\n// //   };\n\n// //   const handleAddProject = () => {\n// //     console.log('‚ûï Add project clicked');\n// //     setEditingProject(null);\n// //     setShowAddModal(true);\n// //   };\n\n// //   const handleEditProject = (project) => {\n// //     console.log('‚úèÔ∏è Edit project clicked:', project.id, project.title);\n// //     setEditingProject(project);\n// //     setShowAddModal(true);\n// //   };\n\n// //   const handleDeleteProject = async (project) => {\n// //     console.log('üóëÔ∏è Delete project requested:', project.id, project.title);\n    \n// //     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n// //       console.log('‚ùå Delete cancelled by user');\n// //       return;\n// //     }\n\n// //     try {\n// //       console.log('üì° Deleting project:', project.id);\n// //       await authService.deleteProject(project.id);\n// //       console.log('‚úÖ Project deleted successfully');\n// //       toast.success('Project deleted successfully');\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('‚ùå Error deleting project:', error);\n// //       toast.error('Failed to delete project');\n// //     }\n// //   };\n\n// //   const handleMoveProject = async (project, newSubDomainId) => {\n// //     console.log('üì¶ Move project requested:', project.id, 'to subdomain:', newSubDomainId);\n    \n// //     try {\n// //       await authService.moveProject(project.id, {\n// //         newSubDomainId,\n// //         reason: 'Moved via admin panel'\n// //       });\n// //       console.log('‚úÖ Project moved successfully');\n// //       toast.success('Project moved successfully');\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('‚ùå Error moving project:', error);\n// //       toast.error('Failed to move project');\n// //     }\n// //   };\n\n// //   const handleArchiveProject = async (project) => {\n// //     const isArchiving = project.isActive;\n// //     const action = isArchiving ? 'archive' : 'restore';\n    \n// //     console.log('üìÅ Archive/restore project requested:', project.id, action);\n    \n// //     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n// //       console.log('‚ùå Archive/restore cancelled by user');\n// //       return;\n// //     }\n\n// //     try {\n// //       await authService.archiveProject(project.id, {\n// //         archive: isArchiving,\n// //         reason: `${action} via admin panel`\n// //       });\n// //       console.log('‚úÖ Project archived/restored successfully');\n// //       toast.success(`Project ${action}d successfully`);\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error(`‚ùå Error ${action}ing project:`, error);\n// //       toast.error(`Failed to ${action} project`);\n// //     }\n// //   };\n\n// //   const handleToggleFeatured = async (project) => {\n// //     console.log('‚≠ê Toggle featured requested:', project.id, 'current:', project.isFeatured);\n    \n// //     try {\n// //       await authService.updateProject(project.id, {\n// //         isFeatured: !project.isFeatured\n// //       });\n// //       console.log('‚úÖ Featured status updated successfully');\n// //       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('‚ùå Error updating featured status:', error);\n// //       toast.error('Failed to update featured status');\n// //     }\n// //   };\n\n// //   if (loading && projects.length === 0) {\n// //     return (\n// //       <div className=\"loading-container\">\n// //         <div className=\"loading-spinner\"></div>\n// //         <p>Loading projects...</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"project-management\">\n// //       <div className=\"page-header\">\n// //         <div className=\"header-content\">\n// //           <h1>Project Management</h1>\n// //           <p>Manage your project portfolio and content</p>\n// //         </div>\n// //         <button className=\"primary-button\" onClick={handleAddProject}>\n// //           <FiPlus />\n// //           Add Project\n// //         </button>\n// //       </div>\n\n// //       {/* Filters and Controls */}\n// //       <div className=\"controls-section\">\n// //         <div className=\"search-bar\">\n// //           <FiSearch className=\"search-icon\" />\n// //           <input\n// //             type=\"text\"\n// //             placeholder=\"Search projects...\"\n// //             value={filters.search}\n// //             onChange={(e) => handleSearch(e.target.value)}\n// //           />\n// //         </div>\n        \n// //         <div className=\"filter-controls\">\n// //           {/* Domain Selector */}\n// //           <select\n// //             onChange={(e) => handleDomainChange(e.target.value)}\n// //           >\n// //             <option value=\"\">Select Domain</option>\n// //             {domains.map(domain => (\n// //               <option key={domain.id} value={domain.id}>{domain.title}</option>\n// //             ))}\n// //           </select>\n          \n// //           {/* Subdomain Selector */}\n// //           <select\n// //             value={filters.subDomainId}\n// //             onChange={(e) => handleFilterChange('subDomainId', e.target.value)}\n// //             disabled={subDomains.length === 0}\n// //           >\n// //             <option value=\"\">All Sub-domains</option>\n// //             {subDomains.map(sub => (\n// //               <option key={sub.id} value={sub.id}>{sub.title}</option>\n// //             ))}\n// //           </select>\n          \n// //           <select\n// //             value={filters.isFeatured === null ? '' : filters.isFeatured}\n// //             onChange={(e) => handleFilterChange('isFeatured', \n// //               e.target.value === '' ? null : e.target.value === 'true'\n// //             )}\n// //           >\n// //             <option value=\"\">All Projects</option>\n// //             <option value=\"true\">Featured Only</option>\n// //             <option value=\"false\">Non-Featured</option>\n// //           </select>\n          \n// //           <select\n// //             value={filters.isActive}\n// //             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n// //           >\n// //             <option value=\"true\">Active Projects</option>\n// //             <option value=\"false\">Archived Projects</option>\n// //           </select>\n          \n// //           <select\n// //             value={filters.sortBy}\n// //             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n// //           >\n// //             <option value=\"title\">Sort by Title</option>\n// //             <option value=\"createdAt\">Sort by Date</option>\n// //             <option value=\"leadCount\">Sort by Leads</option>\n// //             <option value=\"viewCount\">Sort by Views</option>\n// //           </select>\n// //         </div>\n// //       </div>\n\n// //       {/* Projects Grid */}\n// //       <div className=\"projects-grid\">\n// //         {projects.length > 0 ? (\n// //           projects.map((project) => (\n// //             <ProjectCard\n// //               key={project.id}\n// //               project={project}\n// //               onEdit={handleEditProject}\n// //               onDelete={handleDeleteProject}\n// //               onMove={handleMoveProject}\n// //               onArchive={handleArchiveProject}\n// //               onToggleFeatured={handleToggleFeatured}\n// //               onViewDetails={(project) => setSelectedProject(project)}\n// //             />\n// //           ))\n// //         ) : (\n// //           <div className=\"empty-state\">\n// //             <FiFileText size={48} />\n// //             <h3>No projects found</h3>\n// //             <p>Create your first project to get started</p>\n// //             <button className=\"primary-button\" onClick={handleAddProject}>\n// //               <FiPlus />\n// //               Add Project\n// //             </button>\n// //           </div>\n// //         )}\n// //       </div>\n\n// //       {/* Pagination */}\n// //       {pagination.totalPages > 1 && (\n// //         <div className=\"pagination\">\n// //           <button\n// //             disabled={pagination.currentPage === 1}\n// //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n// //           >\n// //             Previous\n// //           </button>\n          \n// //           <span className=\"page-info\">\n// //             Page {pagination.currentPage} of {pagination.totalPages}\n// //             ({pagination.totalItems} total)\n// //           </span>\n          \n// //           <button\n// //             disabled={pagination.currentPage === pagination.totalPages}\n// //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n// //           >\n// //             Next\n// //           </button>\n// //         </div>\n// //       )}\n\n// //       {/* Add/Edit Modal */}\n// //       {showAddModal && (\n// //         <ProjectModal\n// //           project={editingProject}\n// //           domains={domains}\n// //           onClose={() => setShowAddModal(false)}\n// //           onSave={() => {\n// //             setShowAddModal(false);\n// //             fetchProjects();\n// //           }}\n// //         />\n// //       )}\n\n// //       {/* Project Details Modal */}\n// //       {selectedProject && (\n// //         <ProjectDetailsModal\n// //           project={selectedProject}\n// //           onClose={() => setSelectedProject(null)}\n// //         />\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // // Project Card Component\n// // const ProjectCard = ({ \n// //   project, \n// //   onEdit, \n// //   onDelete, \n// //   onMove, \n// //   onArchive, \n// //   onToggleFeatured, \n// //   onViewDetails \n// // }) => {\n// //   const [showMenu, setShowMenu] = useState(false);\n\n// //   return (\n// //     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n// //       <div className=\"project-header\">\n// //         <div className=\"project-image\">\n// //           {project.images && project.images.length > 0 ? (\n// //             <img src={project.images[0].url} alt={project.title} />\n// //           ) : (\n// //             <div className=\"image-placeholder\">\n// //               <FiImage />\n// //             </div>\n// //           )}\n// //         </div>\n        \n// //         <div className=\"project-badges\">\n// //           {project.isFeatured && (\n// //             <span className=\"badge featured\">\n// //               <FiStar /> Featured\n// //             </span>\n// //           )}\n// //           {!project.isActive && (\n// //             <span className=\"badge archived\">Archived</span>\n// //           )}\n// //         </div>\n        \n// //         <div className=\"project-menu\">\n// //           <button onClick={() => setShowMenu(!showMenu)}>\n// //             <FiMoreVertical />\n// //           </button>\n// //           {showMenu && (\n// //             <div className=\"dropdown-menu\">\n// //               <button onClick={() => onViewDetails(project)}>\n// //                 <FiEye /> View Details\n// //               </button>\n// //               <button onClick={() => onEdit(project)}>\n// //                 <FiEdit /> Edit\n// //               </button>\n// //               <button onClick={() => onToggleFeatured(project)}>\n// //                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n// //               </button>\n// //               <button onClick={() => onMove(project)}>\n// //                 <FiMove /> Move\n// //               </button>\n// //               <button onClick={() => onArchive(project)}>\n// //                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n// //               </button>\n// //               <button onClick={() => onDelete(project)} className=\"danger\">\n// //                 <FiTrash2 /> Delete\n// //               </button>\n// //             </div>\n// //           )}\n// //         </div>\n// //       </div>\n      \n// //       <div className=\"project-content\">\n// //         <h3 className=\"project-title\">{project.title}</h3>\n// //         <p className=\"project-subdomain\">\n// //           <FiFolder className=\"subdomain-icon\" />\n// //           {project.subDomain?.title || 'No sub-domain'}\n// //         </p>\n// //         <p className=\"project-abstract\">\n// //           {project.abstract?.substring(0, 100)}...\n// //         </p>\n// //       </div>\n      \n// //       <div className=\"project-footer\">\n// //         <div className=\"project-stats\">\n// //           <div className=\"stat\">\n// //             <FiEye />\n// //             <span>{project.viewCount || 0}</span>\n// //           </div>\n// //           <div className=\"stat\">\n// //             <FiUsers />\n// //             <span>{project.leadCount || 0}</span>\n// //           </div>\n// //         </div>\n        \n// //         <div className=\"project-actions\">\n// //           <button onClick={() => onEdit(project)} className=\"edit-button\">\n// //             <FiEdit />\n// //           </button>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // // Project Modal Component (Add/Edit)\n// // const ProjectModal = ({ project, domains, onClose, onSave }) => {\n// //   const [formData, setFormData] = useState({\n// //     title: project?.title || '',\n// //     abstract: project?.abstract || '',\n// //     specifications: project?.specifications || '',\n// //     learningOutcomes: project?.learningOutcomes || '',\n// //     subDomainId: project?.subDomainId || '',\n// //     isFeatured: project?.isFeatured || false\n// //   });\n// //   const [loading, setLoading] = useState(false);\n// //   const [selectedDomain, setSelectedDomain] = useState('');\n// //   const [subDomains, setSubDomains] = useState([]);\n\n// //   useEffect(() => {\n// //     if (selectedDomain) {\n// //       fetchSubDomains(selectedDomain);\n// //     }\n// //   }, [selectedDomain]);\n\n// //   const fetchSubDomains = async (domainId) => {\n// //     try {\n// //       console.log('üì° Modal: Fetching subdomains for domain:', domainId);\n// //       const response = await authService.getLeafSubDomains(domainId);\n// //       console.log('‚úÖ Modal: Subdomains fetched:', response);\n// //       setSubDomains(response.data || []);\n// //     } catch (error) {\n// //       console.error('‚ùå Modal: Error fetching sub-domains:', error);\n// //     }\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     setLoading(true);\n\n// //     console.log('üíæ Modal: Submitting form data:', formData);\n\n// //     try {\n// //       if (project) {\n// //         console.log('üì° Modal: Updating project:', project.id);\n// //         await authService.updateProject(project.id, formData);\n// //         console.log('‚úÖ Modal: Project updated successfully');\n// //         toast.success('Project updated successfully');\n// //       } else {\n// //         console.log('üì° Modal: Creating new project');\n// //         await authService.createProject(formData);\n// //         console.log('‚úÖ Modal: Project created successfully');\n// //         toast.success('Project created successfully');\n// //       }\n// //       onSave();\n// //     } catch (error) {\n// //       console.error('‚ùå Modal: Error saving project:', error);\n// //       toast.error('Failed to save project');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"modal-overlay\">\n// //       <div className=\"modal large\">\n// //         <div className=\"modal-header\">\n// //           <h2>{project ? 'Edit Project' : 'Add New Project'}</h2>\n// //           <button onClick={onClose}>√ó</button>\n// //         </div>\n        \n// //         <form onSubmit={handleSubmit}>\n// //           <div className=\"form-grid\">\n// //             <div className=\"form-group\">\n// //               <label>Project Title</label>\n// //               <input\n// //                 type=\"text\"\n// //                 value={formData.title}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// //                 required\n// //               />\n// //             </div>\n            \n// //             <div className=\"form-group\">\n// //               <label>Domain</label>\n// //               <select\n// //                 value={selectedDomain}\n// //                 onChange={(e) => setSelectedDomain(e.target.value)}\n// //                 required={!project}\n// //               >\n// //                 <option value=\"\">Select Domain</option>\n// //                 {domains.map(domain => (\n// //                   <option key={domain.id} value={domain.id}>{domain.title}</option>\n// //                 ))}\n// //               </select>\n// //             </div>\n            \n// //             <div className=\"form-group\">\n// //               <label>Sub-Domain</label>\n// //               <select\n// //                 value={formData.subDomainId}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, subDomainId: e.target.value }))}\n// //                 required\n// //               >\n// //                 <option value=\"\">Select Sub-Domain</option>\n// //                 {subDomains.map(sub => (\n// //                   <option key={sub.id} value={sub.id}>{sub.title}</option>\n// //                 ))}\n// //               </select>\n// //             </div>\n// //           </div>\n          \n// //           <div className=\"form-group\">\n// //             <label>Abstract</label>\n// //             <textarea\n// //               value={formData.abstract}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n// //               rows={4}\n// //               required\n// //             />\n// //           </div>\n          \n// //           <div className=\"form-group\">\n// //             <label>Specifications</label>\n// //             <textarea\n// //               value={formData.specifications}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n// //               rows={6}\n// //               required\n// //             />\n// //           </div>\n          \n// //           <div className=\"form-group\">\n// //             <label>Learning Outcomes</label>\n// //             <textarea\n// //               value={formData.learningOutcomes}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n// //               rows={4}\n// //               required\n// //             />\n// //           </div>\n          \n// //           <div className=\"form-group checkbox\">\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 checked={formData.isFeatured}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n// //               />\n// //               Featured Project\n// //             </label>\n// //           </div>\n          \n// //           <div className=\"modal-actions\">\n// //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// //               Cancel\n// //             </button>\n// //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// //               {loading ? 'Saving...' : 'Save'}\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // // Project Details Modal\n// // const ProjectDetailsModal = ({ project, onClose }) => {\n// //   return (\n// //     <div className=\"modal-overlay\">\n// //       <div className=\"modal large\">\n// //         <div className=\"modal-header\">\n// //           <h2>{project.title}</h2>\n// //           <button onClick={onClose}>√ó</button>\n// //         </div>\n        \n// //         <div className=\"project-details\">\n// //           <div className=\"detail-section\">\n// //             <h3>Abstract</h3>\n// //             <p>{project.abstract}</p>\n// //           </div>\n          \n// //           <div className=\"detail-section\">\n// //             <h3>Specifications</h3>\n// //             <p>{project.specifications}</p>\n// //           </div>\n          \n// //           <div className=\"detail-section\">\n// //             <h3>Learning Outcomes</h3>\n// //             <p>{project.learningOutcomes}</p>\n// //           </div>\n          \n// //           <div className=\"detail-stats\">\n// //             <div className=\"stat-item\">\n// //               <strong>Views:</strong> {project.viewCount || 0}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Leads:</strong> {project.leadCount || 0}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ProjectManagement;\n\n\n// // // // src/components/projects/ProjectManagement.js - NEW FILE\n// // // import React, { useState, useEffect } from 'react';\n// // // import { authService } from '../../services/authService';\n// // // import { toast } from 'react-toastify';\n// // // import {\n// // //   FiPlus,\n// // //   FiEdit,\n// // //   FiTrash2,\n// // //   FiSearch,\n// // //   FiFilter,\n// // //   FiMove,\n// // //   FiArchive,\n// // //   FiStar,\n// // //   FiEye,\n// // //   FiUsers,\n// // //   FiImage,\n// // //   FiMoreVertical,\n// // //   FiFolder,\n// // //   FiFileText\n// // // } from 'react-icons/fi';\n\n// // // const ProjectManagement = () => {\n// // //   const [projects, setProjects] = useState([]);\n// // //   const [domains, setDomains] = useState([]);\n// // //   const [subDomains, setSubDomains] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [pagination, setPagination] = useState({\n// // //     currentPage: 1,\n// // //     totalPages: 1,\n// // //     totalItems: 0\n// // //   });\n// // //   const [filters, setFilters] = useState({\n// // //     search: '',\n// // //     subDomainId: '',\n// // //     isActive: true,\n// // //     isFeatured: null,\n// // //     sortBy: 'title',\n// // //     sortOrder: 'ASC'\n// // //   });\n// // //   const [showAddModal, setShowAddModal] = useState(false);\n// // //   const [editingProject, setEditingProject] = useState(null);\n// // //   const [selectedProject, setSelectedProject] = useState(null);\n\n// // //   useEffect(() => {\n// // //     fetchInitialData();\n// // //   }, []);\n\n// // //   useEffect(() => {\n// // //     fetchProjects();\n// // //   }, [filters, pagination.currentPage]);\n\n// // //   const fetchInitialData = async () => {\n// // //     try {\n// // //       const [domainsResponse] = await Promise.all([\n// // //         authService.getDomains({ limit: 100 })\n// // //       ]);\n      \n// // //       setDomains(domainsResponse.data.domains || []);\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error fetching initial data:', error);\n// // //       toast.error('Failed to load domains');\n// // //     }\n// // //   };\n\n// // //   const fetchProjects = async () => {\n// // //     try {\n// // //       setLoading(true);\n// // //       const params = {\n// // //         page: pagination.currentPage,\n// // //         limit: 12,\n// // //         ...filters\n// // //       };\n      \n// // //       const response = await authService.getProjects(params);\n// // //       console.log('‚úÖ Projects fetched:', response);\n      \n// // //       setProjects(response.data.projects || []);\n// // //       setPagination(response.data.pagination || pagination);\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error fetching projects:', error);\n// // //       toast.error('Failed to fetch projects');\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   const fetchSubDomains = async (domainId) => {\n// // //     try {\n// // //       const response = await authService.getLeafSubDomains(domainId);\n// // //       setSubDomains(response.data || []);\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error fetching sub-domains:', error);\n// // //     }\n// // //   };\n\n// // //   const handleSearch = (searchTerm) => {\n// // //     setFilters(prev => ({ ...prev, search: searchTerm }));\n// // //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// // //   };\n\n// // //   const handleFilterChange = (filterKey, value) => {\n// // //     setFilters(prev => ({ ...prev, [filterKey]: value }));\n// // //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// // //   };\n\n// // //   const handleAddProject = () => {\n// // //     setEditingProject(null);\n// // //     setShowAddModal(true);\n// // //   };\n\n// // //   const handleEditProject = (project) => {\n// // //     setEditingProject(project);\n// // //     setShowAddModal(true);\n// // //   };\n\n// // //   const handleDeleteProject = async (project) => {\n// // //     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       await authService.deleteProject(project.id);\n// // //       toast.success('Project deleted successfully');\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error deleting project:', error);\n// // //       toast.error('Failed to delete project');\n// // //     }\n// // //   };\n\n// // //   const handleMoveProject = async (project, newSubDomainId) => {\n// // //     try {\n// // //       await authService.moveProject(project.id, {\n// // //         newSubDomainId,\n// // //         reason: 'Moved via admin panel'\n// // //       });\n// // //       toast.success('Project moved successfully');\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error moving project:', error);\n// // //       toast.error('Failed to move project');\n// // //     }\n// // //   };\n\n// // //   const handleArchiveProject = async (project) => {\n// // //     const isArchiving = project.isActive;\n// // //     const action = isArchiving ? 'archive' : 'restore';\n    \n// // //     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       await authService.archiveProject(project.id, {\n// // //         archive: isArchiving,\n// // //         reason: `${action} via admin panel`\n// // //       });\n// // //       toast.success(`Project ${action}d successfully`);\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error(`‚ùå Error ${action}ing project:`, error);\n// // //       toast.error(`Failed to ${action} project`);\n// // //     }\n// // //   };\n\n// // //   const handleToggleFeatured = async (project) => {\n// // //     try {\n// // //       await authService.updateProject(project.id, {\n// // //         isFeatured: !project.isFeatured\n// // //       });\n// // //       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error updating featured status:', error);\n// // //       toast.error('Failed to update featured status');\n// // //     }\n// // //   };\n\n// // //   if (loading && projects.length === 0) {\n// // //     return (\n// // //       <div className=\"loading-container\">\n// // //         <div className=\"loading-spinner\"></div>\n// // //         <p>Loading projects...</p>\n// // //       </div>\n// // //     );\n// // //   }\n\n// // //   return (\n// // //     <div className=\"project-management\">\n// // //       <div className=\"page-header\">\n// // //         <div className=\"header-content\">\n// // //           <h1>Project Management</h1>\n// // //           <p>Manage your project portfolio and content</p>\n// // //         </div>\n// // //         <button className=\"primary-button\" onClick={handleAddProject}>\n// // //           <FiPlus />\n// // //           Add Project\n// // //         </button>\n// // //       </div>\n\n// // //       {/* Filters and Controls */}\n// // //       <div className=\"controls-section\">\n// // //         <div className=\"search-bar\">\n// // //           <FiSearch className=\"search-icon\" />\n// // //           <input\n// // //             type=\"text\"\n// // //             placeholder=\"Search projects...\"\n// // //             value={filters.search}\n// // //             onChange={(e) => handleSearch(e.target.value)}\n// // //           />\n// // //         </div>\n        \n// // //         <div className=\"filter-controls\">\n// // //           <select\n// // //             value={filters.subDomainId}\n// // //             onChange={(e) => handleFilterChange('subDomainId', e.target.value)}\n// // //           >\n// // //             <option value=\"\">All Sub-domains</option>\n// // //             {subDomains.map(sub => (\n// // //               <option key={sub.id} value={sub.id}>{sub.title}</option>\n// // //             ))}\n// // //           </select>\n          \n// // //           <select\n// // //             value={filters.isFeatured === null ? '' : filters.isFeatured}\n// // //             onChange={(e) => handleFilterChange('isFeatured', \n// // //               e.target.value === '' ? null : e.target.value === 'true'\n// // //             )}\n// // //           >\n// // //             <option value=\"\">All Projects</option>\n// // //             <option value=\"true\">Featured Only</option>\n// // //             <option value=\"false\">Non-Featured</option>\n// // //           </select>\n          \n// // //           <select\n// // //             value={filters.isActive}\n// // //             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n// // //           >\n// // //             <option value=\"true\">Active Projects</option>\n// // //             <option value=\"false\">Archived Projects</option>\n// // //           </select>\n          \n// // //           <select\n// // //             value={filters.sortBy}\n// // //             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n// // //           >\n// // //             <option value=\"title\">Sort by Title</option>\n// // //             <option value=\"createdAt\">Sort by Date</option>\n// // //             <option value=\"leadCount\">Sort by Leads</option>\n// // //             <option value=\"viewCount\">Sort by Views</option>\n// // //           </select>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Projects Grid */}\n// // //       <div className=\"projects-grid\">\n// // //         {projects.length > 0 ? (\n// // //           projects.map((project) => (\n// // //             <ProjectCard\n// // //               key={project.id}\n// // //               project={project}\n// // //               onEdit={handleEditProject}\n// // //               onDelete={handleDeleteProject}\n// // //               onMove={handleMoveProject}\n// // //               onArchive={handleArchiveProject}\n// // //               onToggleFeatured={handleToggleFeatured}\n// // //               onViewDetails={(project) => setSelectedProject(project)}\n// // //             />\n// // //           ))\n// // //         ) : (\n// // //           <div className=\"empty-state\">\n// // //             <FiFileText size={48} />\n// // //             <h3>No projects found</h3>\n// // //             <p>Create your first project to get started</p>\n// // //             <button className=\"primary-button\" onClick={handleAddProject}>\n// // //               <FiPlus />\n// // //               Add Project\n// // //             </button>\n// // //           </div>\n// // //         )}\n// // //       </div>\n\n// // //       {/* Pagination */}\n// // //       {pagination.totalPages > 1 && (\n// // //         <div className=\"pagination\">\n// // //           <button\n// // //             disabled={pagination.currentPage === 1}\n// // //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n// // //           >\n// // //             Previous\n// // //           </button>\n          \n// // //           <span className=\"page-info\">\n// // //             Page {pagination.currentPage} of {pagination.totalPages}\n// // //             ({pagination.totalItems} total)\n// // //           </span>\n          \n// // //           <button\n// // //             disabled={pagination.currentPage === pagination.totalPages}\n// // //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n// // //           >\n// // //             Next\n// // //           </button>\n// // //         </div>\n// // //       )}\n\n// // //       {/* Add/Edit Modal */}\n// // //       {showAddModal && (\n// // //         <ProjectModal\n// // //           project={editingProject}\n// // //           domains={domains}\n// // //           onClose={() => setShowAddModal(false)}\n// // //           onSave={() => {\n// // //             setShowAddModal(false);\n// // //             fetchProjects();\n// // //           }}\n// // //         />\n// // //       )}\n\n// // //       {/* Project Details Modal */}\n// // //       {selectedProject && (\n// // //         <ProjectDetailsModal\n// // //           project={selectedProject}\n// // //           onClose={() => setSelectedProject(null)}\n// // //         />\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Card Component\n// // // const ProjectCard = ({ \n// // //   project, \n// // //   onEdit, \n// // //   onDelete, \n// // //   onMove, \n// // //   onArchive, \n// // //   onToggleFeatured, \n// // //   onViewDetails \n// // // }) => {\n// // //   const [showMenu, setShowMenu] = useState(false);\n\n// // //   return (\n// // //     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n// // //       <div className=\"project-header\">\n// // //         <div className=\"project-image\">\n// // //           {project.images && project.images.length > 0 ? (\n// // //             <img src={project.images[0].url} alt={project.title} />\n// // //           ) : (\n// // //             <div className=\"image-placeholder\">\n// // //               <FiImage />\n// // //             </div>\n// // //           )}\n// // //         </div>\n        \n// // //         <div className=\"project-badges\">\n// // //           {project.isFeatured && (\n// // //             <span className=\"badge featured\">\n// // //               <FiStar /> Featured\n// // //             </span>\n// // //           )}\n// // //           {!project.isActive && (\n// // //             <span className=\"badge archived\">Archived</span>\n// // //           )}\n// // //         </div>\n        \n// // //         <div className=\"project-menu\">\n// // //           <button onClick={() => setShowMenu(!showMenu)}>\n// // //             <FiMoreVertical />\n// // //           </button>\n// // //           {showMenu && (\n// // //             <div className=\"dropdown-menu\">\n// // //               <button onClick={() => onViewDetails(project)}>\n// // //                 <FiEye /> View Details\n// // //               </button>\n// // //               <button onClick={() => onEdit(project)}>\n// // //                 <FiEdit /> Edit\n// // //               </button>\n// // //               <button onClick={() => onToggleFeatured(project)}>\n// // //                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n// // //               </button>\n// // //               <button onClick={() => onMove(project)}>\n// // //                 <FiMove /> Move\n// // //               </button>\n// // //               <button onClick={() => onArchive(project)}>\n// // //                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n// // //               </button>\n// // //               <button onClick={() => onDelete(project)} className=\"danger\">\n// // //                 <FiTrash2 /> Delete\n// // //               </button>\n// // //             </div>\n// // //           )}\n// // //         </div>\n// // //       </div>\n      \n// // //       <div className=\"project-content\">\n// // //         <h3 className=\"project-title\">{project.title}</h3>\n// // //         <p className=\"project-subdomain\">\n// // //           <FiFolder className=\"subdomain-icon\" />\n// // //           {project.subDomain?.title || 'No sub-domain'}\n// // //         </p>\n// // //         <p className=\"project-abstract\">\n// // //           {project.abstract?.substring(0, 100)}...\n// // //         </p>\n// // //       </div>\n      \n// // //       <div className=\"project-footer\">\n// // //         <div className=\"project-stats\">\n// // //           <div className=\"stat\">\n// // //             <FiEye />\n// // //             <span>{project.viewCount || 0}</span>\n// // //           </div>\n// // //           <div className=\"stat\">\n// // //             <FiUsers />\n// // //             <span>{project.leadCount || 0}</span>\n// // //           </div>\n// // //         </div>\n        \n// // //         <div className=\"project-actions\">\n// // //           <button onClick={() => onEdit(project)} className=\"edit-button\">\n// // //             <FiEdit />\n// // //           </button>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Modal Component (Add/Edit)\n// // // const ProjectModal = ({ project, domains, onClose, onSave }) => {\n// // //   const [formData, setFormData] = useState({\n// // //     title: project?.title || '',\n// // //     abstract: project?.abstract || '',\n// // //     specifications: project?.specifications || '',\n// // //     learningOutcomes: project?.learningOutcomes || '',\n// // //     subDomainId: project?.subDomainId || '',\n// // //     isFeatured: project?.isFeatured || false\n// // //   });\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [selectedDomain, setSelectedDomain] = useState('');\n// // //   const [subDomains, setSubDomains] = useState([]);\n\n// // //   useEffect(() => {\n// // //     if (selectedDomain) {\n// // //       fetchSubDomains(selectedDomain);\n// // //     }\n// // //   }, [selectedDomain]);\n\n// // //   const fetchSubDomains = async (domainId) => {\n// // //     try {\n// // //       const response = await authService.getLeafSubDomains(domainId);\n// // //       setSubDomains(response.data || []);\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error fetching sub-domains:', error);\n// // //     }\n// // //   };\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     setLoading(true);\n\n// // //     try {\n// // //       if (project) {\n// // //         await authService.updateProject(project.id, formData);\n// // //         toast.success('Project updated successfully');\n// // //       } else {\n// // //         await authService.createProject(formData);\n// // //         toast.success('Project created successfully');\n// // //       }\n// // //       onSave();\n// // //     } catch (error) {\n// // //       console.error('‚ùå Error saving project:', error);\n// // //       toast.error('Failed to save project');\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div className=\"modal-overlay\">\n// // //       <div className=\"modal large\">\n// // //         <div className=\"modal-header\">\n// // //           <h2>{project ? 'Edit Project' : 'Add New Project'}</h2>\n// // //           <button onClick={onClose}>√ó</button>\n// // //         </div>\n        \n// // //         <form onSubmit={handleSubmit}>\n// // //           <div className=\"form-grid\">\n// // //             <div className=\"form-group\">\n// // //               <label>Project Title</label>\n// // //               <input\n// // //                 type=\"text\"\n// // //                 value={formData.title}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // //                 required\n// // //               />\n// // //             </div>\n            \n// // //             <div className=\"form-group\">\n// // //               <label>Domain</label>\n// // //               <select\n// // //                 value={selectedDomain}\n// // //                 onChange={(e) => setSelectedDomain(e.target.value)}\n// // //                 required={!project}\n// // //               >\n// // //                 <option value=\"\">Select Domain</option>\n// // //                 {domains.map(domain => (\n// // //                   <option key={domain.id} value={domain.id}>{domain.title}</option>\n// // //                 ))}\n// // //               </select>\n// // //             </div>\n            \n// // //             <div className=\"form-group\">\n// // //               <label>Sub-Domain</label>\n// // //               <select\n// // //                 value={formData.subDomainId}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, subDomainId: e.target.value }))}\n// // //                 required\n// // //               >\n// // //                 <option value=\"\">Select Sub-Domain</option>\n// // //                 {subDomains.map(sub => (\n// // //                   <option key={sub.id} value={sub.id}>{sub.title}</option>\n// // //                 ))}\n// // //               </select>\n// // //             </div>\n// // //           </div>\n          \n// // //           <div className=\"form-group\">\n// // //             <label>Abstract</label>\n// // //             <textarea\n// // //               value={formData.abstract}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n// // //               rows={4}\n// // //               required\n// // //             />\n// // //           </div>\n          \n// // //           <div className=\"form-group\">\n// // //             <label>Specifications</label>\n// // //             <textarea\n// // //               value={formData.specifications}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n// // //               rows={6}\n// // //               required\n// // //             />\n// // //           </div>\n          \n// // //           <div className=\"form-group\">\n// // //             <label>Learning Outcomes</label>\n// // //             <textarea\n// // //               value={formData.learningOutcomes}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n// // //               rows={4}\n// // //               required\n// // //             />\n// // //           </div>\n          \n// // //           <div className=\"form-group checkbox\">\n// // //             <label>\n// // //               <input\n// // //                 type=\"checkbox\"\n// // //                 checked={formData.isFeatured}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n// // //               />\n// // //               Featured Project\n// // //             </label>\n// // //           </div>\n          \n// // //           <div className=\"modal-actions\">\n// // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // //               Cancel\n// // //             </button>\n// // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // //               {loading ? 'Saving...' : 'Save'}\n// // //             </button>\n// // //           </div>\n// // //         </form>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Details Modal\n// // // const ProjectDetailsModal = ({ project, onClose }) => {\n// // //   return (\n// // //     <div className=\"modal-overlay\">\n// // //       <div className=\"modal large\">\n// // //         <div className=\"modal-header\">\n// // //           <h2>{project.title}</h2>\n// // //           <button onClick={onClose}>√ó</button>\n// // //         </div>\n        \n// // //         <div className=\"project-details\">\n// // //           <div className=\"detail-section\">\n// // //             <h3>Abstract</h3>\n// // //             <p>{project.abstract}</p>\n// // //           </div>\n          \n// // //           <div className=\"detail-section\">\n// // //             <h3>Specifications</h3>\n// // //             <p>{project.specifications}</p>\n// // //           </div>\n          \n// // //           <div className=\"detail-section\">\n// // //             <h3>Learning Outcomes</h3>\n// // //             <p>{project.learningOutcomes}</p>\n// // //           </div>\n          \n// // //           <div className=\"detail-stats\">\n// // //             <div className=\"stat-item\">\n// // //               <strong>Views:</strong> {project.viewCount || 0}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Leads:</strong> {project.leadCount || 0}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ProjectManagement;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC9BC,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;EAExE,oBACEH,OAAA;IAAKI,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9BN,OAAA;MAAII,KAAK,EAAE;QAAEG,KAAK,EAAE,SAAS;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAF,QAAA,EAAC;IAEvD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLZ,OAAA;MAAGI,KAAK,EAAE;QAAEG,KAAK,EAAE,SAAS;QAAEM,QAAQ,EAAE;MAAW,CAAE;MAAAP,QAAA,EAAC;IAEtD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJZ,OAAA;MAAKI,KAAK,EAAE;QACVU,UAAU,EAAE,SAAS;QACrBT,OAAO,EAAE,MAAM;QACfU,YAAY,EAAE,QAAQ;QACtBC,SAAS,EAAE;MACb,CAAE;MAAAV,QAAA,gBACAN,OAAA;QAAAM,QAAA,EAAI;MAAkB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BZ,OAAA;QAAAM,QAAA,gBACEN,OAAA;UAAAM,QAAA,EAAI;QAAoC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7CZ,OAAA;UAAAM,QAAA,EAAI;QAA4B;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrCZ,OAAA;UAAAM,QAAA,EAAI;QAAuB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChCZ,OAAA;UAAAM,QAAA,EAAI;QAAyC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAENZ,OAAA;MAAKI,KAAK,EAAE;QAAEY,SAAS,EAAE;MAAO,CAAE;MAAAV,QAAA,eAChCN,OAAA;QACEI,KAAK,EAAE;UACLU,UAAU,EAAE,sBAAsB;UAClCP,KAAK,EAAE,OAAO;UACdU,MAAM,EAAE,MAAM;UACdZ,OAAO,EAAE,gBAAgB;UACzBU,YAAY,EAAE,UAAU;UACxBG,MAAM,EAAE;QACV,CAAE;QACFC,OAAO,EAAEA,CAAA,KAAM;UACbjB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;UACtDiB,KAAK,CAAC,8BAA8B,CAAC;QACvC,CAAE;QAAAd,QAAA,EACH;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACS,EAAA,GA9CIpB,iBAAiB;AAgDvB,eAAeA,iBAAiB;;AAGhoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}