{"ast":null,"code":"var _jsxFileName = \"/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { authService } from '../services/authService';\nimport { cookieUtils } from '../utils/cookieUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const initializeAuth = useCallback(async () => {\n    console.log('🔍 AuthContext: Starting authentication initialization');\n    try {\n      cookieUtils.debugCookies();\n      const token = cookieUtils.getToken();\n      const userData = cookieUtils.getUser();\n      console.log('📦 Auth data check:', {\n        hasToken: !!token,\n        hasUserData: !!userData,\n        tokenLength: token ? token.length : 0,\n        userDataKeys: userData ? Object.keys(userData) : []\n      });\n      if (token && userData) {\n        console.log('✅ AuthContext: Found auth data in cookies, setting authenticated state');\n        authService.setAuthToken(token);\n        setUser(userData);\n        setIsAuthenticated(true);\n        console.log('✅ AuthContext: User authenticated from cookies:', userData);\n      } else {\n        console.log('❌ AuthContext: No valid auth data found in cookies');\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n    } catch (error) {\n      console.error('❌ AuthContext: Error initializing auth:', error);\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    console.log('🔄 AuthContext: Setting loading to false');\n    setLoading(false);\n  }, []);\n  useEffect(() => {\n    console.log('🔄 AuthProvider: Component mounted, initializing authentication');\n    initializeAuth();\n  }, [initializeAuth]);\n  const login = async credentials => {\n    console.log('🔐 AuthContext: Login attempt started');\n    try {\n      const response = await authService.login(credentials);\n      console.log('✅ Login API Response - Full Structure:', response);\n      console.log('✅ Response.data:', response.data);\n      console.log('✅ Response.data keys:', Object.keys(response.data));\n\n      // Check different possible response structures\n      let token, userData;\n      if (response.data.token && response.data.user) {\n        token = response.data.token;\n        userData = response.data.user;\n      } else if (response.data.data && response.data.data.token && response.data.data.user) {\n        token = response.data.data.token;\n        userData = response.data.data.user;\n      } else if (response.data.accessToken || response.data.authToken) {\n        token = response.data.accessToken || response.data.authToken;\n        userData = response.data.userData || response.data.user || response.data.data;\n      } else {\n        // Try to find token-like fields\n        for (const key in response.data) {\n          const value = response.data[key];\n          if (typeof value === 'string' && value.length > 20) {\n            token = value;\n          }\n          if (typeof value === 'object' && value !== null && (value.id || value.email || value.name)) {\n            userData = value;\n          }\n        }\n      }\n      console.log('🔍 Extracted data:', {\n        hasToken: !!token,\n        tokenPreview: token ? token.substring(0, 20) + '...' : 'None',\n        hasUserData: !!userData,\n        userData: userData\n      });\n      if (!token || !userData) {\n        console.error('❌ Could not extract token or user data from response');\n        return {\n          success: false,\n          message: 'Invalid login response structure'\n        };\n      }\n      cookieUtils.setToken(token);\n      cookieUtils.setUser(userData);\n      authService.setAuthToken(token);\n      setUser(userData);\n      setIsAuthenticated(true);\n      console.log('✅ Login successful, user authenticated:', userData);\n      return {\n        success: true,\n        data: {\n          token,\n          user: userData\n        }\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('❌ Login failed:', error);\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n      };\n    }\n  };\n  const signup = async userData => {\n    console.log('📝 AuthContext: Signup attempt started');\n    try {\n      const response = await authService.signup(userData);\n      console.log('✅ Signup API Response:', response.data);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('❌ Signup failed:', error);\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Signup failed'\n      };\n    }\n  };\n  const logout = () => {\n    console.log('🚪 AuthContext: Logout initiated');\n    cookieUtils.clearAuth();\n    authService.removeAuthToken();\n    setUser(null);\n    setIsAuthenticated(false);\n    authService.logout().catch(error => {\n      console.error('❌ Logout API call failed:', error);\n    });\n    console.log('✅ Logout completed');\n  };\n\n  // Step 1: Request password reset OTP\n  const forgotPassword = async email => {\n    console.log('🔑 AuthContext: Forgot password attempt started');\n    console.log('📤 Forgot password request data:', {\n      email\n    });\n    try {\n      const response = await authService.forgotPassword(email);\n      console.log('✅ Forgot password API Response:', response.data);\n\n      // Based on your API: { success: true, message: \"Password reset OTP sent to your email\", data: { token: \"...\", message: \"...\", expiresIn: \"10 minutes\" } }\n      if (response.data.success) {\n        return {\n          success: true,\n          data: {\n            token: response.data.data.token,\n            message: response.data.message,\n            expiresIn: response.data.data.expiresIn === \"10 minutes\" ? 600 : 600 // Convert to seconds\n          }\n        };\n      } else {\n        return {\n          success: false,\n          message: response.data.message || 'Failed to send OTP'\n        };\n      }\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      console.error('❌ Forgot password failed:', error);\n      console.error('❌ Error response:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n      return {\n        success: false,\n        message: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to send reset email'\n      };\n    }\n  };\n\n  // Step 2: Reset password with OTP\n  const resetPassword = async resetData => {\n    console.log('🔄 AuthContext: Reset password attempt started');\n    console.log('📤 Reset password request data:', {\n      hasToken: !!resetData.token,\n      tokenPreview: resetData.token ? resetData.token.substring(0, 20) + '...' : 'None',\n      hasOtp: !!resetData.otp,\n      otpValue: resetData.otp,\n      newPassword: '***',\n      confirmPassword: '***'\n    });\n    try {\n      const response = await authService.resetPassword(resetData);\n      console.log('✅ Reset password API Response:', response.data);\n      if (response.data.success) {\n        return {\n          success: true,\n          data: response.data\n        };\n      } else {\n        return {\n          success: false,\n          message: response.data.message || 'Password reset failed'\n        };\n      }\n    } catch (error) {\n      var _error$response5, _error$response6, _error$response6$data;\n      console.error('❌ Reset password failed:', error);\n      console.error('❌ Error response:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data);\n      return {\n        success: false,\n        message: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Password reset failed'\n      };\n    }\n  };\n\n  // Change Password (for authenticated users)\n  const changePassword = async passwordData => {\n    console.log('🔐 AuthContext: Change password step 1 - Requesting OTP');\n    console.log('📤 Change password request data:', {\n      currentPassword: '***',\n      newPassword: '***',\n      confirmPassword: '***'\n    });\n    try {\n      const response = await authService.changePassword(passwordData);\n      console.log('✅ Change password step 1 - RAW RESPONSE:');\n      console.log('📄 response:', response);\n      console.log('📄 response.data:', response.data);\n      console.log('📄 response.data type:', typeof response.data);\n      console.log('📄 response.data keys:', response.data ? Object.keys(response.data) : 'No keys');\n\n      // Check if response.data.data exists\n      if (response.data && response.data.data) {\n        console.log('📄 response.data.data:', response.data.data);\n        console.log('📄 response.data.data type:', typeof response.data.data);\n        console.log('📄 response.data.data keys:', Object.keys(response.data.data));\n        if (response.data.data.token) {\n          console.log('📄 FOUND TOKEN in response.data.data.token:', response.data.data.token);\n          console.log('📄 Token type:', typeof response.data.data.token);\n          console.log('📄 Token length:', response.data.data.token.length);\n          console.log('📄 Full token value:', response.data.data.token);\n        }\n      }\n\n      // Based on your API structure: { success: true, message: \"...\", data: { token: \"...\", message: \"...\", expiresIn: 600 } }\n      if (response.data.success) {\n        const {\n          data\n        } = response.data;\n\n        // CRITICAL: Log the exact token being extracted\n        console.log('🔑 EXTRACTING TOKEN:');\n        console.log('🔑 data object:', data);\n        console.log('🔑 data.token exists:', !!(data !== null && data !== void 0 && data.token));\n        console.log('🔑 data.token value:', data === null || data === void 0 ? void 0 : data.token);\n        console.log('🔑 data.token type:', typeof (data === null || data === void 0 ? void 0 : data.token));\n        const extractedToken = data.token;\n        console.log('✅ OTP sent successfully, FINAL TOKEN CHECK:', {\n          hasToken: !!extractedToken,\n          tokenPreview: extractedToken ? extractedToken.substring(0, 50) + '...' : 'None',\n          fullToken: extractedToken,\n          // Show full token for debugging\n          tokenLength: extractedToken ? extractedToken.length : 0,\n          expiresIn: data === null || data === void 0 ? void 0 : data.expiresIn,\n          message: data === null || data === void 0 ? void 0 : data.message\n        });\n        return {\n          success: true,\n          data: {\n            token: extractedToken,\n            message: response.data.message,\n            expiresIn: data.expiresIn,\n            sentTo: (user === null || user === void 0 ? void 0 : user.email) || 'your registered email'\n          }\n        };\n      } else {\n        console.error('❌ API returned success: false');\n        return {\n          success: false,\n          message: response.data.message || 'Failed to send OTP'\n        };\n      }\n    } catch (error) {\n      var _error$response7, _error$response8, _error$response8$data, _error$response9, _error$response9$data;\n      console.error('❌ Change password step 1 failed:', error);\n      console.error('❌ Error response:', (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data);\n\n      // Handle validation errors\n      if ((_error$response8 = error.response) !== null && _error$response8 !== void 0 && (_error$response8$data = _error$response8.data) !== null && _error$response8$data !== void 0 && _error$response8$data.errors) {\n        const validationErrors = error.response.data.errors;\n        const errorMessage = validationErrors.map(err => err.message).join(', ');\n        return {\n          success: false,\n          message: errorMessage,\n          validationErrors: validationErrors\n        };\n      }\n      return {\n        success: false,\n        message: ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to send OTP. Please check your current password.'\n      };\n    }\n  };\n\n  // Verify OTP for change password\n  const verifyPasswordChangeOTP = async otpData => {\n    console.log('🔐 AuthContext: Change password step 2 - Verifying OTP');\n    console.log('📤 OTP verification data RECEIVED:', {\n      hasToken: !!otpData.token,\n      tokenPreview: otpData.token ? otpData.token.substring(0, 50) + '...' : 'None',\n      fullTokenForDebugging: otpData.token,\n      // Show full token for debugging\n      tokenType: typeof otpData.token,\n      tokenLength: otpData.token ? otpData.token.length : 0,\n      hasOtp: !!otpData.otp,\n      otpValue: otpData.otp,\n      otpType: typeof otpData.otp\n    });\n\n    // Ensure we have all required fields\n    if (!otpData.otp) {\n      console.error('❌ OTP is missing');\n      return {\n        success: false,\n        message: 'OTP is required'\n      };\n    }\n    if (!otpData.token) {\n      console.error('❌ Token is missing');\n      return {\n        success: false,\n        message: 'Token is missing. Please try again from the beginning.'\n      };\n    }\n\n    // Validate token format (should be a non-empty string)\n    if (typeof otpData.token !== 'string' || otpData.token.trim() === '') {\n      console.error('❌ Token is not a valid string:', otpData.token);\n      return {\n        success: false,\n        message: 'Invalid token format. Please try again from the beginning.'\n      };\n    }\n    try {\n      console.log('📤 SENDING TO API - Final verification:');\n      const requestData = {\n        token: otpData.token,\n        otp: otpData.otp\n      };\n      console.log('📤 Request data being sent:', requestData);\n      console.log('📤 JSON stringified:', JSON.stringify(requestData, null, 2));\n      const response = await authService.verifyPasswordChangeOTP(requestData);\n      console.log('✅ OTP verification response received:');\n      console.log('📥 Full response:', response);\n      console.log('📥 Response data:', response.data);\n\n      // Based on your API structure: { success: true, message: \"Password changed successfully\" }\n      if (response.data.success) {\n        console.log('✅ Backend confirmed success');\n        return {\n          success: true,\n          data: response.data\n        };\n      } else {\n        console.error('❌ Backend returned success: false');\n        return {\n          success: false,\n          message: response.data.message || 'Invalid OTP'\n        };\n      }\n    } catch (error) {\n      var _error$response0, _error$response1, _error$response10, _error$response10$dat;\n      console.error('❌ OTP verification failed - DETAILED ERROR:');\n      console.error('❌ Error object:', error);\n      console.error('❌ Error message:', error.message);\n      console.error('❌ Error response:', error.response);\n      console.error('❌ Error response data:', (_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data);\n      console.error('❌ Error status:', (_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.status);\n      return {\n        success: false,\n        message: ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Invalid OTP. Please try again.'\n      };\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    signup,\n    logout,\n    forgotPassword,\n    resetPassword,\n    changePassword,\n    verifyPasswordChangeOTP\n  };\n  console.log('🔄 AuthContext: Current state:', {\n    isAuthenticated,\n    hasUser: !!user,\n    loading,\n    userName: (user === null || user === void 0 ? void 0 : user.name) || 'None'\n  });\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 5\n  }, this);\n};\n\n// import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n// import { authService } from '../services/authService';\n// import { cookieUtils } from '../utils/cookieUtils';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n//   const initializeAuth = useCallback(async () => {\n//     console.log('🔍 AuthContext: Starting authentication initialization');\n\n//     try {\n//       cookieUtils.debugCookies();\n\n//       const token = cookieUtils.getToken();\n//       const userData = cookieUtils.getUser();\n\n//       console.log('📦 Auth data check:', { \n//         hasToken: !!token, \n//         hasUserData: !!userData,\n//         tokenLength: token ? token.length : 0,\n//         userDataKeys: userData ? Object.keys(userData) : []\n//       });\n\n//       if (token && userData) {\n//         console.log('✅ AuthContext: Found auth data in cookies, setting authenticated state');\n//         authService.setAuthToken(token);\n//         setUser(userData);\n//         setIsAuthenticated(true);\n//         console.log('✅ AuthContext: User authenticated from cookies:', userData);\n//       } else {\n//         console.log('❌ AuthContext: No valid auth data found in cookies');\n//         setUser(null);\n//         setIsAuthenticated(false);\n//       }\n//     } catch (error) {\n//       console.error('❌ AuthContext: Error initializing auth:', error);\n//       setUser(null);\n//       setIsAuthenticated(false);\n//     }\n\n//     console.log('🔄 AuthContext: Setting loading to false');\n//     setLoading(false);\n//   }, []);\n\n//   useEffect(() => {\n//     console.log('🔄 AuthProvider: Component mounted, initializing authentication');\n//     initializeAuth();\n//   }, [initializeAuth]);\n\n//   const login = async (credentials) => {\n//     console.log('🔐 AuthContext: Login attempt started');\n\n//     try {\n//       const response = await authService.login(credentials);\n//       console.log('✅ Login API Response - Full Structure:', response);\n//       console.log('✅ Response.data:', response.data);\n//       console.log('✅ Response.data keys:', Object.keys(response.data));\n\n//       // Check different possible response structures\n//       let token, userData;\n\n//       if (response.data.token && response.data.user) {\n//         token = response.data.token;\n//         userData = response.data.user;\n//       } else if (response.data.data && response.data.data.token && response.data.data.user) {\n//         token = response.data.data.token;\n//         userData = response.data.data.user;\n//       } else if (response.data.accessToken || response.data.authToken) {\n//         token = response.data.accessToken || response.data.authToken;\n//         userData = response.data.userData || response.data.user || response.data.data;\n//       } else {\n//         // Try to find token-like fields\n//         for (const key in response.data) {\n//           const value = response.data[key];\n//           if (typeof value === 'string' && value.length > 20) {\n//             token = value;\n//           }\n//           if (typeof value === 'object' && value !== null && (value.id || value.email || value.name)) {\n//             userData = value;\n//           }\n//         }\n//       }\n\n//       console.log('🔍 Extracted data:', {\n//         hasToken: !!token,\n//         tokenPreview: token ? token.substring(0, 20) + '...' : 'None',\n//         hasUserData: !!userData,\n//         userData: userData\n//       });\n\n//       if (!token || !userData) {\n//         console.error('❌ Could not extract token or user data from response');\n//         return { success: false, message: 'Invalid login response structure' };\n//       }\n\n//       cookieUtils.setToken(token);\n//       cookieUtils.setUser(userData);\n//       authService.setAuthToken(token);\n//       setUser(userData);\n//       setIsAuthenticated(true);\n\n//       console.log('✅ Login successful, user authenticated:', userData);\n//       return { success: true, data: { token, user: userData } };\n//     } catch (error) {\n//       console.error('❌ Login failed:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Login failed' \n//       };\n//     }\n//   };\n\n//   const signup = async (userData) => {\n//     console.log('📝 AuthContext: Signup attempt started');\n\n//     try {\n//       const response = await authService.signup(userData);\n//       console.log('✅ Signup API Response:', response.data);\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error('❌ Signup failed:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Signup failed' \n//       };\n//     }\n//   };\n\n//   const logout = () => {\n//     console.log('🚪 AuthContext: Logout initiated');\n//     cookieUtils.clearAuth();\n//     authService.removeAuthToken();\n//     setUser(null);\n//     setIsAuthenticated(false);\n\n//     authService.logout().catch(error => {\n//       console.error('❌ Logout API call failed:', error);\n//     });\n\n//     console.log('✅ Logout completed');\n//   };\n\n//   // Forgot Password\n//   const forgotPassword = async (email) => {\n//     console.log('🔑 AuthContext: Forgot password attempt started');\n//     console.log('📤 Forgot password request data:', { email });\n\n//     try {\n//       const response = await authService.forgotPassword(email);\n//       console.log('✅ Forgot password API Response:', response.data);\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error('❌ Forgot password failed:', error);\n//       console.error('❌ Error response:', error.response?.data);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Failed to send reset email' \n//       };\n//     }\n//   };\n\n//   // Step 1: Request password change (sends OTP) - Based on your exact API\n//   const changePassword = async (passwordData) => {\n//     console.log('🔐 AuthContext: Change password step 1 - Requesting OTP');\n//     console.log('📤 Change password request data:', { \n//       currentPassword: '***', \n//       newPassword: '***',\n//       confirmPassword: '***'\n//     });\n\n//     try {\n//       const response = await authService.changePassword(passwordData);\n//       console.log('✅ Change password step 1 - RAW RESPONSE:');\n//       console.log('📄 response:', response);\n//       console.log('📄 response.data:', response.data);\n//       console.log('📄 response.data type:', typeof response.data);\n//       console.log('📄 response.data keys:', response.data ? Object.keys(response.data) : 'No keys');\n\n//       // Check if response.data.data exists\n//       if (response.data && response.data.data) {\n//         console.log('📄 response.data.data:', response.data.data);\n//         console.log('📄 response.data.data type:', typeof response.data.data);\n//         console.log('📄 response.data.data keys:', Object.keys(response.data.data));\n\n//         if (response.data.data.token) {\n//           console.log('📄 FOUND TOKEN in response.data.data.token:', response.data.data.token);\n//           console.log('📄 Token type:', typeof response.data.data.token);\n//           console.log('📄 Token length:', response.data.data.token.length);\n//           console.log('📄 Full token value:', response.data.data.token);\n//         }\n//       }\n\n//       // Based on your API structure: { success: true, message: \"...\", data: { token: \"...\", message: \"...\", expiresIn: 600 } }\n//       if (response.data.success) {\n//         const { data } = response.data;\n\n//         // CRITICAL: Log the exact token being extracted\n//         console.log('🔑 EXTRACTING TOKEN:');\n//         console.log('🔑 data object:', data);\n//         console.log('🔑 data.token exists:', !!data?.token);\n//         console.log('🔑 data.token value:', data?.token);\n//         console.log('🔑 data.token type:', typeof data?.token);\n\n//         const extractedToken = data.token;\n\n//         console.log('✅ OTP sent successfully, FINAL TOKEN CHECK:', {\n//           hasToken: !!extractedToken,\n//           tokenPreview: extractedToken ? extractedToken.substring(0, 50) + '...' : 'None',\n//           fullToken: extractedToken, // Show full token for debugging\n//           tokenLength: extractedToken ? extractedToken.length : 0,\n//           expiresIn: data?.expiresIn,\n//           message: data?.message\n//         });\n\n//         return { \n//           success: true, \n//           data: {\n//             token: extractedToken,\n//             message: response.data.message,\n//             expiresIn: data.expiresIn,\n//             sentTo: user?.email || 'your registered email'\n//           }\n//         };\n//       } else {\n//         console.error('❌ API returned success: false');\n//         return { \n//           success: false, \n//           message: response.data.message || 'Failed to send OTP' \n//         };\n//       }\n\n//     } catch (error) {\n//       console.error('❌ Change password step 1 failed:', error);\n//       console.error('❌ Error response:', error.response?.data);\n\n//       // Handle validation errors\n//       if (error.response?.data?.errors) {\n//         const validationErrors = error.response.data.errors;\n//         const errorMessage = validationErrors.map(err => err.message).join(', ');\n//         return { \n//           success: false, \n//           message: errorMessage,\n//           validationErrors: validationErrors\n//         };\n//       }\n\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Failed to send OTP. Please check your current password.' \n//       };\n//     }\n//   };\n\n//   // Step 2: Verify OTP and change password - Based on your exact API\n//   const verifyPasswordChangeOTP = async (otpData) => {\n//     console.log('🔐 AuthContext: Change password step 2 - Verifying OTP');\n//     console.log('📤 OTP verification data RECEIVED:', { \n//       hasToken: !!otpData.token,\n//       tokenPreview: otpData.token ? otpData.token.substring(0, 50) + '...' : 'None',\n//       fullTokenForDebugging: otpData.token, // Show full token for debugging\n//       tokenType: typeof otpData.token,\n//       tokenLength: otpData.token ? otpData.token.length : 0,\n//       hasOtp: !!otpData.otp,\n//       otpValue: otpData.otp,\n//       otpType: typeof otpData.otp\n//     });\n\n//     // Ensure we have all required fields\n//     if (!otpData.otp) {\n//       console.error('❌ OTP is missing');\n//       return { success: false, message: 'OTP is required' };\n//     }\n\n//     if (!otpData.token) {\n//       console.error('❌ Token is missing');\n//       return { success: false, message: 'Token is missing. Please try again from the beginning.' };\n//     }\n\n//     // Validate token format (should be a non-empty string)\n//     if (typeof otpData.token !== 'string' || otpData.token.trim() === '') {\n//       console.error('❌ Token is not a valid string:', otpData.token);\n//       return { success: false, message: 'Invalid token format. Please try again from the beginning.' };\n//     }\n\n//     try {\n//       console.log('📤 SENDING TO API - Final verification:');\n//       const requestData = {\n//         token: otpData.token,\n//         otp: otpData.otp\n//       };\n//       console.log('📤 Request data being sent:', requestData);\n//       console.log('📤 JSON stringified:', JSON.stringify(requestData, null, 2));\n\n//       const response = await authService.verifyPasswordChangeOTP(requestData);\n\n//       console.log('✅ OTP verification response received:');\n//       console.log('📥 Full response:', response);\n//       console.log('📥 Response data:', response.data);\n\n//       // Based on your API structure: { success: true, message: \"Password changed successfully\" }\n//       if (response.data.success) {\n//         console.log('✅ Backend confirmed success');\n//         return { \n//           success: true, \n//           data: response.data \n//         };\n//       } else {\n//         console.error('❌ Backend returned success: false');\n//         return { \n//           success: false, \n//           message: response.data.message || 'Invalid OTP' \n//         };\n//       }\n\n//     } catch (error) {\n//       console.error('❌ OTP verification failed - DETAILED ERROR:');\n//       console.error('❌ Error object:', error);\n//       console.error('❌ Error message:', error.message);\n//       console.error('❌ Error response:', error.response);\n//       console.error('❌ Error response data:', error.response?.data);\n//       console.error('❌ Error status:', error.response?.status);\n\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Invalid OTP. Please try again.' \n//       };\n//     }\n//   };\n\n//   const value = {\n//     user,\n//     isAuthenticated,\n//     loading,\n//     login,\n//     signup,\n//     logout,\n//     forgotPassword,\n//     changePassword,\n//     verifyPasswordChangeOTP\n//   };\n\n//   console.log('🔄 AuthContext: Current state:', { \n//     isAuthenticated, \n//     hasUser: !!user, \n//     loading,\n//     userName: user?.name || 'None'\n//   });\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n_s2(AuthProvider, \"pnsvw7czjvmiFgw/Bh5bzhjzExE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","authService","cookieUtils","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","initializeAuth","console","log","debugCookies","token","getToken","userData","getUser","hasToken","hasUserData","tokenLength","length","userDataKeys","Object","keys","setAuthToken","error","login","credentials","response","data","accessToken","authToken","key","value","id","email","name","tokenPreview","substring","success","message","setToken","_error$response","_error$response$data","signup","_error$response2","_error$response2$data","logout","clearAuth","removeAuthToken","catch","forgotPassword","expiresIn","_error$response3","_error$response4","_error$response4$data","resetPassword","resetData","hasOtp","otp","otpValue","newPassword","confirmPassword","_error$response5","_error$response6","_error$response6$data","changePassword","passwordData","currentPassword","extractedToken","fullToken","sentTo","_error$response7","_error$response8","_error$response8$data","_error$response9","_error$response9$data","errors","validationErrors","errorMessage","map","err","join","verifyPasswordChangeOTP","otpData","fullTokenForDebugging","tokenType","otpType","trim","requestData","JSON","stringify","_error$response0","_error$response1","_error$response10","_error$response10$dat","status","hasUser","userName","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { authService } from '../services/authService';\nimport { cookieUtils } from '../utils/cookieUtils';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const initializeAuth = useCallback(async () => {\n    console.log('🔍 AuthContext: Starting authentication initialization');\n    \n    try {\n      cookieUtils.debugCookies();\n      \n      const token = cookieUtils.getToken();\n      const userData = cookieUtils.getUser();\n      \n      console.log('📦 Auth data check:', { \n        hasToken: !!token, \n        hasUserData: !!userData,\n        tokenLength: token ? token.length : 0,\n        userDataKeys: userData ? Object.keys(userData) : []\n      });\n      \n      if (token && userData) {\n        console.log('✅ AuthContext: Found auth data in cookies, setting authenticated state');\n        authService.setAuthToken(token);\n        setUser(userData);\n        setIsAuthenticated(true);\n        console.log('✅ AuthContext: User authenticated from cookies:', userData);\n      } else {\n        console.log('❌ AuthContext: No valid auth data found in cookies');\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n    } catch (error) {\n      console.error('❌ AuthContext: Error initializing auth:', error);\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    \n    console.log('🔄 AuthContext: Setting loading to false');\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    console.log('🔄 AuthProvider: Component mounted, initializing authentication');\n    initializeAuth();\n  }, [initializeAuth]);\n\n  const login = async (credentials) => {\n    console.log('🔐 AuthContext: Login attempt started');\n    \n    try {\n      const response = await authService.login(credentials);\n      console.log('✅ Login API Response - Full Structure:', response);\n      console.log('✅ Response.data:', response.data);\n      console.log('✅ Response.data keys:', Object.keys(response.data));\n      \n      // Check different possible response structures\n      let token, userData;\n      \n      if (response.data.token && response.data.user) {\n        token = response.data.token;\n        userData = response.data.user;\n      } else if (response.data.data && response.data.data.token && response.data.data.user) {\n        token = response.data.data.token;\n        userData = response.data.data.user;\n      } else if (response.data.accessToken || response.data.authToken) {\n        token = response.data.accessToken || response.data.authToken;\n        userData = response.data.userData || response.data.user || response.data.data;\n      } else {\n        // Try to find token-like fields\n        for (const key in response.data) {\n          const value = response.data[key];\n          if (typeof value === 'string' && value.length > 20) {\n            token = value;\n          }\n          if (typeof value === 'object' && value !== null && (value.id || value.email || value.name)) {\n            userData = value;\n          }\n        }\n      }\n      \n      console.log('🔍 Extracted data:', {\n        hasToken: !!token,\n        tokenPreview: token ? token.substring(0, 20) + '...' : 'None',\n        hasUserData: !!userData,\n        userData: userData\n      });\n      \n      if (!token || !userData) {\n        console.error('❌ Could not extract token or user data from response');\n        return { success: false, message: 'Invalid login response structure' };\n      }\n      \n      cookieUtils.setToken(token);\n      cookieUtils.setUser(userData);\n      authService.setAuthToken(token);\n      setUser(userData);\n      setIsAuthenticated(true);\n      \n      console.log('✅ Login successful, user authenticated:', userData);\n      return { success: true, data: { token, user: userData } };\n    } catch (error) {\n      console.error('❌ Login failed:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Login failed' \n      };\n    }\n  };\n\n  const signup = async (userData) => {\n    console.log('📝 AuthContext: Signup attempt started');\n    \n    try {\n      const response = await authService.signup(userData);\n      console.log('✅ Signup API Response:', response.data);\n      return { success: true, data: response.data };\n    } catch (error) {\n      console.error('❌ Signup failed:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Signup failed' \n      };\n    }\n  };\n\n  const logout = () => {\n    console.log('🚪 AuthContext: Logout initiated');\n    cookieUtils.clearAuth();\n    authService.removeAuthToken();\n    setUser(null);\n    setIsAuthenticated(false);\n    \n    authService.logout().catch(error => {\n      console.error('❌ Logout API call failed:', error);\n    });\n    \n    console.log('✅ Logout completed');\n  };\n\n  // Step 1: Request password reset OTP\n  const forgotPassword = async (email) => {\n    console.log('🔑 AuthContext: Forgot password attempt started');\n    console.log('📤 Forgot password request data:', { email });\n    \n    try {\n      const response = await authService.forgotPassword(email);\n      console.log('✅ Forgot password API Response:', response.data);\n      \n      // Based on your API: { success: true, message: \"Password reset OTP sent to your email\", data: { token: \"...\", message: \"...\", expiresIn: \"10 minutes\" } }\n      if (response.data.success) {\n        return { \n          success: true, \n          data: {\n            token: response.data.data.token,\n            message: response.data.message,\n            expiresIn: response.data.data.expiresIn === \"10 minutes\" ? 600 : 600 // Convert to seconds\n          }\n        };\n      } else {\n        return { \n          success: false, \n          message: response.data.message || 'Failed to send OTP' \n        };\n      }\n    } catch (error) {\n      console.error('❌ Forgot password failed:', error);\n      console.error('❌ Error response:', error.response?.data);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Failed to send reset email' \n      };\n    }\n  };\n\n  // Step 2: Reset password with OTP\n  const resetPassword = async (resetData) => {\n    console.log('🔄 AuthContext: Reset password attempt started');\n    console.log('📤 Reset password request data:', { \n      hasToken: !!resetData.token,\n      tokenPreview: resetData.token ? resetData.token.substring(0, 20) + '...' : 'None',\n      hasOtp: !!resetData.otp,\n      otpValue: resetData.otp,\n      newPassword: '***',\n      confirmPassword: '***'\n    });\n    \n    try {\n      const response = await authService.resetPassword(resetData);\n      console.log('✅ Reset password API Response:', response.data);\n      \n      if (response.data.success) {\n        return { success: true, data: response.data };\n      } else {\n        return { \n          success: false, \n          message: response.data.message || 'Password reset failed' \n        };\n      }\n    } catch (error) {\n      console.error('❌ Reset password failed:', error);\n      console.error('❌ Error response:', error.response?.data);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Password reset failed' \n      };\n    }\n  };\n\n  // Change Password (for authenticated users)\n  const changePassword = async (passwordData) => {\n    console.log('🔐 AuthContext: Change password step 1 - Requesting OTP');\n    console.log('📤 Change password request data:', { \n      currentPassword: '***', \n      newPassword: '***',\n      confirmPassword: '***'\n    });\n    \n    try {\n      const response = await authService.changePassword(passwordData);\n      console.log('✅ Change password step 1 - RAW RESPONSE:');\n      console.log('📄 response:', response);\n      console.log('📄 response.data:', response.data);\n      console.log('📄 response.data type:', typeof response.data);\n      console.log('📄 response.data keys:', response.data ? Object.keys(response.data) : 'No keys');\n      \n      // Check if response.data.data exists\n      if (response.data && response.data.data) {\n        console.log('📄 response.data.data:', response.data.data);\n        console.log('📄 response.data.data type:', typeof response.data.data);\n        console.log('📄 response.data.data keys:', Object.keys(response.data.data));\n        \n        if (response.data.data.token) {\n          console.log('📄 FOUND TOKEN in response.data.data.token:', response.data.data.token);\n          console.log('📄 Token type:', typeof response.data.data.token);\n          console.log('📄 Token length:', response.data.data.token.length);\n          console.log('📄 Full token value:', response.data.data.token);\n        }\n      }\n      \n      // Based on your API structure: { success: true, message: \"...\", data: { token: \"...\", message: \"...\", expiresIn: 600 } }\n      if (response.data.success) {\n        const { data } = response.data;\n        \n        // CRITICAL: Log the exact token being extracted\n        console.log('🔑 EXTRACTING TOKEN:');\n        console.log('🔑 data object:', data);\n        console.log('🔑 data.token exists:', !!data?.token);\n        console.log('🔑 data.token value:', data?.token);\n        console.log('🔑 data.token type:', typeof data?.token);\n        \n        const extractedToken = data.token;\n        \n        console.log('✅ OTP sent successfully, FINAL TOKEN CHECK:', {\n          hasToken: !!extractedToken,\n          tokenPreview: extractedToken ? extractedToken.substring(0, 50) + '...' : 'None',\n          fullToken: extractedToken, // Show full token for debugging\n          tokenLength: extractedToken ? extractedToken.length : 0,\n          expiresIn: data?.expiresIn,\n          message: data?.message\n        });\n        \n        return { \n          success: true, \n          data: {\n            token: extractedToken,\n            message: response.data.message,\n            expiresIn: data.expiresIn,\n            sentTo: user?.email || 'your registered email'\n          }\n        };\n      } else {\n        console.error('❌ API returned success: false');\n        return { \n          success: false, \n          message: response.data.message || 'Failed to send OTP' \n        };\n      }\n      \n    } catch (error) {\n      console.error('❌ Change password step 1 failed:', error);\n      console.error('❌ Error response:', error.response?.data);\n      \n      // Handle validation errors\n      if (error.response?.data?.errors) {\n        const validationErrors = error.response.data.errors;\n        const errorMessage = validationErrors.map(err => err.message).join(', ');\n        return { \n          success: false, \n          message: errorMessage,\n          validationErrors: validationErrors\n        };\n      }\n      \n      return { \n        success: false, \n        message: error.response?.data?.message || 'Failed to send OTP. Please check your current password.' \n      };\n    }\n  };\n\n  // Verify OTP for change password\n  const verifyPasswordChangeOTP = async (otpData) => {\n    console.log('🔐 AuthContext: Change password step 2 - Verifying OTP');\n    console.log('📤 OTP verification data RECEIVED:', { \n      hasToken: !!otpData.token,\n      tokenPreview: otpData.token ? otpData.token.substring(0, 50) + '...' : 'None',\n      fullTokenForDebugging: otpData.token, // Show full token for debugging\n      tokenType: typeof otpData.token,\n      tokenLength: otpData.token ? otpData.token.length : 0,\n      hasOtp: !!otpData.otp,\n      otpValue: otpData.otp,\n      otpType: typeof otpData.otp\n    });\n    \n    // Ensure we have all required fields\n    if (!otpData.otp) {\n      console.error('❌ OTP is missing');\n      return { success: false, message: 'OTP is required' };\n    }\n    \n    if (!otpData.token) {\n      console.error('❌ Token is missing');\n      return { success: false, message: 'Token is missing. Please try again from the beginning.' };\n    }\n    \n    // Validate token format (should be a non-empty string)\n    if (typeof otpData.token !== 'string' || otpData.token.trim() === '') {\n      console.error('❌ Token is not a valid string:', otpData.token);\n      return { success: false, message: 'Invalid token format. Please try again from the beginning.' };\n    }\n    \n    try {\n      console.log('📤 SENDING TO API - Final verification:');\n      const requestData = {\n        token: otpData.token,\n        otp: otpData.otp\n      };\n      console.log('📤 Request data being sent:', requestData);\n      console.log('📤 JSON stringified:', JSON.stringify(requestData, null, 2));\n      \n      const response = await authService.verifyPasswordChangeOTP(requestData);\n      \n      console.log('✅ OTP verification response received:');\n      console.log('📥 Full response:', response);\n      console.log('📥 Response data:', response.data);\n      \n      // Based on your API structure: { success: true, message: \"Password changed successfully\" }\n      if (response.data.success) {\n        console.log('✅ Backend confirmed success');\n        return { \n          success: true, \n          data: response.data \n        };\n      } else {\n        console.error('❌ Backend returned success: false');\n        return { \n          success: false, \n          message: response.data.message || 'Invalid OTP' \n        };\n      }\n      \n    } catch (error) {\n      console.error('❌ OTP verification failed - DETAILED ERROR:');\n      console.error('❌ Error object:', error);\n      console.error('❌ Error message:', error.message);\n      console.error('❌ Error response:', error.response);\n      console.error('❌ Error response data:', error.response?.data);\n      console.error('❌ Error status:', error.response?.status);\n      \n      return { \n        success: false, \n        message: error.response?.data?.message || 'Invalid OTP. Please try again.' \n      };\n    }\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    signup,\n    logout,\n    forgotPassword,\n    resetPassword,\n    changePassword,\n    verifyPasswordChangeOTP\n  };\n\n  console.log('🔄 AuthContext: Current state:', { \n    isAuthenticated, \n    hasUser: !!user, \n    loading,\n    userName: user?.name || 'None'\n  });\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n// import { authService } from '../services/authService';\n// import { cookieUtils } from '../utils/cookieUtils';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n//   const initializeAuth = useCallback(async () => {\n//     console.log('🔍 AuthContext: Starting authentication initialization');\n    \n//     try {\n//       cookieUtils.debugCookies();\n      \n//       const token = cookieUtils.getToken();\n//       const userData = cookieUtils.getUser();\n      \n//       console.log('📦 Auth data check:', { \n//         hasToken: !!token, \n//         hasUserData: !!userData,\n//         tokenLength: token ? token.length : 0,\n//         userDataKeys: userData ? Object.keys(userData) : []\n//       });\n      \n//       if (token && userData) {\n//         console.log('✅ AuthContext: Found auth data in cookies, setting authenticated state');\n//         authService.setAuthToken(token);\n//         setUser(userData);\n//         setIsAuthenticated(true);\n//         console.log('✅ AuthContext: User authenticated from cookies:', userData);\n//       } else {\n//         console.log('❌ AuthContext: No valid auth data found in cookies');\n//         setUser(null);\n//         setIsAuthenticated(false);\n//       }\n//     } catch (error) {\n//       console.error('❌ AuthContext: Error initializing auth:', error);\n//       setUser(null);\n//       setIsAuthenticated(false);\n//     }\n    \n//     console.log('🔄 AuthContext: Setting loading to false');\n//     setLoading(false);\n//   }, []);\n\n//   useEffect(() => {\n//     console.log('🔄 AuthProvider: Component mounted, initializing authentication');\n//     initializeAuth();\n//   }, [initializeAuth]);\n\n//   const login = async (credentials) => {\n//     console.log('🔐 AuthContext: Login attempt started');\n    \n//     try {\n//       const response = await authService.login(credentials);\n//       console.log('✅ Login API Response - Full Structure:', response);\n//       console.log('✅ Response.data:', response.data);\n//       console.log('✅ Response.data keys:', Object.keys(response.data));\n      \n//       // Check different possible response structures\n//       let token, userData;\n      \n//       if (response.data.token && response.data.user) {\n//         token = response.data.token;\n//         userData = response.data.user;\n//       } else if (response.data.data && response.data.data.token && response.data.data.user) {\n//         token = response.data.data.token;\n//         userData = response.data.data.user;\n//       } else if (response.data.accessToken || response.data.authToken) {\n//         token = response.data.accessToken || response.data.authToken;\n//         userData = response.data.userData || response.data.user || response.data.data;\n//       } else {\n//         // Try to find token-like fields\n//         for (const key in response.data) {\n//           const value = response.data[key];\n//           if (typeof value === 'string' && value.length > 20) {\n//             token = value;\n//           }\n//           if (typeof value === 'object' && value !== null && (value.id || value.email || value.name)) {\n//             userData = value;\n//           }\n//         }\n//       }\n      \n//       console.log('🔍 Extracted data:', {\n//         hasToken: !!token,\n//         tokenPreview: token ? token.substring(0, 20) + '...' : 'None',\n//         hasUserData: !!userData,\n//         userData: userData\n//       });\n      \n//       if (!token || !userData) {\n//         console.error('❌ Could not extract token or user data from response');\n//         return { success: false, message: 'Invalid login response structure' };\n//       }\n      \n//       cookieUtils.setToken(token);\n//       cookieUtils.setUser(userData);\n//       authService.setAuthToken(token);\n//       setUser(userData);\n//       setIsAuthenticated(true);\n      \n//       console.log('✅ Login successful, user authenticated:', userData);\n//       return { success: true, data: { token, user: userData } };\n//     } catch (error) {\n//       console.error('❌ Login failed:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Login failed' \n//       };\n//     }\n//   };\n\n//   const signup = async (userData) => {\n//     console.log('📝 AuthContext: Signup attempt started');\n    \n//     try {\n//       const response = await authService.signup(userData);\n//       console.log('✅ Signup API Response:', response.data);\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error('❌ Signup failed:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Signup failed' \n//       };\n//     }\n//   };\n\n//   const logout = () => {\n//     console.log('🚪 AuthContext: Logout initiated');\n//     cookieUtils.clearAuth();\n//     authService.removeAuthToken();\n//     setUser(null);\n//     setIsAuthenticated(false);\n    \n//     authService.logout().catch(error => {\n//       console.error('❌ Logout API call failed:', error);\n//     });\n    \n//     console.log('✅ Logout completed');\n//   };\n\n//   // Forgot Password\n//   const forgotPassword = async (email) => {\n//     console.log('🔑 AuthContext: Forgot password attempt started');\n//     console.log('📤 Forgot password request data:', { email });\n    \n//     try {\n//       const response = await authService.forgotPassword(email);\n//       console.log('✅ Forgot password API Response:', response.data);\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error('❌ Forgot password failed:', error);\n//       console.error('❌ Error response:', error.response?.data);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Failed to send reset email' \n//       };\n//     }\n//   };\n\n//   // Step 1: Request password change (sends OTP) - Based on your exact API\n//   const changePassword = async (passwordData) => {\n//     console.log('🔐 AuthContext: Change password step 1 - Requesting OTP');\n//     console.log('📤 Change password request data:', { \n//       currentPassword: '***', \n//       newPassword: '***',\n//       confirmPassword: '***'\n//     });\n    \n//     try {\n//       const response = await authService.changePassword(passwordData);\n//       console.log('✅ Change password step 1 - RAW RESPONSE:');\n//       console.log('📄 response:', response);\n//       console.log('📄 response.data:', response.data);\n//       console.log('📄 response.data type:', typeof response.data);\n//       console.log('📄 response.data keys:', response.data ? Object.keys(response.data) : 'No keys');\n      \n//       // Check if response.data.data exists\n//       if (response.data && response.data.data) {\n//         console.log('📄 response.data.data:', response.data.data);\n//         console.log('📄 response.data.data type:', typeof response.data.data);\n//         console.log('📄 response.data.data keys:', Object.keys(response.data.data));\n        \n//         if (response.data.data.token) {\n//           console.log('📄 FOUND TOKEN in response.data.data.token:', response.data.data.token);\n//           console.log('📄 Token type:', typeof response.data.data.token);\n//           console.log('📄 Token length:', response.data.data.token.length);\n//           console.log('📄 Full token value:', response.data.data.token);\n//         }\n//       }\n      \n//       // Based on your API structure: { success: true, message: \"...\", data: { token: \"...\", message: \"...\", expiresIn: 600 } }\n//       if (response.data.success) {\n//         const { data } = response.data;\n        \n//         // CRITICAL: Log the exact token being extracted\n//         console.log('🔑 EXTRACTING TOKEN:');\n//         console.log('🔑 data object:', data);\n//         console.log('🔑 data.token exists:', !!data?.token);\n//         console.log('🔑 data.token value:', data?.token);\n//         console.log('🔑 data.token type:', typeof data?.token);\n        \n//         const extractedToken = data.token;\n        \n//         console.log('✅ OTP sent successfully, FINAL TOKEN CHECK:', {\n//           hasToken: !!extractedToken,\n//           tokenPreview: extractedToken ? extractedToken.substring(0, 50) + '...' : 'None',\n//           fullToken: extractedToken, // Show full token for debugging\n//           tokenLength: extractedToken ? extractedToken.length : 0,\n//           expiresIn: data?.expiresIn,\n//           message: data?.message\n//         });\n        \n//         return { \n//           success: true, \n//           data: {\n//             token: extractedToken,\n//             message: response.data.message,\n//             expiresIn: data.expiresIn,\n//             sentTo: user?.email || 'your registered email'\n//           }\n//         };\n//       } else {\n//         console.error('❌ API returned success: false');\n//         return { \n//           success: false, \n//           message: response.data.message || 'Failed to send OTP' \n//         };\n//       }\n      \n//     } catch (error) {\n//       console.error('❌ Change password step 1 failed:', error);\n//       console.error('❌ Error response:', error.response?.data);\n      \n//       // Handle validation errors\n//       if (error.response?.data?.errors) {\n//         const validationErrors = error.response.data.errors;\n//         const errorMessage = validationErrors.map(err => err.message).join(', ');\n//         return { \n//           success: false, \n//           message: errorMessage,\n//           validationErrors: validationErrors\n//         };\n//       }\n      \n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Failed to send OTP. Please check your current password.' \n//       };\n//     }\n//   };\n\n//   // Step 2: Verify OTP and change password - Based on your exact API\n//   const verifyPasswordChangeOTP = async (otpData) => {\n//     console.log('🔐 AuthContext: Change password step 2 - Verifying OTP');\n//     console.log('📤 OTP verification data RECEIVED:', { \n//       hasToken: !!otpData.token,\n//       tokenPreview: otpData.token ? otpData.token.substring(0, 50) + '...' : 'None',\n//       fullTokenForDebugging: otpData.token, // Show full token for debugging\n//       tokenType: typeof otpData.token,\n//       tokenLength: otpData.token ? otpData.token.length : 0,\n//       hasOtp: !!otpData.otp,\n//       otpValue: otpData.otp,\n//       otpType: typeof otpData.otp\n//     });\n    \n//     // Ensure we have all required fields\n//     if (!otpData.otp) {\n//       console.error('❌ OTP is missing');\n//       return { success: false, message: 'OTP is required' };\n//     }\n    \n//     if (!otpData.token) {\n//       console.error('❌ Token is missing');\n//       return { success: false, message: 'Token is missing. Please try again from the beginning.' };\n//     }\n    \n//     // Validate token format (should be a non-empty string)\n//     if (typeof otpData.token !== 'string' || otpData.token.trim() === '') {\n//       console.error('❌ Token is not a valid string:', otpData.token);\n//       return { success: false, message: 'Invalid token format. Please try again from the beginning.' };\n//     }\n    \n//     try {\n//       console.log('📤 SENDING TO API - Final verification:');\n//       const requestData = {\n//         token: otpData.token,\n//         otp: otpData.otp\n//       };\n//       console.log('📤 Request data being sent:', requestData);\n//       console.log('📤 JSON stringified:', JSON.stringify(requestData, null, 2));\n      \n//       const response = await authService.verifyPasswordChangeOTP(requestData);\n      \n//       console.log('✅ OTP verification response received:');\n//       console.log('📥 Full response:', response);\n//       console.log('📥 Response data:', response.data);\n      \n//       // Based on your API structure: { success: true, message: \"Password changed successfully\" }\n//       if (response.data.success) {\n//         console.log('✅ Backend confirmed success');\n//         return { \n//           success: true, \n//           data: response.data \n//         };\n//       } else {\n//         console.error('❌ Backend returned success: false');\n//         return { \n//           success: false, \n//           message: response.data.message || 'Invalid OTP' \n//         };\n//       }\n      \n//     } catch (error) {\n//       console.error('❌ OTP verification failed - DETAILED ERROR:');\n//       console.error('❌ Error object:', error);\n//       console.error('❌ Error message:', error.message);\n//       console.error('❌ Error response:', error.response);\n//       console.error('❌ Error response data:', error.response?.data);\n//       console.error('❌ Error status:', error.response?.status);\n      \n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Invalid OTP. Please try again.' \n//       };\n//     }\n//   };\n\n//   const value = {\n//     user,\n//     isAuthenticated,\n//     loading,\n//     login,\n//     signup,\n//     logout,\n//     forgotPassword,\n//     changePassword,\n//     verifyPasswordChangeOTP\n//   };\n\n//   console.log('🔄 AuthContext: Current state:', { \n//     isAuthenticated, \n//     hasUser: !!user, \n//     loading,\n//     userName: user?.name || 'None'\n//   });\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC1F,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,WAAW,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,gBAAGT,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMU,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGX,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMqB,cAAc,GAAGnB,WAAW,CAAC,YAAY;IAC7CoB,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;IAErE,IAAI;MACFnB,WAAW,CAACoB,YAAY,CAAC,CAAC;MAE1B,MAAMC,KAAK,GAAGrB,WAAW,CAACsB,QAAQ,CAAC,CAAC;MACpC,MAAMC,QAAQ,GAAGvB,WAAW,CAACwB,OAAO,CAAC,CAAC;MAEtCN,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE;QACjCM,QAAQ,EAAE,CAAC,CAACJ,KAAK;QACjBK,WAAW,EAAE,CAAC,CAACH,QAAQ;QACvBI,WAAW,EAAEN,KAAK,GAAGA,KAAK,CAACO,MAAM,GAAG,CAAC;QACrCC,YAAY,EAAEN,QAAQ,GAAGO,MAAM,CAACC,IAAI,CAACR,QAAQ,CAAC,GAAG;MACnD,CAAC,CAAC;MAEF,IAAIF,KAAK,IAAIE,QAAQ,EAAE;QACrBL,OAAO,CAACC,GAAG,CAAC,wEAAwE,CAAC;QACrFpB,WAAW,CAACiC,YAAY,CAACX,KAAK,CAAC;QAC/BT,OAAO,CAACW,QAAQ,CAAC;QACjBP,kBAAkB,CAAC,IAAI,CAAC;QACxBE,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEI,QAAQ,CAAC;MAC1E,CAAC,MAAM;QACLL,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;QACjEP,OAAO,CAAC,IAAI,CAAC;QACbI,kBAAkB,CAAC,KAAK,CAAC;MAC3B;IACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/DrB,OAAO,CAAC,IAAI,CAAC;MACbI,kBAAkB,CAAC,KAAK,CAAC;IAC3B;IAEAE,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvDL,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAENjB,SAAS,CAAC,MAAM;IACdqB,OAAO,CAACC,GAAG,CAAC,iEAAiE,CAAC;IAC9EF,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB,MAAMiB,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnCjB,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IAEpD,IAAI;MACF,MAAMiB,QAAQ,GAAG,MAAMrC,WAAW,CAACmC,KAAK,CAACC,WAAW,CAAC;MACrDjB,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEiB,QAAQ,CAAC;MAC/DlB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEiB,QAAQ,CAACC,IAAI,CAAC;MAC9CnB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEW,MAAM,CAACC,IAAI,CAACK,QAAQ,CAACC,IAAI,CAAC,CAAC;;MAEhE;MACA,IAAIhB,KAAK,EAAEE,QAAQ;MAEnB,IAAIa,QAAQ,CAACC,IAAI,CAAChB,KAAK,IAAIe,QAAQ,CAACC,IAAI,CAAC1B,IAAI,EAAE;QAC7CU,KAAK,GAAGe,QAAQ,CAACC,IAAI,CAAChB,KAAK;QAC3BE,QAAQ,GAAGa,QAAQ,CAACC,IAAI,CAAC1B,IAAI;MAC/B,CAAC,MAAM,IAAIyB,QAAQ,CAACC,IAAI,CAACA,IAAI,IAAID,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAChB,KAAK,IAAIe,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAC1B,IAAI,EAAE;QACpFU,KAAK,GAAGe,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAChB,KAAK;QAChCE,QAAQ,GAAGa,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAC1B,IAAI;MACpC,CAAC,MAAM,IAAIyB,QAAQ,CAACC,IAAI,CAACC,WAAW,IAAIF,QAAQ,CAACC,IAAI,CAACE,SAAS,EAAE;QAC/DlB,KAAK,GAAGe,QAAQ,CAACC,IAAI,CAACC,WAAW,IAAIF,QAAQ,CAACC,IAAI,CAACE,SAAS;QAC5DhB,QAAQ,GAAGa,QAAQ,CAACC,IAAI,CAACd,QAAQ,IAAIa,QAAQ,CAACC,IAAI,CAAC1B,IAAI,IAAIyB,QAAQ,CAACC,IAAI,CAACA,IAAI;MAC/E,CAAC,MAAM;QACL;QACA,KAAK,MAAMG,GAAG,IAAIJ,QAAQ,CAACC,IAAI,EAAE;UAC/B,MAAMI,KAAK,GAAGL,QAAQ,CAACC,IAAI,CAACG,GAAG,CAAC;UAChC,IAAI,OAAOC,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACb,MAAM,GAAG,EAAE,EAAE;YAClDP,KAAK,GAAGoB,KAAK;UACf;UACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,KAAKA,KAAK,CAACC,EAAE,IAAID,KAAK,CAACE,KAAK,IAAIF,KAAK,CAACG,IAAI,CAAC,EAAE;YAC1FrB,QAAQ,GAAGkB,KAAK;UAClB;QACF;MACF;MAEAvB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE;QAChCM,QAAQ,EAAE,CAAC,CAACJ,KAAK;QACjBwB,YAAY,EAAExB,KAAK,GAAGA,KAAK,CAACyB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,MAAM;QAC7DpB,WAAW,EAAE,CAAC,CAACH,QAAQ;QACvBA,QAAQ,EAAEA;MACZ,CAAC,CAAC;MAEF,IAAI,CAACF,KAAK,IAAI,CAACE,QAAQ,EAAE;QACvBL,OAAO,CAACe,KAAK,CAAC,sDAAsD,CAAC;QACrE,OAAO;UAAEc,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAE;QAAmC,CAAC;MACxE;MAEAhD,WAAW,CAACiD,QAAQ,CAAC5B,KAAK,CAAC;MAC3BrB,WAAW,CAACY,OAAO,CAACW,QAAQ,CAAC;MAC7BxB,WAAW,CAACiC,YAAY,CAACX,KAAK,CAAC;MAC/BT,OAAO,CAACW,QAAQ,CAAC;MACjBP,kBAAkB,CAAC,IAAI,CAAC;MAExBE,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEI,QAAQ,CAAC;MAChE,OAAO;QAAEwB,OAAO,EAAE,IAAI;QAAEV,IAAI,EAAE;UAAEhB,KAAK;UAAEV,IAAI,EAAEY;QAAS;MAAE,CAAC;IAC3D,CAAC,CAAC,OAAOU,KAAK,EAAE;MAAA,IAAAiB,eAAA,EAAAC,oBAAA;MACdjC,OAAO,CAACe,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,OAAO;QACLc,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,EAAAE,eAAA,GAAAjB,KAAK,CAACG,QAAQ,cAAAc,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBb,IAAI,cAAAc,oBAAA,uBAApBA,oBAAA,CAAsBH,OAAO,KAAI;MAC5C,CAAC;IACH;EACF,CAAC;EAED,MAAMI,MAAM,GAAG,MAAO7B,QAAQ,IAAK;IACjCL,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IAErD,IAAI;MACF,MAAMiB,QAAQ,GAAG,MAAMrC,WAAW,CAACqD,MAAM,CAAC7B,QAAQ,CAAC;MACnDL,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEiB,QAAQ,CAACC,IAAI,CAAC;MACpD,OAAO;QAAEU,OAAO,EAAE,IAAI;QAAEV,IAAI,EAAED,QAAQ,CAACC;MAAK,CAAC;IAC/C,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAAoB,gBAAA,EAAAC,qBAAA;MACdpC,OAAO,CAACe,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC,OAAO;QACLc,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,EAAAK,gBAAA,GAAApB,KAAK,CAACG,QAAQ,cAAAiB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBhB,IAAI,cAAAiB,qBAAA,uBAApBA,qBAAA,CAAsBN,OAAO,KAAI;MAC5C,CAAC;IACH;EACF,CAAC;EAED,MAAMO,MAAM,GAAGA,CAAA,KAAM;IACnBrC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/CnB,WAAW,CAACwD,SAAS,CAAC,CAAC;IACvBzD,WAAW,CAAC0D,eAAe,CAAC,CAAC;IAC7B7C,OAAO,CAAC,IAAI,CAAC;IACbI,kBAAkB,CAAC,KAAK,CAAC;IAEzBjB,WAAW,CAACwD,MAAM,CAAC,CAAC,CAACG,KAAK,CAACzB,KAAK,IAAI;MAClCf,OAAO,CAACe,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD,CAAC,CAAC;IAEFf,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACnC,CAAC;;EAED;EACA,MAAMwC,cAAc,GAAG,MAAOhB,KAAK,IAAK;IACtCzB,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;IAC9DD,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE;MAAEwB;IAAM,CAAC,CAAC;IAE1D,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMrC,WAAW,CAAC4D,cAAc,CAAChB,KAAK,CAAC;MACxDzB,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEiB,QAAQ,CAACC,IAAI,CAAC;;MAE7D;MACA,IAAID,QAAQ,CAACC,IAAI,CAACU,OAAO,EAAE;QACzB,OAAO;UACLA,OAAO,EAAE,IAAI;UACbV,IAAI,EAAE;YACJhB,KAAK,EAAEe,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAChB,KAAK;YAC/B2B,OAAO,EAAEZ,QAAQ,CAACC,IAAI,CAACW,OAAO;YAC9BY,SAAS,EAAExB,QAAQ,CAACC,IAAI,CAACA,IAAI,CAACuB,SAAS,KAAK,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC;UACvE;QACF,CAAC;MACH,CAAC,MAAM;QACL,OAAO;UACLb,OAAO,EAAE,KAAK;UACdC,OAAO,EAAEZ,QAAQ,CAACC,IAAI,CAACW,OAAO,IAAI;QACpC,CAAC;MACH;IACF,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAA4B,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACd7C,OAAO,CAACe,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDf,OAAO,CAACe,KAAK,CAAC,mBAAmB,GAAA4B,gBAAA,GAAE5B,KAAK,CAACG,QAAQ,cAAAyB,gBAAA,uBAAdA,gBAAA,CAAgBxB,IAAI,CAAC;MACxD,OAAO;QACLU,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,EAAAc,gBAAA,GAAA7B,KAAK,CAACG,QAAQ,cAAA0B,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBzB,IAAI,cAAA0B,qBAAA,uBAApBA,qBAAA,CAAsBf,OAAO,KAAI;MAC5C,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAMgB,aAAa,GAAG,MAAOC,SAAS,IAAK;IACzC/C,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IAC7DD,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE;MAC7CM,QAAQ,EAAE,CAAC,CAACwC,SAAS,CAAC5C,KAAK;MAC3BwB,YAAY,EAAEoB,SAAS,CAAC5C,KAAK,GAAG4C,SAAS,CAAC5C,KAAK,CAACyB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,MAAM;MACjFoB,MAAM,EAAE,CAAC,CAACD,SAAS,CAACE,GAAG;MACvBC,QAAQ,EAAEH,SAAS,CAACE,GAAG;MACvBE,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE;IACnB,CAAC,CAAC;IAEF,IAAI;MACF,MAAMlC,QAAQ,GAAG,MAAMrC,WAAW,CAACiE,aAAa,CAACC,SAAS,CAAC;MAC3D/C,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEiB,QAAQ,CAACC,IAAI,CAAC;MAE5D,IAAID,QAAQ,CAACC,IAAI,CAACU,OAAO,EAAE;QACzB,OAAO;UAAEA,OAAO,EAAE,IAAI;UAAEV,IAAI,EAAED,QAAQ,CAACC;QAAK,CAAC;MAC/C,CAAC,MAAM;QACL,OAAO;UACLU,OAAO,EAAE,KAAK;UACdC,OAAO,EAAEZ,QAAQ,CAACC,IAAI,CAACW,OAAO,IAAI;QACpC,CAAC;MACH;IACF,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAAsC,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACdvD,OAAO,CAACe,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDf,OAAO,CAACe,KAAK,CAAC,mBAAmB,GAAAsC,gBAAA,GAAEtC,KAAK,CAACG,QAAQ,cAAAmC,gBAAA,uBAAdA,gBAAA,CAAgBlC,IAAI,CAAC;MACxD,OAAO;QACLU,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,EAAAwB,gBAAA,GAAAvC,KAAK,CAACG,QAAQ,cAAAoC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBnC,IAAI,cAAAoC,qBAAA,uBAApBA,qBAAA,CAAsBzB,OAAO,KAAI;MAC5C,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAM0B,cAAc,GAAG,MAAOC,YAAY,IAAK;IAC7CzD,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;IACtED,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE;MAC9CyD,eAAe,EAAE,KAAK;MACtBP,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE;IACnB,CAAC,CAAC;IAEF,IAAI;MACF,MAAMlC,QAAQ,GAAG,MAAMrC,WAAW,CAAC2E,cAAc,CAACC,YAAY,CAAC;MAC/DzD,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvDD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEiB,QAAQ,CAAC;MACrClB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEiB,QAAQ,CAACC,IAAI,CAAC;MAC/CnB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE,OAAOiB,QAAQ,CAACC,IAAI,CAAC;MAC3DnB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEiB,QAAQ,CAACC,IAAI,GAAGP,MAAM,CAACC,IAAI,CAACK,QAAQ,CAACC,IAAI,CAAC,GAAG,SAAS,CAAC;;MAE7F;MACA,IAAID,QAAQ,CAACC,IAAI,IAAID,QAAQ,CAACC,IAAI,CAACA,IAAI,EAAE;QACvCnB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEiB,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAC;QACzDnB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,OAAOiB,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAC;QACrEnB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEW,MAAM,CAACC,IAAI,CAACK,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAC,CAAC;QAE3E,IAAID,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAChB,KAAK,EAAE;UAC5BH,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAEiB,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAChB,KAAK,CAAC;UACpFH,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,OAAOiB,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAChB,KAAK,CAAC;UAC9DH,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEiB,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAChB,KAAK,CAACO,MAAM,CAAC;UAChEV,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEiB,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAChB,KAAK,CAAC;QAC/D;MACF;;MAEA;MACA,IAAIe,QAAQ,CAACC,IAAI,CAACU,OAAO,EAAE;QACzB,MAAM;UAAEV;QAAK,CAAC,GAAGD,QAAQ,CAACC,IAAI;;QAE9B;QACAnB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnCD,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEkB,IAAI,CAAC;QACpCnB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,CAAC,EAACkB,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEhB,KAAK,EAAC;QACnDH,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEkB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEhB,KAAK,CAAC;QAChDH,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,QAAOkB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEhB,KAAK,EAAC;QAEtD,MAAMwD,cAAc,GAAGxC,IAAI,CAAChB,KAAK;QAEjCH,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAE;UACzDM,QAAQ,EAAE,CAAC,CAACoD,cAAc;UAC1BhC,YAAY,EAAEgC,cAAc,GAAGA,cAAc,CAAC/B,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,MAAM;UAC/EgC,SAAS,EAAED,cAAc;UAAE;UAC3BlD,WAAW,EAAEkD,cAAc,GAAGA,cAAc,CAACjD,MAAM,GAAG,CAAC;UACvDgC,SAAS,EAAEvB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEuB,SAAS;UAC1BZ,OAAO,EAAEX,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW;QACjB,CAAC,CAAC;QAEF,OAAO;UACLD,OAAO,EAAE,IAAI;UACbV,IAAI,EAAE;YACJhB,KAAK,EAAEwD,cAAc;YACrB7B,OAAO,EAAEZ,QAAQ,CAACC,IAAI,CAACW,OAAO;YAC9BY,SAAS,EAAEvB,IAAI,CAACuB,SAAS;YACzBmB,MAAM,EAAE,CAAApE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgC,KAAK,KAAI;UACzB;QACF,CAAC;MACH,CAAC,MAAM;QACLzB,OAAO,CAACe,KAAK,CAAC,+BAA+B,CAAC;QAC9C,OAAO;UACLc,OAAO,EAAE,KAAK;UACdC,OAAO,EAAEZ,QAAQ,CAACC,IAAI,CAACW,OAAO,IAAI;QACpC,CAAC;MACH;IAEF,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAA+C,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACdlE,OAAO,CAACe,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxDf,OAAO,CAACe,KAAK,CAAC,mBAAmB,GAAA+C,gBAAA,GAAE/C,KAAK,CAACG,QAAQ,cAAA4C,gBAAA,uBAAdA,gBAAA,CAAgB3C,IAAI,CAAC;;MAExD;MACA,KAAA4C,gBAAA,GAAIhD,KAAK,CAACG,QAAQ,cAAA6C,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgB5C,IAAI,cAAA6C,qBAAA,eAApBA,qBAAA,CAAsBG,MAAM,EAAE;QAChC,MAAMC,gBAAgB,GAAGrD,KAAK,CAACG,QAAQ,CAACC,IAAI,CAACgD,MAAM;QACnD,MAAME,YAAY,GAAGD,gBAAgB,CAACE,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACzC,OAAO,CAAC,CAAC0C,IAAI,CAAC,IAAI,CAAC;QACxE,OAAO;UACL3C,OAAO,EAAE,KAAK;UACdC,OAAO,EAAEuC,YAAY;UACrBD,gBAAgB,EAAEA;QACpB,CAAC;MACH;MAEA,OAAO;QACLvC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,EAAAmC,gBAAA,GAAAlD,KAAK,CAACG,QAAQ,cAAA+C,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB9C,IAAI,cAAA+C,qBAAA,uBAApBA,qBAAA,CAAsBpC,OAAO,KAAI;MAC5C,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAM2C,uBAAuB,GAAG,MAAOC,OAAO,IAAK;IACjD1E,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;IACrED,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE;MAChDM,QAAQ,EAAE,CAAC,CAACmE,OAAO,CAACvE,KAAK;MACzBwB,YAAY,EAAE+C,OAAO,CAACvE,KAAK,GAAGuE,OAAO,CAACvE,KAAK,CAACyB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,MAAM;MAC7E+C,qBAAqB,EAAED,OAAO,CAACvE,KAAK;MAAE;MACtCyE,SAAS,EAAE,OAAOF,OAAO,CAACvE,KAAK;MAC/BM,WAAW,EAAEiE,OAAO,CAACvE,KAAK,GAAGuE,OAAO,CAACvE,KAAK,CAACO,MAAM,GAAG,CAAC;MACrDsC,MAAM,EAAE,CAAC,CAAC0B,OAAO,CAACzB,GAAG;MACrBC,QAAQ,EAAEwB,OAAO,CAACzB,GAAG;MACrB4B,OAAO,EAAE,OAAOH,OAAO,CAACzB;IAC1B,CAAC,CAAC;;IAEF;IACA,IAAI,CAACyB,OAAO,CAACzB,GAAG,EAAE;MAChBjD,OAAO,CAACe,KAAK,CAAC,kBAAkB,CAAC;MACjC,OAAO;QAAEc,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAkB,CAAC;IACvD;IAEA,IAAI,CAAC4C,OAAO,CAACvE,KAAK,EAAE;MAClBH,OAAO,CAACe,KAAK,CAAC,oBAAoB,CAAC;MACnC,OAAO;QAAEc,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAyD,CAAC;IAC9F;;IAEA;IACA,IAAI,OAAO4C,OAAO,CAACvE,KAAK,KAAK,QAAQ,IAAIuE,OAAO,CAACvE,KAAK,CAAC2E,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACpE9E,OAAO,CAACe,KAAK,CAAC,gCAAgC,EAAE2D,OAAO,CAACvE,KAAK,CAAC;MAC9D,OAAO;QAAE0B,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAA6D,CAAC;IAClG;IAEA,IAAI;MACF9B,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtD,MAAM8E,WAAW,GAAG;QAClB5E,KAAK,EAAEuE,OAAO,CAACvE,KAAK;QACpB8C,GAAG,EAAEyB,OAAO,CAACzB;MACf,CAAC;MACDjD,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE8E,WAAW,CAAC;MACvD/E,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE+E,IAAI,CAACC,SAAS,CAACF,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MAEzE,MAAM7D,QAAQ,GAAG,MAAMrC,WAAW,CAAC4F,uBAAuB,CAACM,WAAW,CAAC;MAEvE/E,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MACpDD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEiB,QAAQ,CAAC;MAC1ClB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEiB,QAAQ,CAACC,IAAI,CAAC;;MAE/C;MACA,IAAID,QAAQ,CAACC,IAAI,CAACU,OAAO,EAAE;QACzB7B,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C,OAAO;UACL4B,OAAO,EAAE,IAAI;UACbV,IAAI,EAAED,QAAQ,CAACC;QACjB,CAAC;MACH,CAAC,MAAM;QACLnB,OAAO,CAACe,KAAK,CAAC,mCAAmC,CAAC;QAClD,OAAO;UACLc,OAAO,EAAE,KAAK;UACdC,OAAO,EAAEZ,QAAQ,CAACC,IAAI,CAACW,OAAO,IAAI;QACpC,CAAC;MACH;IAEF,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAAmE,gBAAA,EAAAC,gBAAA,EAAAC,iBAAA,EAAAC,qBAAA;MACdrF,OAAO,CAACe,KAAK,CAAC,6CAA6C,CAAC;MAC5Df,OAAO,CAACe,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvCf,OAAO,CAACe,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACe,OAAO,CAAC;MAChD9B,OAAO,CAACe,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACG,QAAQ,CAAC;MAClDlB,OAAO,CAACe,KAAK,CAAC,wBAAwB,GAAAmE,gBAAA,GAAEnE,KAAK,CAACG,QAAQ,cAAAgE,gBAAA,uBAAdA,gBAAA,CAAgB/D,IAAI,CAAC;MAC7DnB,OAAO,CAACe,KAAK,CAAC,iBAAiB,GAAAoE,gBAAA,GAAEpE,KAAK,CAACG,QAAQ,cAAAiE,gBAAA,uBAAdA,gBAAA,CAAgBG,MAAM,CAAC;MAExD,OAAO;QACLzD,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,EAAAsD,iBAAA,GAAArE,KAAK,CAACG,QAAQ,cAAAkE,iBAAA,wBAAAC,qBAAA,GAAdD,iBAAA,CAAgBjE,IAAI,cAAAkE,qBAAA,uBAApBA,qBAAA,CAAsBvD,OAAO,KAAI;MAC5C,CAAC;IACH;EACF,CAAC;EAED,MAAMP,KAAK,GAAG;IACZ9B,IAAI;IACJI,eAAe;IACfF,OAAO;IACPqB,KAAK;IACLkB,MAAM;IACNG,MAAM;IACNI,cAAc;IACdK,aAAa;IACbU,cAAc;IACdiB;EACF,CAAC;EAEDzE,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;IAC5CJ,eAAe;IACf0F,OAAO,EAAE,CAAC,CAAC9F,IAAI;IACfE,OAAO;IACP6F,QAAQ,EAAE,CAAA/F,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiC,IAAI,KAAI;EAC1B,CAAC,CAAC;EAEF,oBACE1C,OAAA,CAACC,WAAW,CAACwG,QAAQ;IAAClE,KAAK,EAAEA,KAAM;IAAAhC,QAAA,EAChCA;EAAQ;IAAAmG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAArG,GAAA,CAjwBaF,YAAY;AAAAwG,EAAA,GAAZxG,YAAY;AAAA,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}