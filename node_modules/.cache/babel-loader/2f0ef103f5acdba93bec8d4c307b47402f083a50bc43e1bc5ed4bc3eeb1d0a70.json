{"ast":null,"code":"\n\n// // src/components/domains/DomainManagement.js - NEW FILE\n// import React, { useState, useEffect } from 'react';\n// import { authService } from '../../services/authService';\n// import { toast } from 'react-toastify';\n// import {\n//   FiPlus,\n//   FiEdit,\n//   FiTrash2,\n//   FiSearch,\n//   FiGrid,\n//   FiList,\n//   FiFolder,\n//   FiChevronRight,\n//   FiMoreVertical\n// } from 'react-icons/fi';\n\n// const DomainManagement = () => {\n//   console.log('üöÄ DOMAIN MANAGEMENT - Component rendering/mounting');\n\n//   const [domains, setDomains] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [pagination, setPagination] = useState({\n//     currentPage: 1,\n//     totalPages: 1,\n//     totalItems: 0\n//   });\n//   const [filters, setFilters] = useState({\n//     search: '',\n//     isActive: true,\n//     sortBy: 'title',\n//     sortOrder: 'ASC'\n//   });\n//   const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'list'\n//   const [showAddModal, setShowAddModal] = useState(false);\n//   const [editingDomain, setEditingDomain] = useState(null);\n//   const [selectedDomain, setSelectedDomain] = useState(null);\n\n//   console.log('üìä DOMAIN MANAGEMENT - Current state:', {\n//     domainsCount: domains.length,\n//     loading,\n//     pagination,\n//     filters,\n//     viewMode,\n//     showAddModal,\n//     editingDomain: !!editingDomain,\n//     selectedDomain: !!selectedDomain\n//   });\n\n//   useEffect(() => {\n//     console.log('üîÑ DOMAIN MANAGEMENT - useEffect triggered for fetchDomains');\n//     console.log('üìã DOMAIN MANAGEMENT - Current filters:', filters);\n//     console.log('üìã DOMAIN MANAGEMENT - Current pagination:', pagination);\n//     fetchDomains();\n//   }, [filters, pagination.currentPage]);\n\n//   const fetchDomains = async () => {\n//     try {\n//       setLoading(true);\n//       const params = {\n//         page: pagination.currentPage,\n//         limit: 10,\n//         ...filters\n//       };\n\n//       console.log('üîç DOMAIN FETCH - Starting API call');\n//       console.log('üìã DOMAIN FETCH - Request params:', params);\n//       console.log('üåê DOMAIN FETCH - API URL: /admin/domains with params:', new URLSearchParams(params).toString());\n\n//       const response = await authService.getDomains(params);\n\n//       console.log('‚úÖ DOMAIN FETCH - Full API Response:', response);\n//       console.log('üì¶ DOMAIN FETCH - Response status:', response.status);\n//       console.log('üì¶ DOMAIN FETCH - Response headers:', response.headers);\n//       console.log('üì¶ DOMAIN FETCH - Response data:', response.data);\n//       console.log('üì¶ DOMAIN FETCH - Response data type:', typeof response.data);\n//       console.log('üì¶ DOMAIN FETCH - Response data keys:', Object.keys(response.data || {}));\n\n//       const domains = response.data?.domains || response.data?.data?.domains || [];\n//       const paginationData = response.data?.pagination || response.data?.data?.pagination || pagination;\n\n//       console.log('üéØ DOMAIN FETCH - Extracted domains:', domains);\n//       console.log('üéØ DOMAIN FETCH - Extracted pagination:', paginationData);\n//       console.log('üéØ DOMAIN FETCH - Domains count:', domains.length);\n\n//       setDomains(domains);\n//       setPagination(paginationData);\n//     } catch (error) {\n//       console.error('‚ùå DOMAIN FETCH - Error occurred:', error);\n//       console.error('‚ùå DOMAIN FETCH - Error response:', error.response);\n//       console.error('‚ùå DOMAIN FETCH - Error response data:', error.response?.data);\n//       console.error('‚ùå DOMAIN FETCH - Error message:', error.message);\n//       toast.error('Failed to fetch domains');\n//     } finally {\n//       setLoading(false);\n//       console.log('üèÅ DOMAIN FETCH - Loading set to false');\n//     }\n//   };\n\n//   const handleSearch = (searchTerm) => {\n//     console.log('üîç DOMAIN SEARCH - Search initiated');\n//     console.log('üìã DOMAIN SEARCH - Search term:', searchTerm);\n//     console.log('üìã DOMAIN SEARCH - Previous filters:', filters);\n\n//     const newFilters = { ...filters, search: searchTerm };\n//     setFilters(prev => ({ ...prev, search: searchTerm }));\n//     setPagination(prev => ({ ...prev, currentPage: 1 }));\n\n//     console.log('üìã DOMAIN SEARCH - New filters:', newFilters);\n//     console.log('üìã DOMAIN SEARCH - Reset pagination to page 1');\n//   };\n\n//   const handleAddDomain = () => {\n//     console.log('‚ûï DOMAIN MANAGEMENT - Add domain clicked');\n//     setEditingDomain(null);\n//     setShowAddModal(true);\n//     console.log('üìä DOMAIN MANAGEMENT - Modal state changed:', { showAddModal: true, editingDomain: null });\n//   };\n\n//   const handleEditDomain = (domain) => {\n//     console.log('‚úèÔ∏è DOMAIN MANAGEMENT - Edit domain clicked');\n//     console.log('üìã DOMAIN MANAGEMENT - Domain to edit:', domain);\n//     setEditingDomain(domain);\n//     setShowAddModal(true);\n//     console.log('üìä DOMAIN MANAGEMENT - Modal state changed:', { showAddModal: true, editingDomain: domain });\n//   };\n\n//   const handleDeleteDomain = async (domain) => {\n//     if (!window.confirm(`Are you sure you want to delete \"${domain.title}\"?`)) {\n//       return;\n//     }\n\n//     try {\n//       console.log('üóëÔ∏è DOMAIN DELETE - Starting API call');\n//       console.log('üìã DOMAIN DELETE - Domain to delete:', domain);\n//       console.log('üåê DOMAIN DELETE - API URL: /admin/domains/' + domain.id);\n\n//       const response = await authService.deleteDomain(domain.id);\n\n//       console.log('‚úÖ DOMAIN DELETE - Full API Response:', response);\n//       console.log('üì¶ DOMAIN DELETE - Response status:', response.status);\n//       console.log('üì¶ DOMAIN DELETE - Response data:', response.data);\n\n//       toast.success('Domain deleted successfully');\n//       console.log('üéØ DOMAIN DELETE - Success, refreshing domains list');\n//       fetchDomains();\n//     } catch (error) {\n//       console.error('‚ùå DOMAIN DELETE - Error occurred:', error);\n//       console.error('‚ùå DOMAIN DELETE - Error response:', error.response);\n//       console.error('‚ùå DOMAIN DELETE - Error response data:', error.response?.data);\n//       console.error('‚ùå DOMAIN DELETE - Error message:', error.message);\n//       toast.error('Failed to delete domain');\n//     }\n//   };\n\n//   const handleViewHierarchy = async (domain) => {\n//     try {\n//       console.log('üå≥ DOMAIN HIERARCHY - Starting API call');\n//       console.log('üìã DOMAIN HIERARCHY - Domain for hierarchy:', domain);\n//       console.log('üåê DOMAIN HIERARCHY - API URL: /admin/domains/' + domain.id + '/hierarchy');\n\n//       const response = await authService.getDomainHierarchy(domain.id);\n\n//       console.log('‚úÖ DOMAIN HIERARCHY - Full API Response:', response);\n//       console.log('üì¶ DOMAIN HIERARCHY - Response status:', response.status);\n//       console.log('üì¶ DOMAIN HIERARCHY - Response data:', response.data);\n//       console.log('üì¶ DOMAIN HIERARCHY - Response data type:', typeof response.data);\n//       console.log('üì¶ DOMAIN HIERARCHY - Response data keys:', Object.keys(response.data || {}));\n\n//       const hierarchyData = response.data?.data || response.data;\n//       console.log('üéØ DOMAIN HIERARCHY - Extracted hierarchy data:', hierarchyData);\n\n//       setSelectedDomain(hierarchyData);\n//     } catch (error) {\n//       console.error('‚ùå DOMAIN HIERARCHY - Error occurred:', error);\n//       console.error('‚ùå DOMAIN HIERARCHY - Error response:', error.response);\n//       console.error('‚ùå DOMAIN HIERARCHY - Error response data:', error.response?.data);\n//       console.error('‚ùå DOMAIN HIERARCHY - Error message:', error.message);\n//       toast.error('Failed to load domain hierarchy');\n//     }\n//   };\n\n//   if (loading && domains.length === 0) {\n//     console.log('‚è≥ DOMAIN MANAGEMENT - Showing loading state');\n//     console.log('üìä DOMAIN MANAGEMENT - Loading:', loading, 'Domains count:', domains.length);\n\n//     return (\n//       <div className=\"loading-container\">\n//         <div className=\"loading-spinner\"></div>\n//         <p>Loading domains...</p>\n//       </div>\n//     );\n//   }\n\n//   console.log('üé® DOMAIN MANAGEMENT - Rendering main component');\n//   console.log('üìä DOMAIN MANAGEMENT - Final render state:', {\n//     domainsCount: domains.length,\n//     loading,\n//     viewMode,\n//     showAddModal,\n//     selectedDomain: !!selectedDomain\n//   });\n\n//   return (\n//     <div className=\"domain-management\">\n//       <div className=\"page-header\">\n//         <div className=\"header-content\">\n//           <h1>Domain Management</h1>\n//           <p>Manage your project domains and categories</p>\n//         </div>\n//         <button className=\"primary-button\" onClick={handleAddDomain}>\n//           <FiPlus />\n//           Add Domain\n//         </button>\n//       </div>\n\n//       {/* Filters and Controls */}\n//       <div className=\"controls-section\">\n//         <div className=\"search-bar\">\n//           <FiSearch className=\"search-icon\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search domains...\"\n//             value={filters.search}\n//             onChange={(e) => handleSearch(e.target.value)}\n//           />\n//         </div>\n\n//         <div className=\"view-controls\">\n//           <div className=\"filter-group\">\n//             <select\n//               value={filters.sortBy}\n//               onChange={(e) => setFilters(prev => ({ ...prev, sortBy: e.target.value }))}\n//             >\n//               <option value=\"title\">Sort by Title</option>\n//               <option value=\"createdAt\">Sort by Date</option>\n//               <option value=\"projectCount\">Sort by Projects</option>\n//             </select>\n//           </div>\n\n//           <div className=\"view-mode-toggle\">\n//             <button\n//               className={viewMode === 'grid' ? 'active' : ''}\n//               onClick={() => setViewMode('grid')}\n//             >\n//               <FiGrid />\n//             </button>\n//             <button\n//               className={viewMode === 'list' ? 'active' : ''}\n//               onClick={() => setViewMode('list')}\n//             >\n//               <FiList />\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Domains Display */}\n//       <div className={`domains-container ${viewMode}`}>\n//         {domains.length > 0 ? (\n//           domains.map((domain) => (\n//             <DomainCard\n//               key={domain.id}\n//               domain={domain}\n//               viewMode={viewMode}\n//               onEdit={handleEditDomain}\n//               onDelete={handleDeleteDomain}\n//               onViewHierarchy={handleViewHierarchy}\n//             />\n//           ))\n//         ) : (\n//           <div className=\"empty-state\">\n//             <FiFolder size={48} />\n//             <h3>No domains found</h3>\n//             <p>Create your first domain to get started</p>\n//             <button className=\"primary-button\" onClick={handleAddDomain}>\n//               <FiPlus />\n//               Add Domain\n//             </button>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Pagination */}\n//       {pagination.totalPages > 1 && (\n//         <div className=\"pagination\">\n//           <button\n//             disabled={pagination.currentPage === 1}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n//           >\n//             Previous\n//           </button>\n\n//           <span className=\"page-info\">\n//             Page {pagination.currentPage} of {pagination.totalPages}\n//             ({pagination.totalItems} total)\n//           </span>\n\n//           <button\n//             disabled={pagination.currentPage === pagination.totalPages}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n//           >\n//             Next\n//           </button>\n//         </div>\n//       )}\n\n//       {/* Add/Edit Modal */}\n//       {showAddModal && (\n//         <DomainModal\n//           domain={editingDomain}\n//           onClose={() => setShowAddModal(false)}\n//           onSave={() => {\n//             setShowAddModal(false);\n//             fetchDomains();\n//           }}\n//         />\n//       )}\n\n//       {/* Hierarchy View Modal */}\n//       {selectedDomain && (\n//         <HierarchyModal\n//           domain={selectedDomain}\n//           onClose={() => setSelectedDomain(null)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // Domain Card Component\n// const DomainCard = ({ domain, viewMode, onEdit, onDelete, onViewHierarchy }) => {\n//   const [showMenu, setShowMenu] = useState(false);\n\n//   return (\n//     <div className={`domain-card ${viewMode}`}>\n//       <div className=\"domain-header\">\n//         <div className=\"domain-icon\">\n//           <FiFolder />\n//         </div>\n//         <div className=\"domain-info\">\n//           <h3 className=\"domain-title\">{domain.title}</h3>\n//           <p className=\"domain-description\">{domain.description}</p>\n//         </div>\n//         <div className=\"domain-menu\">\n//           <button onClick={() => setShowMenu(!showMenu)}>\n//             <FiMoreVertical />\n//           </button>\n//           {showMenu && (\n//             <div className=\"dropdown-menu\">\n//               <button onClick={() => onEdit(domain)}>\n//                 <FiEdit /> Edit\n//               </button>\n//               <button onClick={() => onViewHierarchy(domain)}>\n//                 <FiChevronRight /> View Hierarchy\n//               </button>\n//               <button onClick={() => onDelete(domain)} className=\"danger\">\n//                 <FiTrash2 /> Delete\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       <div className=\"domain-stats\">\n//         <div className=\"stat\">\n//           <span className=\"stat-value\">{domain.subDomainCount || 0}</span>\n//           <span className=\"stat-label\">Sub-domains</span>\n//         </div>\n//         <div className=\"stat\">\n//           <span className=\"stat-value\">{domain.projectCount || 0}</span>\n//           <span className=\"stat-label\">Projects</span>\n//         </div>\n//         <div className=\"stat\">\n//           <span className={`status ${domain.isActive ? 'active' : 'inactive'}`}>\n//             {domain.isActive ? 'Active' : 'Inactive'}\n//           </span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Domain Modal Component\n// const DomainModal = ({ domain, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     title: domain?.title || '',\n//     description: domain?.description || ''\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     try {\n//       console.log('üíæ DOMAIN SAVE - Starting API call');\n//       console.log('üìã DOMAIN SAVE - Form data:', formData);\n//       console.log('üìã DOMAIN SAVE - Is editing?', !!domain);\n//       console.log('üìã DOMAIN SAVE - Domain ID (if editing):', domain?.id);\n\n//       if (domain) {\n//         console.log('üåê DOMAIN SAVE - API URL: /admin/domains/' + domain.id + ' (PUT)');\n//         const response = await authService.updateDomain(domain.id, formData);\n\n//         console.log('‚úÖ DOMAIN UPDATE - Full API Response:', response);\n//         console.log('üì¶ DOMAIN UPDATE - Response status:', response.status);\n//         console.log('üì¶ DOMAIN UPDATE - Response data:', response.data);\n\n//         toast.success('Domain updated successfully');\n//       } else {\n//         console.log('üåê DOMAIN SAVE - API URL: /admin/domains (POST)');\n//         const response = await authService.createDomain(formData);\n\n//         console.log('‚úÖ DOMAIN CREATE - Full API Response:', response);\n//         console.log('üì¶ DOMAIN CREATE - Response status:', response.status);\n//         console.log('üì¶ DOMAIN CREATE - Response data:', response.data);\n\n//         toast.success('Domain created successfully');\n//       }\n\n//       console.log('üéØ DOMAIN SAVE - Success, calling onSave callback');\n//       onSave();\n//     } catch (error) {\n//       console.error('‚ùå DOMAIN SAVE - Error occurred:', error);\n//       console.error('‚ùå DOMAIN SAVE - Error response:', error.response);\n//       console.error('‚ùå DOMAIN SAVE - Error response data:', error.response?.data);\n//       console.error('‚ùå DOMAIN SAVE - Error message:', error.message);\n//       toast.error('Failed to save domain');\n//     } finally {\n//       setLoading(false);\n//       console.log('üèÅ DOMAIN SAVE - Loading set to false');\n//     }\n//   };\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal\">\n//         <div className=\"modal-header\">\n//           <h2>{domain ? 'Edit Domain' : 'Add New Domain'}</h2>\n//           <button onClick={onClose}>√ó</button>\n//         </div>\n\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label>Domain Title</label>\n//             <input\n//               type=\"text\"\n//               value={formData.title}\n//               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label>Description (Optional)</label>\n//             <textarea\n//               value={formData.description}\n//               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n//               rows={3}\n//             />\n//           </div>\n\n//           <div className=\"modal-actions\">\n//             <button type=\"button\" onClick={onClose} disabled={loading}>\n//               Cancel\n//             </button>\n//             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n//               {loading ? 'Saving...' : 'Save'}\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Hierarchy Modal Component\n// const HierarchyModal = ({ domain, onClose }) => {\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal large\">\n//         <div className=\"modal-header\">\n//           <h2>Domain Hierarchy: {domain.title}</h2>\n//           <button onClick={onClose}>√ó</button>\n//         </div>\n\n//         <div className=\"hierarchy-content\">\n//           <div className=\"hierarchy-tree\">\n//             {domain.subDomains && domain.subDomains.length > 0 ? (\n//               domain.subDomains.map((subDomain) => (\n//                 <HierarchyNode key={subDomain.id} node={subDomain} level={0} />\n//               ))\n//             ) : (\n//               <p>No sub-domains found</p>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Hierarchy Node Component\n// const HierarchyNode = ({ node, level }) => {\n//   const [expanded, setExpanded] = useState(true);\n\n//   return (\n//     <div className={`hierarchy-node level-${level}`}>\n//       <div className=\"node-header\">\n//         {node.children && node.children.length > 0 && (\n//           <button \n//             className=\"expand-button\"\n//             onClick={() => setExpanded(!expanded)}\n//           >\n//             <FiChevronRight className={expanded ? 'expanded' : ''} />\n//           </button>\n//         )}\n//         <FiFolder className=\"node-icon\" />\n//         <span className=\"node-title\">{node.title}</span>\n//         {node.projects && (\n//           <span className=\"project-count\">({node.projects.length} projects)</span>\n//         )}\n//       </div>\n\n//       {expanded && node.children && node.children.length > 0 && (\n//         <div className=\"node-children\">\n//           {node.children.map((child) => (\n//             <HierarchyNode key={child.id} node={child} level={level + 1} />\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default DomainManagement;","map":{"version":3,"names":[],"sources":["/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/components/domains/DomainManagement.js"],"sourcesContent":["\n\n\n// // src/components/domains/DomainManagement.js - NEW FILE\n// import React, { useState, useEffect } from 'react';\n// import { authService } from '../../services/authService';\n// import { toast } from 'react-toastify';\n// import {\n//   FiPlus,\n//   FiEdit,\n//   FiTrash2,\n//   FiSearch,\n//   FiGrid,\n//   FiList,\n//   FiFolder,\n//   FiChevronRight,\n//   FiMoreVertical\n// } from 'react-icons/fi';\n\n// const DomainManagement = () => {\n//   console.log('üöÄ DOMAIN MANAGEMENT - Component rendering/mounting');\n  \n//   const [domains, setDomains] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [pagination, setPagination] = useState({\n//     currentPage: 1,\n//     totalPages: 1,\n//     totalItems: 0\n//   });\n//   const [filters, setFilters] = useState({\n//     search: '',\n//     isActive: true,\n//     sortBy: 'title',\n//     sortOrder: 'ASC'\n//   });\n//   const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'list'\n//   const [showAddModal, setShowAddModal] = useState(false);\n//   const [editingDomain, setEditingDomain] = useState(null);\n//   const [selectedDomain, setSelectedDomain] = useState(null);\n\n//   console.log('üìä DOMAIN MANAGEMENT - Current state:', {\n//     domainsCount: domains.length,\n//     loading,\n//     pagination,\n//     filters,\n//     viewMode,\n//     showAddModal,\n//     editingDomain: !!editingDomain,\n//     selectedDomain: !!selectedDomain\n//   });\n\n//   useEffect(() => {\n//     console.log('üîÑ DOMAIN MANAGEMENT - useEffect triggered for fetchDomains');\n//     console.log('üìã DOMAIN MANAGEMENT - Current filters:', filters);\n//     console.log('üìã DOMAIN MANAGEMENT - Current pagination:', pagination);\n//     fetchDomains();\n//   }, [filters, pagination.currentPage]);\n\n//   const fetchDomains = async () => {\n//     try {\n//       setLoading(true);\n//       const params = {\n//         page: pagination.currentPage,\n//         limit: 10,\n//         ...filters\n//       };\n      \n//       console.log('üîç DOMAIN FETCH - Starting API call');\n//       console.log('üìã DOMAIN FETCH - Request params:', params);\n//       console.log('üåê DOMAIN FETCH - API URL: /admin/domains with params:', new URLSearchParams(params).toString());\n      \n//       const response = await authService.getDomains(params);\n      \n//       console.log('‚úÖ DOMAIN FETCH - Full API Response:', response);\n//       console.log('üì¶ DOMAIN FETCH - Response status:', response.status);\n//       console.log('üì¶ DOMAIN FETCH - Response headers:', response.headers);\n//       console.log('üì¶ DOMAIN FETCH - Response data:', response.data);\n//       console.log('üì¶ DOMAIN FETCH - Response data type:', typeof response.data);\n//       console.log('üì¶ DOMAIN FETCH - Response data keys:', Object.keys(response.data || {}));\n      \n//       const domains = response.data?.domains || response.data?.data?.domains || [];\n//       const paginationData = response.data?.pagination || response.data?.data?.pagination || pagination;\n      \n//       console.log('üéØ DOMAIN FETCH - Extracted domains:', domains);\n//       console.log('üéØ DOMAIN FETCH - Extracted pagination:', paginationData);\n//       console.log('üéØ DOMAIN FETCH - Domains count:', domains.length);\n      \n//       setDomains(domains);\n//       setPagination(paginationData);\n//     } catch (error) {\n//       console.error('‚ùå DOMAIN FETCH - Error occurred:', error);\n//       console.error('‚ùå DOMAIN FETCH - Error response:', error.response);\n//       console.error('‚ùå DOMAIN FETCH - Error response data:', error.response?.data);\n//       console.error('‚ùå DOMAIN FETCH - Error message:', error.message);\n//       toast.error('Failed to fetch domains');\n//     } finally {\n//       setLoading(false);\n//       console.log('üèÅ DOMAIN FETCH - Loading set to false');\n//     }\n//   };\n\n//   const handleSearch = (searchTerm) => {\n//     console.log('üîç DOMAIN SEARCH - Search initiated');\n//     console.log('üìã DOMAIN SEARCH - Search term:', searchTerm);\n//     console.log('üìã DOMAIN SEARCH - Previous filters:', filters);\n    \n//     const newFilters = { ...filters, search: searchTerm };\n//     setFilters(prev => ({ ...prev, search: searchTerm }));\n//     setPagination(prev => ({ ...prev, currentPage: 1 }));\n    \n//     console.log('üìã DOMAIN SEARCH - New filters:', newFilters);\n//     console.log('üìã DOMAIN SEARCH - Reset pagination to page 1');\n//   };\n\n//   const handleAddDomain = () => {\n//     console.log('‚ûï DOMAIN MANAGEMENT - Add domain clicked');\n//     setEditingDomain(null);\n//     setShowAddModal(true);\n//     console.log('üìä DOMAIN MANAGEMENT - Modal state changed:', { showAddModal: true, editingDomain: null });\n//   };\n\n//   const handleEditDomain = (domain) => {\n//     console.log('‚úèÔ∏è DOMAIN MANAGEMENT - Edit domain clicked');\n//     console.log('üìã DOMAIN MANAGEMENT - Domain to edit:', domain);\n//     setEditingDomain(domain);\n//     setShowAddModal(true);\n//     console.log('üìä DOMAIN MANAGEMENT - Modal state changed:', { showAddModal: true, editingDomain: domain });\n//   };\n\n//   const handleDeleteDomain = async (domain) => {\n//     if (!window.confirm(`Are you sure you want to delete \"${domain.title}\"?`)) {\n//       return;\n//     }\n\n//     try {\n//       console.log('üóëÔ∏è DOMAIN DELETE - Starting API call');\n//       console.log('üìã DOMAIN DELETE - Domain to delete:', domain);\n//       console.log('üåê DOMAIN DELETE - API URL: /admin/domains/' + domain.id);\n      \n//       const response = await authService.deleteDomain(domain.id);\n      \n//       console.log('‚úÖ DOMAIN DELETE - Full API Response:', response);\n//       console.log('üì¶ DOMAIN DELETE - Response status:', response.status);\n//       console.log('üì¶ DOMAIN DELETE - Response data:', response.data);\n      \n//       toast.success('Domain deleted successfully');\n//       console.log('üéØ DOMAIN DELETE - Success, refreshing domains list');\n//       fetchDomains();\n//     } catch (error) {\n//       console.error('‚ùå DOMAIN DELETE - Error occurred:', error);\n//       console.error('‚ùå DOMAIN DELETE - Error response:', error.response);\n//       console.error('‚ùå DOMAIN DELETE - Error response data:', error.response?.data);\n//       console.error('‚ùå DOMAIN DELETE - Error message:', error.message);\n//       toast.error('Failed to delete domain');\n//     }\n//   };\n\n//   const handleViewHierarchy = async (domain) => {\n//     try {\n//       console.log('üå≥ DOMAIN HIERARCHY - Starting API call');\n//       console.log('üìã DOMAIN HIERARCHY - Domain for hierarchy:', domain);\n//       console.log('üåê DOMAIN HIERARCHY - API URL: /admin/domains/' + domain.id + '/hierarchy');\n      \n//       const response = await authService.getDomainHierarchy(domain.id);\n      \n//       console.log('‚úÖ DOMAIN HIERARCHY - Full API Response:', response);\n//       console.log('üì¶ DOMAIN HIERARCHY - Response status:', response.status);\n//       console.log('üì¶ DOMAIN HIERARCHY - Response data:', response.data);\n//       console.log('üì¶ DOMAIN HIERARCHY - Response data type:', typeof response.data);\n//       console.log('üì¶ DOMAIN HIERARCHY - Response data keys:', Object.keys(response.data || {}));\n      \n//       const hierarchyData = response.data?.data || response.data;\n//       console.log('üéØ DOMAIN HIERARCHY - Extracted hierarchy data:', hierarchyData);\n      \n//       setSelectedDomain(hierarchyData);\n//     } catch (error) {\n//       console.error('‚ùå DOMAIN HIERARCHY - Error occurred:', error);\n//       console.error('‚ùå DOMAIN HIERARCHY - Error response:', error.response);\n//       console.error('‚ùå DOMAIN HIERARCHY - Error response data:', error.response?.data);\n//       console.error('‚ùå DOMAIN HIERARCHY - Error message:', error.message);\n//       toast.error('Failed to load domain hierarchy');\n//     }\n//   };\n\n//   if (loading && domains.length === 0) {\n//     console.log('‚è≥ DOMAIN MANAGEMENT - Showing loading state');\n//     console.log('üìä DOMAIN MANAGEMENT - Loading:', loading, 'Domains count:', domains.length);\n    \n//     return (\n//       <div className=\"loading-container\">\n//         <div className=\"loading-spinner\"></div>\n//         <p>Loading domains...</p>\n//       </div>\n//     );\n//   }\n\n//   console.log('üé® DOMAIN MANAGEMENT - Rendering main component');\n//   console.log('üìä DOMAIN MANAGEMENT - Final render state:', {\n//     domainsCount: domains.length,\n//     loading,\n//     viewMode,\n//     showAddModal,\n//     selectedDomain: !!selectedDomain\n//   });\n\n//   return (\n//     <div className=\"domain-management\">\n//       <div className=\"page-header\">\n//         <div className=\"header-content\">\n//           <h1>Domain Management</h1>\n//           <p>Manage your project domains and categories</p>\n//         </div>\n//         <button className=\"primary-button\" onClick={handleAddDomain}>\n//           <FiPlus />\n//           Add Domain\n//         </button>\n//       </div>\n\n//       {/* Filters and Controls */}\n//       <div className=\"controls-section\">\n//         <div className=\"search-bar\">\n//           <FiSearch className=\"search-icon\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search domains...\"\n//             value={filters.search}\n//             onChange={(e) => handleSearch(e.target.value)}\n//           />\n//         </div>\n        \n//         <div className=\"view-controls\">\n//           <div className=\"filter-group\">\n//             <select\n//               value={filters.sortBy}\n//               onChange={(e) => setFilters(prev => ({ ...prev, sortBy: e.target.value }))}\n//             >\n//               <option value=\"title\">Sort by Title</option>\n//               <option value=\"createdAt\">Sort by Date</option>\n//               <option value=\"projectCount\">Sort by Projects</option>\n//             </select>\n//           </div>\n          \n//           <div className=\"view-mode-toggle\">\n//             <button\n//               className={viewMode === 'grid' ? 'active' : ''}\n//               onClick={() => setViewMode('grid')}\n//             >\n//               <FiGrid />\n//             </button>\n//             <button\n//               className={viewMode === 'list' ? 'active' : ''}\n//               onClick={() => setViewMode('list')}\n//             >\n//               <FiList />\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Domains Display */}\n//       <div className={`domains-container ${viewMode}`}>\n//         {domains.length > 0 ? (\n//           domains.map((domain) => (\n//             <DomainCard\n//               key={domain.id}\n//               domain={domain}\n//               viewMode={viewMode}\n//               onEdit={handleEditDomain}\n//               onDelete={handleDeleteDomain}\n//               onViewHierarchy={handleViewHierarchy}\n//             />\n//           ))\n//         ) : (\n//           <div className=\"empty-state\">\n//             <FiFolder size={48} />\n//             <h3>No domains found</h3>\n//             <p>Create your first domain to get started</p>\n//             <button className=\"primary-button\" onClick={handleAddDomain}>\n//               <FiPlus />\n//               Add Domain\n//             </button>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Pagination */}\n//       {pagination.totalPages > 1 && (\n//         <div className=\"pagination\">\n//           <button\n//             disabled={pagination.currentPage === 1}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n//           >\n//             Previous\n//           </button>\n          \n//           <span className=\"page-info\">\n//             Page {pagination.currentPage} of {pagination.totalPages}\n//             ({pagination.totalItems} total)\n//           </span>\n          \n//           <button\n//             disabled={pagination.currentPage === pagination.totalPages}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n//           >\n//             Next\n//           </button>\n//         </div>\n//       )}\n\n//       {/* Add/Edit Modal */}\n//       {showAddModal && (\n//         <DomainModal\n//           domain={editingDomain}\n//           onClose={() => setShowAddModal(false)}\n//           onSave={() => {\n//             setShowAddModal(false);\n//             fetchDomains();\n//           }}\n//         />\n//       )}\n\n//       {/* Hierarchy View Modal */}\n//       {selectedDomain && (\n//         <HierarchyModal\n//           domain={selectedDomain}\n//           onClose={() => setSelectedDomain(null)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // Domain Card Component\n// const DomainCard = ({ domain, viewMode, onEdit, onDelete, onViewHierarchy }) => {\n//   const [showMenu, setShowMenu] = useState(false);\n\n//   return (\n//     <div className={`domain-card ${viewMode}`}>\n//       <div className=\"domain-header\">\n//         <div className=\"domain-icon\">\n//           <FiFolder />\n//         </div>\n//         <div className=\"domain-info\">\n//           <h3 className=\"domain-title\">{domain.title}</h3>\n//           <p className=\"domain-description\">{domain.description}</p>\n//         </div>\n//         <div className=\"domain-menu\">\n//           <button onClick={() => setShowMenu(!showMenu)}>\n//             <FiMoreVertical />\n//           </button>\n//           {showMenu && (\n//             <div className=\"dropdown-menu\">\n//               <button onClick={() => onEdit(domain)}>\n//                 <FiEdit /> Edit\n//               </button>\n//               <button onClick={() => onViewHierarchy(domain)}>\n//                 <FiChevronRight /> View Hierarchy\n//               </button>\n//               <button onClick={() => onDelete(domain)} className=\"danger\">\n//                 <FiTrash2 /> Delete\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n      \n//       <div className=\"domain-stats\">\n//         <div className=\"stat\">\n//           <span className=\"stat-value\">{domain.subDomainCount || 0}</span>\n//           <span className=\"stat-label\">Sub-domains</span>\n//         </div>\n//         <div className=\"stat\">\n//           <span className=\"stat-value\">{domain.projectCount || 0}</span>\n//           <span className=\"stat-label\">Projects</span>\n//         </div>\n//         <div className=\"stat\">\n//           <span className={`status ${domain.isActive ? 'active' : 'inactive'}`}>\n//             {domain.isActive ? 'Active' : 'Inactive'}\n//           </span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Domain Modal Component\n// const DomainModal = ({ domain, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     title: domain?.title || '',\n//     description: domain?.description || ''\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     try {\n//       console.log('üíæ DOMAIN SAVE - Starting API call');\n//       console.log('üìã DOMAIN SAVE - Form data:', formData);\n//       console.log('üìã DOMAIN SAVE - Is editing?', !!domain);\n//       console.log('üìã DOMAIN SAVE - Domain ID (if editing):', domain?.id);\n      \n//       if (domain) {\n//         console.log('üåê DOMAIN SAVE - API URL: /admin/domains/' + domain.id + ' (PUT)');\n//         const response = await authService.updateDomain(domain.id, formData);\n        \n//         console.log('‚úÖ DOMAIN UPDATE - Full API Response:', response);\n//         console.log('üì¶ DOMAIN UPDATE - Response status:', response.status);\n//         console.log('üì¶ DOMAIN UPDATE - Response data:', response.data);\n        \n//         toast.success('Domain updated successfully');\n//       } else {\n//         console.log('üåê DOMAIN SAVE - API URL: /admin/domains (POST)');\n//         const response = await authService.createDomain(formData);\n        \n//         console.log('‚úÖ DOMAIN CREATE - Full API Response:', response);\n//         console.log('üì¶ DOMAIN CREATE - Response status:', response.status);\n//         console.log('üì¶ DOMAIN CREATE - Response data:', response.data);\n        \n//         toast.success('Domain created successfully');\n//       }\n      \n//       console.log('üéØ DOMAIN SAVE - Success, calling onSave callback');\n//       onSave();\n//     } catch (error) {\n//       console.error('‚ùå DOMAIN SAVE - Error occurred:', error);\n//       console.error('‚ùå DOMAIN SAVE - Error response:', error.response);\n//       console.error('‚ùå DOMAIN SAVE - Error response data:', error.response?.data);\n//       console.error('‚ùå DOMAIN SAVE - Error message:', error.message);\n//       toast.error('Failed to save domain');\n//     } finally {\n//       setLoading(false);\n//       console.log('üèÅ DOMAIN SAVE - Loading set to false');\n//     }\n//   };\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal\">\n//         <div className=\"modal-header\">\n//           <h2>{domain ? 'Edit Domain' : 'Add New Domain'}</h2>\n//           <button onClick={onClose}>√ó</button>\n//         </div>\n        \n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label>Domain Title</label>\n//             <input\n//               type=\"text\"\n//               value={formData.title}\n//               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n//               required\n//             />\n//           </div>\n          \n//           <div className=\"form-group\">\n//             <label>Description (Optional)</label>\n//             <textarea\n//               value={formData.description}\n//               onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n//               rows={3}\n//             />\n//           </div>\n          \n//           <div className=\"modal-actions\">\n//             <button type=\"button\" onClick={onClose} disabled={loading}>\n//               Cancel\n//             </button>\n//             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n//               {loading ? 'Saving...' : 'Save'}\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Hierarchy Modal Component\n// const HierarchyModal = ({ domain, onClose }) => {\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal large\">\n//         <div className=\"modal-header\">\n//           <h2>Domain Hierarchy: {domain.title}</h2>\n//           <button onClick={onClose}>√ó</button>\n//         </div>\n        \n//         <div className=\"hierarchy-content\">\n//           <div className=\"hierarchy-tree\">\n//             {domain.subDomains && domain.subDomains.length > 0 ? (\n//               domain.subDomains.map((subDomain) => (\n//                 <HierarchyNode key={subDomain.id} node={subDomain} level={0} />\n//               ))\n//             ) : (\n//               <p>No sub-domains found</p>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Hierarchy Node Component\n// const HierarchyNode = ({ node, level }) => {\n//   const [expanded, setExpanded] = useState(true);\n\n//   return (\n//     <div className={`hierarchy-node level-${level}`}>\n//       <div className=\"node-header\">\n//         {node.children && node.children.length > 0 && (\n//           <button \n//             className=\"expand-button\"\n//             onClick={() => setExpanded(!expanded)}\n//           >\n//             <FiChevronRight className={expanded ? 'expanded' : ''} />\n//           </button>\n//         )}\n//         <FiFolder className=\"node-icon\" />\n//         <span className=\"node-title\">{node.title}</span>\n//         {node.projects && (\n//           <span className=\"project-count\">({node.projects.length} projects)</span>\n//         )}\n//       </div>\n      \n//       {expanded && node.children && node.children.length > 0 && (\n//         <div className=\"node-children\">\n//           {node.children.map((child) => (\n//             <HierarchyNode key={child.id} node={child} level={level + 1} />\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default DomainManagement;\n\n\n"],"mappings":";;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}