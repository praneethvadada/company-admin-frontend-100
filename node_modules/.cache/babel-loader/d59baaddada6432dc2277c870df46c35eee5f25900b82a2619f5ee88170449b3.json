{"ast":null,"code":"var _jsxFileName = \"/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/components/internships/ManageBranches.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/internships/ManageBranches.js\nimport React, { useState, useEffect } from 'react';\nimport { FiPlus, FiEdit, FiTrash2, FiSettings, FiBookOpen, FiUsers, FiSearch, FiGrid, FiList, FiInfo, FiAlertTriangle } from 'react-icons/fi';\nimport { toast } from 'react-toastify';\nimport Modal from '../common/Modal';\nimport ConfirmationModal from '../common/ConfirmationModal';\nimport { branchService } from '../../services/branchService';\nimport './ManageBranches.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageBranches = () => {\n  _s();\n  const [branches, setBranches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showModal, setShowModal] = useState(false);\n  const [editingBranch, setEditingBranch] = useState(null);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [branchToDelete, setBranchToDelete] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [viewMode, setViewMode] = useState('grid');\n  const [selectedBranch, setSelectedBranch] = useState(null);\n  const [showDomainModal, setShowDomainModal] = useState(false);\n  const [showInternshipModal, setShowInternshipModal] = useState(false);\n  useEffect(() => {\n    fetchBranches();\n  }, []);\n  const fetchBranches = async () => {\n    try {\n      var _response$data, _response$data$data, _response$data2, _response$data3;\n      setLoading(true);\n      console.log('🔄 Fetching branches from API...');\n      const response = await branchService.getAllBranches();\n      console.log('✅ API Response:', response);\n      let branchesData = [];\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data$data = _response$data.data) !== null && _response$data$data !== void 0 && _response$data$data.branches) {\n        branchesData = response.data.data.branches;\n      } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.branches) {\n        branchesData = response.data.branches;\n      } else if (Array.isArray((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.data)) {\n        branchesData = response.data.data;\n      } else if (Array.isArray(response.data)) {\n        branchesData = response.data;\n      }\n      if (Array.isArray(branchesData) && branchesData.length > 0) {\n        setBranches(branchesData);\n        toast.success(`Loaded ${branchesData.length} branches successfully!`);\n      } else {\n        setBranches([]);\n        toast.warning('No branches found');\n      }\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('❌ Error fetching branches:', error);\n      setBranches([]);\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        toast.error('Authentication required. Please login again.');\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 500) {\n        toast.error('Server error. Please check if the backend is running.');\n      } else {\n        toast.error('Failed to fetch branches. Please try again.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ✅ CHECK BRANCH STATE - determines what actions are allowed\n  const getBranchState = async branch => {\n    try {\n      var _domainsResponse$data, _internshipsResponse$;\n      // Fetch domains and direct internships for this branch\n      const [domainsResponse, internshipsResponse] = await Promise.all([branchService.getDomainsByBranch(branch.id).catch(() => ({\n        data: []\n      })), branchService.getDirectInternships(branch.id).catch(() => ({\n        data: []\n      }))]);\n      const domains = ((_domainsResponse$data = domainsResponse.data) === null || _domainsResponse$data === void 0 ? void 0 : _domainsResponse$data.data) || domainsResponse.data || [];\n      const directInternships = ((_internshipsResponse$ = internshipsResponse.data) === null || _internshipsResponse$ === void 0 ? void 0 : _internshipsResponse$.data) || internshipsResponse.data || [];\n      const hasDomains = Array.isArray(domains) && domains.length > 0;\n      const hasDirectInternships = Array.isArray(directInternships) && directInternships.length > 0;\n      return {\n        hasDomains,\n        hasDirectInternships,\n        domainCount: hasDomains ? domains.length : 0,\n        directInternshipCount: hasDirectInternships ? directInternships.length : 0,\n        // Branch state logic\n        canAddDomains: !hasDirectInternships,\n        // Can add domains only if no direct internships\n        canAddDirectInternships: !hasDomains,\n        // Can add direct internships only if no domains\n        mode: hasDomains ? 'domain-based' : hasDirectInternships ? 'direct' : 'empty'\n      };\n    } catch (error) {\n      console.error('Error checking branch state:', error);\n      return {\n        hasDomains: false,\n        hasDirectInternships: false,\n        domainCount: 0,\n        directInternshipCount: 0,\n        canAddDomains: true,\n        canAddDirectInternships: true,\n        mode: 'empty'\n      };\n    }\n  };\n  const handleSaveBranch = async branchData => {\n    try {\n      console.log('💾 Saving branch:', branchData);\n      if (editingBranch) {\n        await branchService.updateBranch(editingBranch.id, branchData);\n        toast.success('Branch updated successfully');\n      } else {\n        await branchService.createBranch(branchData);\n        toast.success('Branch created successfully');\n      }\n      setShowModal(false);\n      setEditingBranch(null);\n      fetchBranches();\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('❌ Error saving branch:', error);\n      if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error('Failed to save branch');\n      }\n    }\n  };\n  const handleDeleteBranch = async () => {\n    try {\n      await branchService.deleteBranch(branchToDelete.id);\n      toast.success('Branch deleted successfully');\n      setShowDeleteModal(false);\n      setBranchToDelete(null);\n      fetchBranches();\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('❌ Error deleting branch:', error);\n      if ((_error$response4 = error.response) !== null && _error$response4 !== void 0 && (_error$response4$data = _error$response4.data) !== null && _error$response4$data !== void 0 && _error$response4$data.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error('Failed to delete branch');\n      }\n    }\n  };\n\n  // ✅ SMART BRANCH ACTION HANDLER\n  const handleBranchAction = async (branch, action) => {\n    const branchState = await getBranchState(branch);\n    if (action === 'domains') {\n      if (!branchState.canAddDomains) {\n        toast.warning(`Cannot add domains to ${branch.name} because it has direct internships. ` + `A branch can either have domains OR direct internships, not both.`);\n        return;\n      }\n      setSelectedBranch({\n        ...branch,\n        state: branchState\n      });\n      setShowDomainModal(true);\n    } else if (action === 'internships') {\n      if (!branchState.canAddDirectInternships) {\n        toast.warning(`Cannot add direct internships to ${branch.name} because it has domains. ` + `Please add internships within the existing domains instead.`);\n        return;\n      }\n      setSelectedBranch({\n        ...branch,\n        state: branchState\n      });\n      setShowInternshipModal(true);\n    }\n  };\n  const filteredBranches = Array.isArray(branches) ? branches.filter(branch => {\n    var _branch$name, _branch$code;\n    return ((_branch$name = branch.name) === null || _branch$name === void 0 ? void 0 : _branch$name.toLowerCase().includes(searchTerm.toLowerCase())) || ((_branch$code = branch.code) === null || _branch$code === void 0 ? void 0 : _branch$code.toLowerCase().includes(searchTerm.toLowerCase()));\n  }) : [];\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading branches...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"manage-branches\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Manage Branches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Manage academic branches and their associated domains or direct internships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: () => {\n          setEditingBranch(null);\n          setShowModal(true);\n        },\n        children: [/*#__PURE__*/_jsxDEV(FiPlus, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), \" Add Branch\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-box\",\n          children: [/*#__PURE__*/_jsxDEV(FiSearch, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search branches...\",\n            value: searchTerm,\n            onChange: e => setSearchTerm(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"view-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `view-btn ${viewMode === 'grid' ? 'active' : ''}`,\n          onClick: () => setViewMode('grid'),\n          children: /*#__PURE__*/_jsxDEV(FiGrid, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `view-btn ${viewMode === 'list' ? 'active' : ''}`,\n          onClick: () => setViewMode('list'),\n          children: /*#__PURE__*/_jsxDEV(FiList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-panel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-card\",\n        children: [/*#__PURE__*/_jsxDEV(FiInfo, {\n          className: \"info-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Branch Organization Rules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Domain-based:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 19\n              }, this), \" Create domains first, then add internships within domains\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Direct internships:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 19\n              }, this), \" Add internships directly to the branch without domains\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Exclusive:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 19\n              }, this), \" A branch can have either domains OR direct internships, not both\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `branches-container ${viewMode}`,\n      children: filteredBranches.map(branch => /*#__PURE__*/_jsxDEV(EnhancedBranchCard, {\n        branch: branch,\n        viewMode: viewMode,\n        onEdit: branch => {\n          setEditingBranch(branch);\n          setShowModal(true);\n        },\n        onDelete: branch => {\n          setBranchToDelete(branch);\n          setShowDeleteModal(true);\n        },\n        onBranchAction: handleBranchAction,\n        getBranchState: getBranchState\n      }, branch.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), filteredBranches.length === 0 && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-state\",\n      children: [/*#__PURE__*/_jsxDEV(FiBookOpen, {\n        size: 48\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"No branches found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Get started by creating your first branch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: () => {\n          setEditingBranch(null);\n          setShowModal(true);\n        },\n        children: [/*#__PURE__*/_jsxDEV(FiPlus, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), \" Add Branch\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this), showModal && /*#__PURE__*/_jsxDEV(BranchModal, {\n      branch: editingBranch,\n      onClose: () => {\n        setShowModal(false);\n        setEditingBranch(null);\n      },\n      onSave: handleSaveBranch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }, this), showDeleteModal && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      title: \"Delete Branch\",\n      message: `Are you sure you want to delete \"${branchToDelete === null || branchToDelete === void 0 ? void 0 : branchToDelete.name}\"? This action cannot be undone.`,\n      onConfirm: handleDeleteBranch,\n      onCancel: () => {\n        setShowDeleteModal(false);\n        setBranchToDelete(null);\n      },\n      confirmText: \"Delete\",\n      cancelText: \"Cancel\",\n      type: \"danger\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this), showDomainModal && selectedBranch && /*#__PURE__*/_jsxDEV(DomainManagementModal, {\n      branch: selectedBranch,\n      onClose: () => {\n        setShowDomainModal(false);\n        setSelectedBranch(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }, this), showInternshipModal && selectedBranch && /*#__PURE__*/_jsxDEV(DirectInternshipModal, {\n      branch: selectedBranch,\n      onClose: () => {\n        setShowInternshipModal(false);\n        setSelectedBranch(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n\n// ✅ ENHANCED BRANCH CARD WITH STATE LOGIC\n_s(ManageBranches, \"tD2w9WY4y15tJL4Gt9w2IcpFvMI=\");\n_c = ManageBranches;\nconst EnhancedBranchCard = ({\n  branch,\n  viewMode,\n  onEdit,\n  onDelete,\n  onBranchAction,\n  getBranchState\n}) => {\n  _s2();\n  const [showMenu, setShowMenu] = useState(false);\n  const [branchState, setBranchState] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    loadBranchState();\n  }, [branch.id]);\n  const loadBranchState = async () => {\n    try {\n      setLoading(true);\n      const state = await getBranchState(branch);\n      setBranchState(state);\n    } catch (error) {\n      console.error('Error loading branch state:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `branch-card ${viewMode} loading`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner-sm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Loading branch data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `branch-card ${viewMode} ${branchState === null || branchState === void 0 ? void 0 : branchState.mode}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"branch-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"branch-icon\",\n        children: /*#__PURE__*/_jsxDEV(FiBookOpen, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"branch-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"branch-name\",\n          children: branch.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"branch-code\",\n          children: branch.code\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this), branch.description && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"branch-description\",\n          children: branch.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"branch-state\",\n          children: [(branchState === null || branchState === void 0 ? void 0 : branchState.mode) === 'domain-based' && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"state-badge domain-based\",\n            children: [/*#__PURE__*/_jsxDEV(FiGrid, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 17\n            }, this), \" Domain-based (\", branchState.domainCount, \" domains)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this), (branchState === null || branchState === void 0 ? void 0 : branchState.mode) === 'direct' && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"state-badge direct\",\n            children: [/*#__PURE__*/_jsxDEV(FiUsers, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 17\n            }, this), \" Direct internships (\", branchState.directInternshipCount, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 15\n          }, this), (branchState === null || branchState === void 0 ? void 0 : branchState.mode) === 'empty' && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"state-badge empty\",\n            children: [/*#__PURE__*/_jsxDEV(FiInfo, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 17\n            }, this), \" Ready to configure\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"branch-menu\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowMenu(!showMenu),\n          children: /*#__PURE__*/_jsxDEV(FiSettings, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-menu\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              onBranchAction(branch, 'domains');\n              setShowMenu(false);\n            },\n            disabled: !(branchState !== null && branchState !== void 0 && branchState.canAddDomains),\n            className: !(branchState !== null && branchState !== void 0 && branchState.canAddDomains) ? 'disabled' : '',\n            title: !(branchState !== null && branchState !== void 0 && branchState.canAddDomains) ? 'Cannot add domains - branch has direct internships' : '',\n            children: [/*#__PURE__*/_jsxDEV(FiGrid, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 17\n            }, this), branchState !== null && branchState !== void 0 && branchState.hasDomains ? 'Manage Domains' : 'Add Domains', !(branchState !== null && branchState !== void 0 && branchState.canAddDomains) && /*#__PURE__*/_jsxDEV(FiAlertTriangle, {\n              className: \"warning-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              onBranchAction(branch, 'internships');\n              setShowMenu(false);\n            },\n            disabled: !(branchState !== null && branchState !== void 0 && branchState.canAddDirectInternships),\n            className: !(branchState !== null && branchState !== void 0 && branchState.canAddDirectInternships) ? 'disabled' : '',\n            title: !(branchState !== null && branchState !== void 0 && branchState.canAddDirectInternships) ? 'Cannot add direct internships - branch has domains' : '',\n            children: [/*#__PURE__*/_jsxDEV(FiUsers, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 17\n            }, this), branchState !== null && branchState !== void 0 && branchState.hasDirectInternships ? 'Manage Internships' : 'Add Direct Internships', !(branchState !== null && branchState !== void 0 && branchState.canAddDirectInternships) && /*#__PURE__*/_jsxDEV(FiAlertTriangle, {\n              className: \"warning-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 59\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"menu-divider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              onEdit(branch);\n              setShowMenu(false);\n            },\n            children: [/*#__PURE__*/_jsxDEV(FiEdit, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 17\n            }, this), \" Edit Branch\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              onDelete(branch);\n              setShowMenu(false);\n            },\n            className: \"danger\",\n            children: [/*#__PURE__*/_jsxDEV(FiTrash2, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 17\n            }, this), \" Delete Branch\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"branch-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-value\",\n          children: (branchState === null || branchState === void 0 ? void 0 : branchState.domainCount) || 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: \"Domains\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-value\",\n          children: ((branchState === null || branchState === void 0 ? void 0 : branchState.directInternshipCount) || 0) + (branch.internshipCount || 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: \"Internships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-value\",\n          children: branch.totalLearners || 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: \"Learners\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status ${branch.isActive ? 'active' : 'inactive'}`,\n          children: branch.isActive ? 'Active' : 'Inactive'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"branch-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-sm ${branchState !== null && branchState !== void 0 && branchState.canAddDomains ? 'btn-outline' : 'btn-disabled'}`,\n        onClick: () => onBranchAction(branch, 'domains'),\n        disabled: !(branchState !== null && branchState !== void 0 && branchState.canAddDomains),\n        title: !(branchState !== null && branchState !== void 0 && branchState.canAddDomains) ? 'Cannot add domains - branch has direct internships' : '',\n        children: [/*#__PURE__*/_jsxDEV(FiGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this), \" Domains\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-sm ${branchState !== null && branchState !== void 0 && branchState.canAddDirectInternships ? 'btn-outline' : 'btn-disabled'}`,\n        onClick: () => onBranchAction(branch, 'internships'),\n        disabled: !(branchState !== null && branchState !== void 0 && branchState.canAddDirectInternships),\n        title: !(branchState !== null && branchState !== void 0 && branchState.canAddDirectInternships) ? 'Cannot add direct internships - branch has domains' : '',\n        children: [/*#__PURE__*/_jsxDEV(FiUsers, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this), \" Internships\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 5\n  }, this);\n};\n\n// Keep existing BranchModal, DomainManagementModal, and DirectInternshipModal components...\n// (Previous implementations remain the same)\n_s2(EnhancedBranchCard, \"RE/1CJX3GMBuAXxSpdb30qv3yhQ=\");\n_c2 = EnhancedBranchCard;\nexport default ManageBranches;\n\n// // src/components/internships/ManageBranches.js - REAL API INTEGRATION\n\n// import React, { useState, useEffect } from 'react';\n// import { \n//   FiPlus, \n//   FiEdit, \n//   FiTrash2, \n//   FiSettings, \n//   FiBookOpen,\n//   FiUsers,\n//   FiSearch,\n//   FiGrid,\n//   FiList\n// } from 'react-icons/fi';\n// import { toast } from 'react-toastify';\n// import Modal from '../common/Modal';\n// import ConfirmationModal from '../common/ConfirmationModal';\n// import { branchService } from '../../services/branchService';\n// import './ManageBranches.css';\n\n// const ManageBranches = () => {\n//   const [branches, setBranches] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [showModal, setShowModal] = useState(false);\n//   const [editingBranch, setEditingBranch] = useState(null);\n//   const [showDeleteModal, setShowDeleteModal] = useState(false);\n//   const [branchToDelete, setBranchToDelete] = useState(null);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [viewMode, setViewMode] = useState('grid');\n//   const [selectedBranch, setSelectedBranch] = useState(null);\n//   const [showDomainModal, setShowDomainModal] = useState(false);\n//   const [showInternshipModal, setShowInternshipModal] = useState(false);\n\n//   useEffect(() => {\n//     fetchBranches();\n//   }, []);\n\n//   // const fetchBranches = async () => {\n//   //   try {\n//   //     setLoading(true);\n//   //     console.log('🔄 Fetching branches from API...');\n\n//   //     const response = await branchService.getAllBranches();\n//   //     console.log('✅ API Response:', response);\n\n//   //     // Handle different response structures\n//   //     const branchesData = response.data?.data || response.data || [];\n\n//   //     if (Array.isArray(branchesData)) {\n//   //       setBranches(branchesData);\n//   //       toast.success(`Loaded ${branchesData.length} branches successfully!`);\n//   //     } else {\n//   //       console.warn('⚠️ Invalid response format:', response);\n//   //       setBranches([]);\n//   //       toast.warning('No branches found');\n//   //     }\n//   //   } catch (error) {\n//   //     console.error('❌ Error fetching branches:', error);\n\n//   //     if (error.response?.status === 401) {\n//   //       toast.error('Authentication required. Please login again.');\n//   //     } else if (error.response?.status === 500) {\n//   //       toast.error('Server error. Please check if the backend is running.');\n//   //     } else {\n//   //       toast.error('Failed to fetch branches. Please try again.');\n//   //     }\n\n//   //     setBranches([]);\n//   //   } finally {\n//   //     setLoading(false);\n//   //   }\n//   // };\n\n//   // src/components/internships/ManageBranches.js - FIXED RESPONSE PARSING\n\n// // Replace the fetchBranches function in your ManageBranches.js with this:\n\n// const fetchBranches = async () => {\n//   try {\n//     setLoading(true);\n//     console.log('🔄 Fetching branches from API...');\n\n//     const response = await branchService.getAllBranches();\n//     console.log('✅ API Response:', response);\n\n//     // ✅ FIXED: Correct data extraction from response\n//     // Your API returns: { success: true, data: { branches: [...], pagination: {...} } }\n//     // So we need to access response.data.data.branches\n\n//     let branchesData = [];\n\n//     // Handle different possible response structures\n//     if (response.data?.data?.branches) {\n//       // Standard API response: response.data.data.branches\n//       branchesData = response.data.data.branches;\n//       console.log('✅ Using response.data.data.branches:', branchesData);\n//     } else if (response.data?.branches) {\n//       // Alternative structure: response.data.branches\n//       branchesData = response.data.branches;\n//       console.log('✅ Using response.data.branches:', branchesData);\n//     } else if (Array.isArray(response.data?.data)) {\n//       // Direct array in data: response.data.data\n//       branchesData = response.data.data;\n//       console.log('✅ Using response.data.data (array):', branchesData);\n//     } else if (Array.isArray(response.data)) {\n//       // Direct array: response.data\n//       branchesData = response.data;\n//       console.log('✅ Using response.data (array):', branchesData);\n//     } else {\n//       console.warn('⚠️ Unexpected response structure:', response.data);\n//       branchesData = [];\n//     }\n\n//     if (Array.isArray(branchesData) && branchesData.length > 0) {\n//       setBranches(branchesData);\n//       toast.success(`Loaded ${branchesData.length} branches successfully!`);\n//       console.log('✅ Branches set successfully:', branchesData);\n//     } else {\n//       console.warn('⚠️ No branches found in response');\n//       setBranches([]);\n//       toast.warning('No branches found');\n//     }\n//   } catch (error) {\n//     console.error('❌ Error fetching branches:', error);\n\n//     if (error.response?.status === 401) {\n//       toast.error('Authentication required. Please login again.');\n//     } else if (error.response?.status === 500) {\n//       toast.error('Server error. Please check if the backend is running.');\n//     } else {\n//       toast.error('Failed to fetch branches. Please try again.');\n//     }\n\n//     setBranches([]);\n//   } finally {\n//     setLoading(false);\n//   }\n// };\n//   const handleSaveBranch = async (branchData) => {\n//     try {\n//       console.log('💾 Saving branch:', branchData);\n\n//       if (editingBranch) {\n//         await branchService.updateBranch(editingBranch.id, branchData);\n//         toast.success('Branch updated successfully');\n//       } else {\n//         await branchService.createBranch(branchData);\n//         toast.success('Branch created successfully');\n//       }\n\n//       setShowModal(false);\n//       setEditingBranch(null);\n//       fetchBranches(); // Refresh the list\n//     } catch (error) {\n//       console.error('❌ Error saving branch:', error);\n\n//       if (error.response?.data?.message) {\n//         toast.error(error.response.data.message);\n//       } else {\n//         toast.error('Failed to save branch');\n//       }\n//     }\n//   };\n\n//   const handleDeleteBranch = async () => {\n//     try {\n//       console.log('🗑️ Deleting branch:', branchToDelete);\n\n//       await branchService.deleteBranch(branchToDelete.id);\n//       toast.success('Branch deleted successfully');\n\n//       setShowDeleteModal(false);\n//       setBranchToDelete(null);\n//       fetchBranches(); // Refresh the list\n//     } catch (error) {\n//       console.error('❌ Error deleting branch:', error);\n\n//       if (error.response?.data?.message) {\n//         toast.error(error.response.data.message);\n//       } else {\n//         toast.error('Failed to delete branch');\n//       }\n//     }\n//   };\n\n//   // Safe filtering with array check\n//   const filteredBranches = Array.isArray(branches) ? branches.filter(branch =>\n//     branch.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//     branch.code?.toLowerCase().includes(searchTerm.toLowerCase())\n//   ) : [];\n\n//   if (loading) {\n//     return (\n//       <div className=\"loading-container\">\n//         <div className=\"loading-spinner\"></div>\n//         <p>Loading branches...</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"manage-branches\">\n//       <div className=\"page-header\">\n//         <div className=\"header-content\">\n//           <h1>Manage Branches</h1>\n//           <p>Manage academic branches and their associated domains</p>\n//         </div>\n//         <button \n//           className=\"btn btn-primary\"\n//           onClick={() => {\n//             setEditingBranch(null);\n//             setShowModal(true);\n//           }}\n//         >\n//           <FiPlus /> Add Branch\n//         </button>\n//       </div>\n\n//       <div className=\"page-controls\">\n//         <div className=\"search-controls\">\n//           <div className=\"search-box\">\n//             <FiSearch />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search branches...\"\n//               value={searchTerm}\n//               onChange={(e) => setSearchTerm(e.target.value)}\n//             />\n//           </div>\n//         </div>\n\n//         <div className=\"view-controls\">\n//           <button\n//             className={`view-btn ${viewMode === 'grid' ? 'active' : ''}`}\n//             onClick={() => setViewMode('grid')}\n//           >\n//             <FiGrid />\n//           </button>\n//           <button\n//             className={`view-btn ${viewMode === 'list' ? 'active' : ''}`}\n//             onClick={() => setViewMode('list')}\n//           >\n//             <FiList />\n//           </button>\n//         </div>\n//       </div>\n\n//       <div className={`branches-container ${viewMode}`}>\n//         {filteredBranches.map(branch => (\n//           <BranchCard\n//             key={branch.id}\n//             branch={branch}\n//             viewMode={viewMode}\n//             onEdit={(branch) => {\n//               setEditingBranch(branch);\n//               setShowModal(true);\n//             }}\n//             onDelete={(branch) => {\n//               setBranchToDelete(branch);\n//               setShowDeleteModal(true);\n//             }}\n//             onManageDomains={(branch) => {\n//               setSelectedBranch(branch);\n//               setShowDomainModal(true);\n//             }}\n//             onManageInternships={(branch) => {\n//               setSelectedBranch(branch);\n//               setShowInternshipModal(true);\n//             }}\n//           />\n//         ))}\n//       </div>\n\n//       {filteredBranches.length === 0 && !loading && (\n//         <div className=\"empty-state\">\n//           <FiBookOpen size={48} />\n//           <h3>No branches found</h3>\n//           <p>Get started by creating your first branch</p>\n//           <button \n//             className=\"btn btn-primary\"\n//             onClick={() => {\n//               setEditingBranch(null);\n//               setShowModal(true);\n//             }}\n//           >\n//             <FiPlus /> Add Branch\n//           </button>\n//         </div>\n//       )}\n\n//       {/* Branch Modal */}\n//       {showModal && (\n//         <BranchModal\n//           branch={editingBranch}\n//           onClose={() => {\n//             setShowModal(false);\n//             setEditingBranch(null);\n//           }}\n//           onSave={handleSaveBranch}\n//         />\n//       )}\n\n//       {/* Delete Confirmation Modal */}\n//       {showDeleteModal && (\n//         <ConfirmationModal\n//           title=\"Delete Branch\"\n//           message={`Are you sure you want to delete \"${branchToDelete?.name}\"? This action cannot be undone.`}\n//           onConfirm={handleDeleteBranch}\n//           onCancel={() => {\n//             setShowDeleteModal(false);\n//             setBranchToDelete(null);\n//           }}\n//           confirmText=\"Delete\"\n//           cancelText=\"Cancel\"\n//           type=\"danger\"\n//         />\n//       )}\n\n//       {/* ✅ REAL DOMAIN MANAGEMENT MODAL */}\n//       {showDomainModal && selectedBranch && (\n//         <DomainManagementModal\n//           branch={selectedBranch}\n//           onClose={() => {\n//             setShowDomainModal(false);\n//             setSelectedBranch(null);\n//           }}\n//         />\n//       )}\n\n//       {/* Direct Internship Management Modal */}\n//       {showInternshipModal && selectedBranch && (\n//         <DirectInternshipModal\n//           branch={selectedBranch}\n//           onClose={() => {\n//             setShowInternshipModal(false);\n//             setSelectedBranch(null);\n//           }}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // Branch Card Component (same as before)\n// const BranchCard = ({ branch, viewMode, onEdit, onDelete, onManageDomains, onManageInternships }) => {\n//   const [showMenu, setShowMenu] = useState(false);\n\n//   return (\n//     <div className={`branch-card ${viewMode}`}>\n//       <div className=\"branch-header\">\n//         <div className=\"branch-icon\">\n//           <FiBookOpen />\n//         </div>\n//         <div className=\"branch-info\">\n//           <h3 className=\"branch-name\">{branch.name}</h3>\n//           <span className=\"branch-code\">{branch.code}</span>\n//           {branch.description && (\n//             <p className=\"branch-description\">{branch.description}</p>\n//           )}\n//         </div>\n//         <div className=\"branch-menu\">\n//           <button onClick={() => setShowMenu(!showMenu)}>\n//             <FiSettings />\n//           </button>\n//           {showMenu && (\n//             <div className=\"dropdown-menu\">\n//               <button onClick={() => {\n//                 onManageDomains(branch);\n//                 setShowMenu(false);\n//               }}>\n//                 <FiGrid /> Manage Domains\n//               </button>\n//               <button onClick={() => {\n//                 onManageInternships(branch);\n//                 setShowMenu(false);\n//               }}>\n//                 <FiUsers /> Direct Internships\n//               </button>\n//               <button onClick={() => {\n//                 onEdit(branch);\n//                 setShowMenu(false);\n//               }}>\n//                 <FiEdit /> Edit Branch\n//               </button>\n//               <button \n//                 onClick={() => {\n//                   onDelete(branch);\n//                   setShowMenu(false);\n//                 }} \n//                 className=\"danger\"\n//               >\n//                 <FiTrash2 /> Delete Branch\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       <div className=\"branch-stats\">\n//         <div className=\"stat\">\n//           <span className=\"stat-value\">{branch.domainCount || 0}</span>\n//           <span className=\"stat-label\">Domains</span>\n//         </div>\n//         <div className=\"stat\">\n//           <span className=\"stat-value\">{branch.internshipCount || 0}</span>\n//           <span className=\"stat-label\">Internships</span>\n//         </div>\n//         <div className=\"stat\">\n//           <span className=\"stat-value\">{branch.totalLearners || 0}</span>\n//           <span className=\"stat-label\">Learners</span>\n//         </div>\n//         <div className=\"stat\">\n//           <span className={`status ${branch.isActive ? 'active' : 'inactive'}`}>\n//             {branch.isActive ? 'Active' : 'Inactive'}\n//           </span>\n//         </div>\n//       </div>\n\n//       <div className=\"branch-actions\">\n//         <button \n//           className=\"btn btn-sm btn-outline\"\n//           onClick={() => onManageDomains(branch)}\n//         >\n//           <FiGrid /> Domains\n//         </button>\n//         <button \n//           className=\"btn btn-sm btn-outline\"\n//           onClick={() => onManageInternships(branch)}\n//         >\n//           <FiUsers /> Internships\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Branch Modal Component (same as before)\n// const BranchModal = ({ branch, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     name: branch?.name || '',\n//     code: branch?.code || '',\n//     description: branch?.description || '',\n//     isActive: branch?.isActive !== undefined ? branch.isActive : true,\n//     sortOrder: branch?.sortOrder || 0\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const [loading, setLoading] = useState(false);\n\n//   const validate = () => {\n//     const newErrors = {};\n\n//     if (!formData.name.trim()) {\n//       newErrors.name = 'Branch name is required';\n//     } else if (formData.name.length < 2) {\n//       newErrors.name = 'Branch name must be at least 2 characters';\n//     }\n\n//     if (!formData.code.trim()) {\n//       newErrors.code = 'Branch code is required';\n//     } else if (formData.code.length < 2) {\n//       newErrors.code = 'Branch code must be at least 2 characters';\n//     }\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!validate()) return;\n\n//     setLoading(true);\n//     try {\n//       await onSave(formData);\n//     } catch (error) {\n//       console.error('Error saving branch:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <Modal title={branch ? 'Edit Branch' : 'Add Branch'} onClose={onClose}>\n//       <form onSubmit={handleSubmit} className=\"branch-form\">\n//         <div className=\"form-group\">\n//           <label>Branch Name *</label>\n//           <input\n//             type=\"text\"\n//             value={formData.name}\n//             onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n//             placeholder=\"e.g., Computer Science & Engineering\"\n//             className={errors.name ? 'error' : ''}\n//           />\n//           {errors.name && <span className=\"error-text\">{errors.name}</span>}\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label>Branch Code *</label>\n//           <input\n//             type=\"text\"\n//             value={formData.code}\n//             onChange={(e) => setFormData({ ...formData, code: e.target.value.toUpperCase() })}\n//             placeholder=\"e.g., CSE\"\n//             className={errors.code ? 'error' : ''}\n//           />\n//           {errors.code && <span className=\"error-text\">{errors.code}</span>}\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label>Description</label>\n//           <textarea\n//             value={formData.description}\n//             onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n//             placeholder=\"Brief description of the branch\"\n//             rows={3}\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label>Sort Order</label>\n//           <input\n//             type=\"number\"\n//             value={formData.sortOrder}\n//             onChange={(e) => setFormData({ ...formData, sortOrder: parseInt(e.target.value) || 0 })}\n//             min=\"0\"\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label className=\"checkbox-label\">\n//             <input\n//               type=\"checkbox\"\n//               checked={formData.isActive}\n//               onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n//             />\n//             Active\n//           </label>\n//         </div>\n\n//         <div className=\"form-actions\">\n//           <button type=\"button\" className=\"btn btn-secondary\" onClick={onClose}>\n//             Cancel\n//           </button>\n//           <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n//             {loading ? 'Saving...' : (branch ? 'Update' : 'Create')}\n//           </button>\n//         </div>\n//       </form>\n//     </Modal>\n//   );\n// };\n\n// // ✅ REAL DOMAIN MANAGEMENT MODAL WITH API INTEGRATION\n// const DomainManagementModal = ({ branch, onClose }) => {\n//   const [domains, setDomains] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [showDomainModal, setShowDomainModal] = useState(false);\n//   const [editingDomain, setEditingDomain] = useState(null);\n\n//   useEffect(() => {\n//     fetchDomains();\n//   }, [branch.id]);\n\n//   const fetchDomains = async () => {\n//     try {\n//       setLoading(true);\n//       console.log('🔄 Fetching domains for branch:', branch.id);\n\n//       const response = await branchService.getDomainsByBranch(branch.id);\n//       console.log('✅ Domains API Response:', response);\n\n//       const domainsData = response.data?.data || response.data || [];\n//       setDomains(Array.isArray(domainsData) ? domainsData : []);\n\n//     } catch (error) {\n//       console.error('❌ Error fetching domains:', error);\n\n//       if (error.response?.status === 404) {\n//         setDomains([]); // No domains found is okay\n//       } else {\n//         toast.error('Failed to fetch domains');\n//       }\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSaveDomain = async (domainData) => {\n//     try {\n//       const dataWithBranch = { ...domainData, branchId: branch.id };\n//       console.log('💾 Saving domain:', dataWithBranch);\n\n//       if (editingDomain) {\n//         await branchService.updateDomain(editingDomain.id, dataWithBranch);\n//         toast.success('Domain updated successfully');\n//       } else {\n//         await branchService.createDomain(dataWithBranch);\n//         toast.success('Domain created successfully');\n//       }\n\n//       setShowDomainModal(false);\n//       setEditingDomain(null);\n//       fetchDomains(); // Refresh the list\n//     } catch (error) {\n//       console.error('❌ Error saving domain:', error);\n\n//       if (error.response?.data?.message) {\n//         toast.error(error.response.data.message);\n//       } else {\n//         toast.error('Failed to save domain');\n//       }\n//     }\n//   };\n\n//   const handleDeleteDomain = async (domain) => {\n//     if (window.confirm(`Are you sure you want to delete \"${domain.name}\"?`)) {\n//       try {\n//         console.log('🗑️ Deleting domain:', domain);\n\n//         await branchService.deleteDomain(domain.id);\n//         toast.success('Domain deleted successfully');\n//         fetchDomains(); // Refresh the list\n//       } catch (error) {\n//         console.error('❌ Error deleting domain:', error);\n\n//         if (error.response?.data?.message) {\n//           toast.error(error.response.data.message);\n//         } else {\n//           toast.error('Failed to delete domain');\n//         }\n//       }\n//     }\n//   };\n\n//   return (\n//     <Modal \n//       title={`Manage Domains - ${branch.name}`} \n//       onClose={onClose}\n//       size=\"large\"\n//     >\n//       <div className=\"domain-management\">\n//         <div className=\"section-header\">\n//           <h3>Domains under {branch.name}</h3>\n//           <button \n//             className=\"btn btn-primary\"\n//             onClick={() => {\n//               setEditingDomain(null);\n//               setShowDomainModal(true);\n//             }}\n//           >\n//             <FiPlus /> Add Domain\n//           </button>\n//         </div>\n\n//         {loading ? (\n//           <div className=\"loading-container\">\n//             <div className=\"loading-spinner\"></div>\n//             <p>Loading domains...</p>\n//           </div>\n//         ) : (\n//           <div className=\"domains-grid\">\n//             {domains.map(domain => (\n//               <div key={domain.id} className=\"domain-card\">\n//                 <div className=\"domain-header\">\n//                   <h4>{domain.name}</h4>\n//                   <div className=\"domain-actions\">\n//                     <button \n//                       className=\"btn btn-sm btn-outline\"\n//                       onClick={() => {\n//                         setEditingDomain(domain);\n//                         setShowDomainModal(true);\n//                       }}\n//                     >\n//                       <FiEdit />\n//                     </button>\n//                     <button \n//                       className=\"btn btn-sm btn-danger\"\n//                       onClick={() => handleDeleteDomain(domain)}\n//                     >\n//                       <FiTrash2 />\n//                     </button>\n//                   </div>\n//                 </div>\n\n//                 {domain.description && (\n//                   <p className=\"domain-description\">{domain.description}</p>\n//                 )}\n\n//                 <div className=\"domain-stats\">\n//                   <span className=\"stat\">\n//                     {domain.internshipCount || 0} Internships\n//                   </span>\n//                   <span className={`status ${domain.isActive ? 'active' : 'inactive'}`}>\n//                     {domain.isActive ? 'Active' : 'Inactive'}\n//                   </span>\n//                 </div>\n//               </div>\n//             ))}\n\n//             {domains.length === 0 && (\n//               <div className=\"empty-state\">\n//                 <FiGrid size={32} />\n//                 <p>No domains found</p>\n//                 <button \n//                   className=\"btn btn-primary\"\n//                   onClick={() => {\n//                     setEditingDomain(null);\n//                     setShowDomainModal(true);\n//                   }}\n//                 >\n//                   <FiPlus /> Add First Domain\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         )}\n\n//         {/* Domain Modal */}\n//         {showDomainModal && (\n//           <DomainModal\n//             domain={editingDomain}\n//             branch={branch}\n//             onClose={() => {\n//               setShowDomainModal(false);\n//               setEditingDomain(null);\n//             }}\n//             onSave={handleSaveDomain}\n//           />\n//         )}\n//       </div>\n//     </Modal>\n//   );\n// };\n\n// // Domain Modal Component\n// const DomainModal = ({ domain, branch, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     name: domain?.name || '',\n//     description: domain?.description || '',\n//     isActive: domain?.isActive !== undefined ? domain.isActive : true,\n//     sortOrder: domain?.sortOrder || 0\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const [loading, setLoading] = useState(false);\n\n//   const validate = () => {\n//     const newErrors = {};\n\n//     if (!formData.name.trim()) {\n//       newErrors.name = 'Domain name is required';\n//     } else if (formData.name.length < 2) {\n//       newErrors.name = 'Domain name must be at least 2 characters';\n//     }\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!validate()) return;\n\n//     setLoading(true);\n//     try {\n//       await onSave(formData);\n//     } catch (error) {\n//       console.error('Error saving domain:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <Modal title={domain ? 'Edit Domain' : 'Add Domain'} onClose={onClose}>\n//       <form onSubmit={handleSubmit} className=\"domain-form\">\n//         <div className=\"form-group\">\n//           <label>Domain Name *</label>\n//           <input\n//             type=\"text\"\n//             value={formData.name}\n//             onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n//             placeholder=\"e.g., Artificial Intelligence & Machine Learning\"\n//             className={errors.name ? 'error' : ''}\n//           />\n//           {errors.name && <span className=\"error-text\">{errors.name}</span>}\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label>Description</label>\n//           <textarea\n//             value={formData.description}\n//             onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n//             placeholder=\"Brief description of the domain\"\n//             rows={3}\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label>Sort Order</label>\n//           <input\n//             type=\"number\"\n//             value={formData.sortOrder}\n//             onChange={(e) => setFormData({ ...formData, sortOrder: parseInt(e.target.value) || 0 })}\n//             min=\"0\"\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label className=\"checkbox-label\">\n//             <input\n//               type=\"checkbox\"\n//               checked={formData.isActive}\n//               onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n//             />\n//             Active\n//           </label>\n//         </div>\n\n//         <div className=\"form-actions\">\n//           <button type=\"button\" className=\"btn btn-secondary\" onClick={onClose}>\n//             Cancel\n//           </button>\n//           <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n//             {loading ? 'Saving...' : (domain ? 'Update' : 'Create')}\n//           </button>\n//         </div>\n//       </form>\n//     </Modal>\n//   );\n// };\n\n// // Placeholder for Direct Internship Modal\n// const DirectInternshipModal = ({ branch, onClose }) => {\n//   return (\n//     <Modal title={`Direct Internships - ${branch.name}`} onClose={onClose} size=\"large\">\n//       <div className=\"coming-soon\">\n//         <h3>🚀 Coming Soon!</h3>\n//         <p>Direct internship management will be available here.</p>\n//         <p>You'll be able to add internships directly to {branch.name} without requiring domains.</p>\n//       </div>\n//     </Modal>\n//   );\n// };\n\n// export default ManageBranches;\n\n// // // src/components/internships/ManageBranches.js - FIXED VERSION\n// // import React, { useState, useEffect } from 'react';\n// // import { \n// //   FiPlus, \n// //   FiEdit, \n// //   FiTrash2, \n// //   FiSettings, \n// //   FiBookOpen,\n// //   FiUsers,\n// //   FiSearch,\n// //   FiGrid,\n// //   FiList\n// // } from 'react-icons/fi';\n// // import { toast } from 'react-toastify';\n// // import Modal from '../common/Modal';\n// // import ConfirmationModal from '../common/ConfirmationModal';\n// // // import { branchService } from '../../services/branchService'; // Commented out for now\n// // import './ManageBranches.css';\n\n// // const ManageBranches = () => {\n// //   const [branches, setBranches] = useState([]); // ✅ Ensure it's always an array\n// //   const [loading, setLoading] = useState(true);\n// //   const [showModal, setShowModal] = useState(false);\n// //   const [editingBranch, setEditingBranch] = useState(null);\n// //   const [showDeleteModal, setShowDeleteModal] = useState(false);\n// //   const [branchToDelete, setBranchToDelete] = useState(null);\n// //   const [searchTerm, setSearchTerm] = useState('');\n// //   const [viewMode, setViewMode] = useState('grid');\n// //   const [selectedBranch, setSelectedBranch] = useState(null);\n// //   const [showDomainModal, setShowDomainModal] = useState(false);\n// //   const [showInternshipModal, setShowInternshipModal] = useState(false);\n\n// //   useEffect(() => {\n// //     fetchBranches();\n// //   }, []);\n\n// //   const fetchBranches = async () => {\n// //     try {\n// //       setLoading(true);\n\n// //       // ✅ TEMPORARY: Mock data for testing (replace with real API call later)\n// //       const mockBranches = [\n// //         {\n// //           id: 1,\n// //           name: 'Computer Science & Engineering',\n// //           code: 'CSE',\n// //           description: 'Computer Science and Engineering branch focusing on software development and technology.',\n// //           isActive: true,\n// //           domainCount: 5,\n// //           internshipCount: 12,\n// //           totalLearners: 150\n// //         },\n// //         {\n// //           id: 2,\n// //           name: 'Electronics & Communication Engineering',\n// //           code: 'ECE',\n// //           description: 'Electronics and Communication Engineering branch.',\n// //           isActive: true,\n// //           domainCount: 3,\n// //           internshipCount: 8,\n// //           totalLearners: 95\n// //         },\n// //         {\n// //           id: 3,\n// //           name: 'Mechanical Engineering',\n// //           code: 'MECH',\n// //           description: 'Mechanical Engineering branch.',\n// //           isActive: true,\n// //           domainCount: 2,\n// //           internshipCount: 5,\n// //           totalLearners: 60\n// //         }\n// //       ];\n\n// //       // Simulate API delay\n// //       setTimeout(() => {\n// //         setBranches(mockBranches);\n// //         setLoading(false);\n// //         toast.success('Branches loaded successfully!');\n// //       }, 1000);\n\n// //       // ✅ FUTURE: Uncomment this when branchService is ready\n// //       // const response = await branchService.getAllBranches();\n// //       // setBranches(Array.isArray(response.data) ? response.data : []);\n\n// //     } catch (error) {\n// //       console.error('Error fetching branches:', error);\n// //       toast.error('Failed to fetch branches');\n// //       setBranches([]); // ✅ Ensure it's always an array on error\n// //     } finally {\n// //       setTimeout(() => setLoading(false), 1000); // Ensure loading stops\n// //     }\n// //   };\n\n// //   const handleSaveBranch = async (branchData) => {\n// //     try {\n// //       if (editingBranch) {\n// //         // ✅ TEMPORARY: Mock update\n// //         setBranches(prev => prev.map(branch => \n// //           branch.id === editingBranch.id \n// //             ? { ...branch, ...branchData }\n// //             : branch\n// //         ));\n// //         toast.success('Branch updated successfully');\n\n// //         // ✅ FUTURE: Uncomment when API is ready\n// //         // await branchService.updateBranch(editingBranch.id, branchData);\n// //       } else {\n// //         // ✅ TEMPORARY: Mock create\n// //         const newBranch = {\n// //           id: Date.now(), // Temporary ID\n// //           ...branchData,\n// //           domainCount: 0,\n// //           internshipCount: 0,\n// //           totalLearners: 0\n// //         };\n// //         setBranches(prev => [...prev, newBranch]);\n// //         toast.success('Branch created successfully');\n\n// //         // ✅ FUTURE: Uncomment when API is ready\n// //         // await branchService.createBranch(branchData);\n// //       }\n\n// //       setShowModal(false);\n// //       setEditingBranch(null);\n// //       // fetchBranches(); // Re-fetch when using real API\n// //     } catch (error) {\n// //       console.error('Error saving branch:', error);\n// //       toast.error('Failed to save branch');\n// //     }\n// //   };\n\n// //   const handleDeleteBranch = async () => {\n// //     try {\n// //       // ✅ TEMPORARY: Mock delete\n// //       setBranches(prev => prev.filter(branch => branch.id !== branchToDelete.id));\n// //       toast.success('Branch deleted successfully');\n\n// //       // ✅ FUTURE: Uncomment when API is ready\n// //       // await branchService.deleteBranch(branchToDelete.id);\n\n// //       setShowDeleteModal(false);\n// //       setBranchToDelete(null);\n// //       // fetchBranches(); // Re-fetch when using real API\n// //     } catch (error) {\n// //       console.error('Error deleting branch:', error);\n// //       toast.error('Failed to delete branch');\n// //     }\n// //   };\n\n// //   // ✅ SAFE FILTERING: Ensure branches is always an array\n// //   const filteredBranches = Array.isArray(branches) ? branches.filter(branch =>\n// //     branch.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n// //     branch.code.toLowerCase().includes(searchTerm.toLowerCase())\n// //   ) : [];\n\n// //   if (loading) {\n// //     return (\n// //       <div className=\"loading-container\">\n// //         <div className=\"loading-spinner\"></div>\n// //         <p>Loading branches...</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"manage-branches\">\n// //       <div className=\"page-header\">\n// //         <div className=\"header-content\">\n// //           <h1>Manage Branches</h1>\n// //           <p>Manage academic branches and their associated domains</p>\n// //         </div>\n// //         <button \n// //           className=\"btn btn-primary\"\n// //           onClick={() => {\n// //             setEditingBranch(null);\n// //             setShowModal(true);\n// //           }}\n// //         >\n// //           <FiPlus /> Add Branch\n// //         </button>\n// //       </div>\n\n// //       <div className=\"page-controls\">\n// //         <div className=\"search-controls\">\n// //           <div className=\"search-box\">\n// //             <FiSearch />\n// //             <input\n// //               type=\"text\"\n// //               placeholder=\"Search branches...\"\n// //               value={searchTerm}\n// //               onChange={(e) => setSearchTerm(e.target.value)}\n// //             />\n// //           </div>\n// //         </div>\n\n// //         <div className=\"view-controls\">\n// //           <button\n// //             className={`view-btn ${viewMode === 'grid' ? 'active' : ''}`}\n// //             onClick={() => setViewMode('grid')}\n// //           >\n// //             <FiGrid />\n// //           </button>\n// //           <button\n// //             className={`view-btn ${viewMode === 'list' ? 'active' : ''}`}\n// //             onClick={() => setViewMode('list')}\n// //           >\n// //             <FiList />\n// //           </button>\n// //         </div>\n// //       </div>\n\n// //       <div className={`branches-container ${viewMode}`}>\n// //         {filteredBranches.map(branch => (\n// //           <BranchCard\n// //             key={branch.id}\n// //             branch={branch}\n// //             viewMode={viewMode}\n// //             onEdit={(branch) => {\n// //               setEditingBranch(branch);\n// //               setShowModal(true);\n// //             }}\n// //             onDelete={(branch) => {\n// //               setBranchToDelete(branch);\n// //               setShowDeleteModal(true);\n// //             }}\n// //             onManageDomains={(branch) => {\n// //               setSelectedBranch(branch);\n// //               setShowDomainModal(true);\n// //             }}\n// //             onManageInternships={(branch) => {\n// //               setSelectedBranch(branch);\n// //               setShowInternshipModal(true);\n// //             }}\n// //           />\n// //         ))}\n// //       </div>\n\n// //       {filteredBranches.length === 0 && !loading && (\n// //         <div className=\"empty-state\">\n// //           <FiBookOpen size={48} />\n// //           <h3>No branches found</h3>\n// //           <p>Get started by creating your first branch</p>\n// //           <button \n// //             className=\"btn btn-primary\"\n// //             onClick={() => {\n// //               setEditingBranch(null);\n// //               setShowModal(true);\n// //             }}\n// //           >\n// //             <FiPlus /> Add Branch\n// //           </button>\n// //         </div>\n// //       )}\n\n// //       {/* Branch Modal */}\n// //       {showModal && (\n// //         <BranchModal\n// //           branch={editingBranch}\n// //           onClose={() => {\n// //             setShowModal(false);\n// //             setEditingBranch(null);\n// //           }}\n// //           onSave={handleSaveBranch}\n// //         />\n// //       )}\n\n// //       {/* Delete Confirmation Modal */}\n// //       {showDeleteModal && (\n// //         <ConfirmationModal\n// //           title=\"Delete Branch\"\n// //           message={`Are you sure you want to delete \"${branchToDelete?.name}\"? This action cannot be undone.`}\n// //           onConfirm={handleDeleteBranch}\n// //           onCancel={() => {\n// //             setShowDeleteModal(false);\n// //             setBranchToDelete(null);\n// //           }}\n// //           confirmText=\"Delete\"\n// //           cancelText=\"Cancel\"\n// //           type=\"danger\"\n// //         />\n// //       )}\n\n// //       {/* Domain Management Modal */}\n// //       {showDomainModal && selectedBranch && (\n// //         <DomainManagementModal\n// //           branch={selectedBranch}\n// //           onClose={() => {\n// //             setShowDomainModal(false);\n// //             setSelectedBranch(null);\n// //           }}\n// //         />\n// //       )}\n\n// //       {/* Direct Internship Management Modal */}\n// //       {showInternshipModal && selectedBranch && (\n// //         <DirectInternshipModal\n// //           branch={selectedBranch}\n// //           onClose={() => {\n// //             setShowInternshipModal(false);\n// //             setSelectedBranch(null);\n// //           }}\n// //         />\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // // Branch Card Component\n// // const BranchCard = ({ branch, viewMode, onEdit, onDelete, onManageDomains, onManageInternships }) => {\n// //   const [showMenu, setShowMenu] = useState(false);\n\n// //   return (\n// //     <div className={`branch-card ${viewMode}`}>\n// //       <div className=\"branch-header\">\n// //         <div className=\"branch-icon\">\n// //           <FiBookOpen />\n// //         </div>\n// //         <div className=\"branch-info\">\n// //           <h3 className=\"branch-name\">{branch.name}</h3>\n// //           <span className=\"branch-code\">{branch.code}</span>\n// //           {branch.description && (\n// //             <p className=\"branch-description\">{branch.description}</p>\n// //           )}\n// //         </div>\n// //         <div className=\"branch-menu\">\n// //           <button onClick={() => setShowMenu(!showMenu)}>\n// //             <FiSettings />\n// //           </button>\n// //           {showMenu && (\n// //             <div className=\"dropdown-menu\">\n// //               <button onClick={() => {\n// //                 onManageDomains(branch);\n// //                 setShowMenu(false);\n// //               }}>\n// //                 <FiGrid /> Manage Domains\n// //               </button>\n// //               <button onClick={() => {\n// //                 onManageInternships(branch);\n// //                 setShowMenu(false);\n// //               }}>\n// //                 <FiUsers /> Direct Internships\n// //               </button>\n// //               <button onClick={() => {\n// //                 onEdit(branch);\n// //                 setShowMenu(false);\n// //               }}>\n// //                 <FiEdit /> Edit Branch\n// //               </button>\n// //               <button \n// //                 onClick={() => {\n// //                   onDelete(branch);\n// //                   setShowMenu(false);\n// //                 }} \n// //                 className=\"danger\"\n// //               >\n// //                 <FiTrash2 /> Delete Branch\n// //               </button>\n// //             </div>\n// //           )}\n// //         </div>\n// //       </div>\n\n// //       <div className=\"branch-stats\">\n// //         <div className=\"stat\">\n// //           <span className=\"stat-value\">{branch.domainCount || 0}</span>\n// //           <span className=\"stat-label\">Domains</span>\n// //         </div>\n// //         <div className=\"stat\">\n// //           <span className=\"stat-value\">{branch.internshipCount || 0}</span>\n// //           <span className=\"stat-label\">Internships</span>\n// //         </div>\n// //         <div className=\"stat\">\n// //           <span className=\"stat-value\">{branch.totalLearners || 0}</span>\n// //           <span className=\"stat-label\">Learners</span>\n// //         </div>\n// //         <div className=\"stat\">\n// //           <span className={`status ${branch.isActive ? 'active' : 'inactive'}`}>\n// //             {branch.isActive ? 'Active' : 'Inactive'}\n// //           </span>\n// //         </div>\n// //       </div>\n\n// //       <div className=\"branch-actions\">\n// //         <button \n// //           className=\"btn btn-sm btn-outline\"\n// //           onClick={() => onManageDomains(branch)}\n// //         >\n// //           <FiGrid /> Domains\n// //         </button>\n// //         <button \n// //           className=\"btn btn-sm btn-outline\"\n// //           onClick={() => onManageInternships(branch)}\n// //         >\n// //           <FiUsers /> Internships\n// //         </button>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // // Branch Modal Component\n// // const BranchModal = ({ branch, onClose, onSave }) => {\n// //   const [formData, setFormData] = useState({\n// //     name: branch?.name || '',\n// //     code: branch?.code || '',\n// //     description: branch?.description || '',\n// //     isActive: branch?.isActive !== undefined ? branch.isActive : true,\n// //     sortOrder: branch?.sortOrder || 0\n// //   });\n\n// //   const [errors, setErrors] = useState({});\n// //   const [loading, setLoading] = useState(false);\n\n// //   const validate = () => {\n// //     const newErrors = {};\n\n// //     if (!formData.name.trim()) {\n// //       newErrors.name = 'Branch name is required';\n// //     } else if (formData.name.length < 2) {\n// //       newErrors.name = 'Branch name must be at least 2 characters';\n// //     }\n\n// //     if (!formData.code.trim()) {\n// //       newErrors.code = 'Branch code is required';\n// //     } else if (formData.code.length < 2) {\n// //       newErrors.code = 'Branch code must be at least 2 characters';\n// //     }\n\n// //     setErrors(newErrors);\n// //     return Object.keys(newErrors).length === 0;\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     if (!validate()) return;\n\n// //     setLoading(true);\n// //     try {\n// //       await onSave(formData);\n// //     } catch (error) {\n// //       console.error('Error saving branch:', error);\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <Modal title={branch ? 'Edit Branch' : 'Add Branch'} onClose={onClose}>\n// //       <form onSubmit={handleSubmit} className=\"branch-form\">\n// //         <div className=\"form-group\">\n// //           <label>Branch Name *</label>\n// //           <input\n// //             type=\"text\"\n// //             value={formData.name}\n// //             onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n// //             placeholder=\"e.g., Computer Science & Engineering\"\n// //             className={errors.name ? 'error' : ''}\n// //           />\n// //           {errors.name && <span className=\"error-text\">{errors.name}</span>}\n// //         </div>\n\n// //         <div className=\"form-group\">\n// //           <label>Branch Code *</label>\n// //           <input\n// //             type=\"text\"\n// //             value={formData.code}\n// //             onChange={(e) => setFormData({ ...formData, code: e.target.value.toUpperCase() })}\n// //             placeholder=\"e.g., CSE\"\n// //             className={errors.code ? 'error' : ''}\n// //           />\n// //           {errors.code && <span className=\"error-text\">{errors.code}</span>}\n// //         </div>\n\n// //         <div className=\"form-group\">\n// //           <label>Description</label>\n// //           <textarea\n// //             value={formData.description}\n// //             onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n// //             placeholder=\"Brief description of the branch\"\n// //             rows={3}\n// //           />\n// //         </div>\n\n// //         <div className=\"form-group\">\n// //           <label>Sort Order</label>\n// //           <input\n// //             type=\"number\"\n// //             value={formData.sortOrder}\n// //             onChange={(e) => setFormData({ ...formData, sortOrder: parseInt(e.target.value) || 0 })}\n// //             min=\"0\"\n// //           />\n// //         </div>\n\n// //         <div className=\"form-group\">\n// //           <label className=\"checkbox-label\">\n// //             <input\n// //               type=\"checkbox\"\n// //               checked={formData.isActive}\n// //               onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n// //             />\n// //             Active\n// //           </label>\n// //         </div>\n\n// //         <div className=\"form-actions\">\n// //           <button type=\"button\" className=\"btn btn-secondary\" onClick={onClose}>\n// //             Cancel\n// //           </button>\n// //           <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n// //             {loading ? 'Saving...' : (branch ? 'Update' : 'Create')}\n// //           </button>\n// //         </div>\n// //       </form>\n// //     </Modal>\n// //   );\n// // };\n\n// // // ✅ PLACEHOLDER MODALS (will show \"Coming Soon\" for now)\n// // const DomainManagementModal = ({ branch, onClose }) => {\n// //   return (\n// //     <Modal title={`Manage Domains - ${branch.name}`} onClose={onClose} size=\"large\">\n// //       <div className=\"coming-soon\">\n// //         <h3>🚀 Coming Soon!</h3>\n// //         <p>Domain management interface will be available here.</p>\n// //         <p>You'll be able to add and manage domains for {branch.name}.</p>\n// //       </div>\n// //     </Modal>\n// //   );\n// // };\n\n// // const DirectInternshipModal = ({ branch, onClose }) => {\n// //   return (\n// //     <Modal title={`Direct Internships - ${branch.name}`} onClose={onClose} size=\"large\">\n// //       <div className=\"coming-soon\">\n// //         <h3>🚀 Coming Soon!</h3>\n// //         <p>Direct internship management will be available here.</p>\n// //         <p>You'll be able to add internships directly to {branch.name} without requiring domains.</p>\n// //       </div>\n// //     </Modal>\n// //   );\n// // };\n\n// // export default ManageBranches;\nvar _c, _c2;\n$RefreshReg$(_c, \"ManageBranches\");\n$RefreshReg$(_c2, \"EnhancedBranchCard\");","map":{"version":3,"names":["React","useState","useEffect","FiPlus","FiEdit","FiTrash2","FiSettings","FiBookOpen","FiUsers","FiSearch","FiGrid","FiList","FiInfo","FiAlertTriangle","toast","Modal","ConfirmationModal","branchService","jsxDEV","_jsxDEV","ManageBranches","_s","branches","setBranches","loading","setLoading","showModal","setShowModal","editingBranch","setEditingBranch","showDeleteModal","setShowDeleteModal","branchToDelete","setBranchToDelete","searchTerm","setSearchTerm","viewMode","setViewMode","selectedBranch","setSelectedBranch","showDomainModal","setShowDomainModal","showInternshipModal","setShowInternshipModal","fetchBranches","_response$data","_response$data$data","_response$data2","_response$data3","console","log","response","getAllBranches","branchesData","data","Array","isArray","length","success","warning","error","_error$response","_error$response2","status","getBranchState","branch","_domainsResponse$data","_internshipsResponse$","domainsResponse","internshipsResponse","Promise","all","getDomainsByBranch","id","catch","getDirectInternships","domains","directInternships","hasDomains","hasDirectInternships","domainCount","directInternshipCount","canAddDomains","canAddDirectInternships","mode","handleSaveBranch","branchData","updateBranch","createBranch","_error$response3","_error$response3$data","message","handleDeleteBranch","deleteBranch","_error$response4","_error$response4$data","handleBranchAction","action","branchState","name","state","filteredBranches","filter","_branch$name","_branch$code","toLowerCase","includes","code","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","map","EnhancedBranchCard","onEdit","onDelete","onBranchAction","size","BranchModal","onClose","onSave","title","onConfirm","onCancel","confirmText","cancelText","DomainManagementModal","DirectInternshipModal","_c","_s2","showMenu","setShowMenu","setBranchState","loadBranchState","description","disabled","internshipCount","totalLearners","isActive","_c2","$RefreshReg$"],"sources":["/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/components/internships/ManageBranches.js"],"sourcesContent":["\n// src/components/internships/ManageBranches.js\nimport React, { useState, useEffect } from 'react';\nimport { \n  FiPlus, \n  FiEdit, \n  FiTrash2, \n  FiSettings, \n  FiBookOpen,\n  FiUsers,\n  FiSearch,\n  FiGrid,\n  FiList,\n  FiInfo,\n  FiAlertTriangle\n} from 'react-icons/fi';\nimport { toast } from 'react-toastify';\nimport Modal from '../common/Modal';\nimport ConfirmationModal from '../common/ConfirmationModal';\nimport { branchService } from '../../services/branchService';\nimport './ManageBranches.css';\n\nconst ManageBranches = () => {\n  const [branches, setBranches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showModal, setShowModal] = useState(false);\n  const [editingBranch, setEditingBranch] = useState(null);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [branchToDelete, setBranchToDelete] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [viewMode, setViewMode] = useState('grid');\n  const [selectedBranch, setSelectedBranch] = useState(null);\n  const [showDomainModal, setShowDomainModal] = useState(false);\n  const [showInternshipModal, setShowInternshipModal] = useState(false);\n\n  useEffect(() => {\n    fetchBranches();\n  }, []);\n\n  const fetchBranches = async () => {\n    try {\n      setLoading(true);\n      console.log('🔄 Fetching branches from API...');\n      \n      const response = await branchService.getAllBranches();\n      console.log('✅ API Response:', response);\n      \n      let branchesData = [];\n      \n      if (response.data?.data?.branches) {\n        branchesData = response.data.data.branches;\n      } else if (response.data?.branches) {\n        branchesData = response.data.branches;\n      } else if (Array.isArray(response.data?.data)) {\n        branchesData = response.data.data;\n      } else if (Array.isArray(response.data)) {\n        branchesData = response.data;\n      }\n      \n      if (Array.isArray(branchesData) && branchesData.length > 0) {\n        setBranches(branchesData);\n        toast.success(`Loaded ${branchesData.length} branches successfully!`);\n      } else {\n        setBranches([]);\n        toast.warning('No branches found');\n      }\n    } catch (error) {\n      console.error('❌ Error fetching branches:', error);\n      setBranches([]);\n      \n      if (error.response?.status === 401) {\n        toast.error('Authentication required. Please login again.');\n      } else if (error.response?.status === 500) {\n        toast.error('Server error. Please check if the backend is running.');\n      } else {\n        toast.error('Failed to fetch branches. Please try again.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ✅ CHECK BRANCH STATE - determines what actions are allowed\n  const getBranchState = async (branch) => {\n    try {\n      // Fetch domains and direct internships for this branch\n      const [domainsResponse, internshipsResponse] = await Promise.all([\n        branchService.getDomainsByBranch(branch.id).catch(() => ({ data: [] })),\n        branchService.getDirectInternships(branch.id).catch(() => ({ data: [] }))\n      ]);\n\n      const domains = domainsResponse.data?.data || domainsResponse.data || [];\n      const directInternships = internshipsResponse.data?.data || internshipsResponse.data || [];\n\n      const hasDomains = Array.isArray(domains) && domains.length > 0;\n      const hasDirectInternships = Array.isArray(directInternships) && directInternships.length > 0;\n\n      return {\n        hasDomains,\n        hasDirectInternships,\n        domainCount: hasDomains ? domains.length : 0,\n        directInternshipCount: hasDirectInternships ? directInternships.length : 0,\n        // Branch state logic\n        canAddDomains: !hasDirectInternships, // Can add domains only if no direct internships\n        canAddDirectInternships: !hasDomains, // Can add direct internships only if no domains\n        mode: hasDomains ? 'domain-based' : hasDirectInternships ? 'direct' : 'empty'\n      };\n    } catch (error) {\n      console.error('Error checking branch state:', error);\n      return {\n        hasDomains: false,\n        hasDirectInternships: false,\n        domainCount: 0,\n        directInternshipCount: 0,\n        canAddDomains: true,\n        canAddDirectInternships: true,\n        mode: 'empty'\n      };\n    }\n  };\n\n  const handleSaveBranch = async (branchData) => {\n    try {\n      console.log('💾 Saving branch:', branchData);\n      \n      if (editingBranch) {\n        await branchService.updateBranch(editingBranch.id, branchData);\n        toast.success('Branch updated successfully');\n      } else {\n        await branchService.createBranch(branchData);\n        toast.success('Branch created successfully');\n      }\n      \n      setShowModal(false);\n      setEditingBranch(null);\n      fetchBranches();\n    } catch (error) {\n      console.error('❌ Error saving branch:', error);\n      \n      if (error.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error('Failed to save branch');\n      }\n    }\n  };\n\n  const handleDeleteBranch = async () => {\n    try {\n      await branchService.deleteBranch(branchToDelete.id);\n      toast.success('Branch deleted successfully');\n      \n      setShowDeleteModal(false);\n      setBranchToDelete(null);\n      fetchBranches();\n    } catch (error) {\n      console.error('❌ Error deleting branch:', error);\n      \n      if (error.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error('Failed to delete branch');\n      }\n    }\n  };\n\n  // ✅ SMART BRANCH ACTION HANDLER\n  const handleBranchAction = async (branch, action) => {\n    const branchState = await getBranchState(branch);\n    \n    if (action === 'domains') {\n      if (!branchState.canAddDomains) {\n        toast.warning(\n          `Cannot add domains to ${branch.name} because it has direct internships. ` +\n          `A branch can either have domains OR direct internships, not both.`\n        );\n        return;\n      }\n      setSelectedBranch({ ...branch, state: branchState });\n      setShowDomainModal(true);\n    } else if (action === 'internships') {\n      if (!branchState.canAddDirectInternships) {\n        toast.warning(\n          `Cannot add direct internships to ${branch.name} because it has domains. ` +\n          `Please add internships within the existing domains instead.`\n        );\n        return;\n      }\n      setSelectedBranch({ ...branch, state: branchState });\n      setShowInternshipModal(true);\n    }\n  };\n\n  const filteredBranches = Array.isArray(branches) ? branches.filter(branch =>\n    branch.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    branch.code?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) : [];\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading branches...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"manage-branches\">\n      <div className=\"page-header\">\n        <div className=\"header-content\">\n          <h1>Manage Branches</h1>\n          <p>Manage academic branches and their associated domains or direct internships</p>\n        </div>\n        <button \n          className=\"btn btn-primary\"\n          onClick={() => {\n            setEditingBranch(null);\n            setShowModal(true);\n          }}\n        >\n          <FiPlus /> Add Branch\n        </button>\n      </div>\n\n      <div className=\"page-controls\">\n        <div className=\"search-controls\">\n          <div className=\"search-box\">\n            <FiSearch />\n            <input\n              type=\"text\"\n              placeholder=\"Search branches...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n        </div>\n        \n        <div className=\"view-controls\">\n          <button\n            className={`view-btn ${viewMode === 'grid' ? 'active' : ''}`}\n            onClick={() => setViewMode('grid')}\n          >\n            <FiGrid />\n          </button>\n          <button\n            className={`view-btn ${viewMode === 'list' ? 'active' : ''}`}\n            onClick={() => setViewMode('list')}\n          >\n            <FiList />\n          </button>\n        </div>\n      </div>\n\n      {/* ✅ BRANCH STATE INFO PANEL */}\n      <div className=\"info-panel\">\n        <div className=\"info-card\">\n          <FiInfo className=\"info-icon\" />\n          <div className=\"info-content\">\n            <h4>Branch Organization Rules</h4>\n            <ul>\n              <li><strong>Domain-based:</strong> Create domains first, then add internships within domains</li>\n              <li><strong>Direct internships:</strong> Add internships directly to the branch without domains</li>\n              <li><strong>Exclusive:</strong> A branch can have either domains OR direct internships, not both</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <div className={`branches-container ${viewMode}`}>\n        {filteredBranches.map(branch => (\n          <EnhancedBranchCard\n            key={branch.id}\n            branch={branch}\n            viewMode={viewMode}\n            onEdit={(branch) => {\n              setEditingBranch(branch);\n              setShowModal(true);\n            }}\n            onDelete={(branch) => {\n              setBranchToDelete(branch);\n              setShowDeleteModal(true);\n            }}\n            onBranchAction={handleBranchAction}\n            getBranchState={getBranchState}\n          />\n        ))}\n      </div>\n\n      {filteredBranches.length === 0 && !loading && (\n        <div className=\"empty-state\">\n          <FiBookOpen size={48} />\n          <h3>No branches found</h3>\n          <p>Get started by creating your first branch</p>\n          <button \n            className=\"btn btn-primary\"\n            onClick={() => {\n              setEditingBranch(null);\n              setShowModal(true);\n            }}\n          >\n            <FiPlus /> Add Branch\n          </button>\n        </div>\n      )}\n\n      {/* Modals */}\n      {showModal && (\n        <BranchModal\n          branch={editingBranch}\n          onClose={() => {\n            setShowModal(false);\n            setEditingBranch(null);\n          }}\n          onSave={handleSaveBranch}\n        />\n      )}\n\n      {showDeleteModal && (\n        <ConfirmationModal\n          title=\"Delete Branch\"\n          message={`Are you sure you want to delete \"${branchToDelete?.name}\"? This action cannot be undone.`}\n          onConfirm={handleDeleteBranch}\n          onCancel={() => {\n            setShowDeleteModal(false);\n            setBranchToDelete(null);\n          }}\n          confirmText=\"Delete\"\n          cancelText=\"Cancel\"\n          type=\"danger\"\n        />\n      )}\n\n      {showDomainModal && selectedBranch && (\n        <DomainManagementModal\n          branch={selectedBranch}\n          onClose={() => {\n            setShowDomainModal(false);\n            setSelectedBranch(null);\n          }}\n        />\n      )}\n\n      {showInternshipModal && selectedBranch && (\n        <DirectInternshipModal\n          branch={selectedBranch}\n          onClose={() => {\n            setShowInternshipModal(false);\n            setSelectedBranch(null);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\n// ✅ ENHANCED BRANCH CARD WITH STATE LOGIC\nconst EnhancedBranchCard = ({ branch, viewMode, onEdit, onDelete, onBranchAction, getBranchState }) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const [branchState, setBranchState] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadBranchState();\n  }, [branch.id]);\n\n  const loadBranchState = async () => {\n    try {\n      setLoading(true);\n      const state = await getBranchState(branch);\n      setBranchState(state);\n    } catch (error) {\n      console.error('Error loading branch state:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={`branch-card ${viewMode} loading`}>\n        <div className=\"loading-content\">\n          <div className=\"loading-spinner-sm\"></div>\n          <span>Loading branch data...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`branch-card ${viewMode} ${branchState?.mode}`}>\n      <div className=\"branch-header\">\n        <div className=\"branch-icon\">\n          <FiBookOpen />\n        </div>\n        <div className=\"branch-info\">\n          <h3 className=\"branch-name\">{branch.name}</h3>\n          <span className=\"branch-code\">{branch.code}</span>\n          {branch.description && (\n            <p className=\"branch-description\">{branch.description}</p>\n          )}\n          \n          {/* ✅ BRANCH STATE INDICATOR */}\n          <div className=\"branch-state\">\n            {branchState?.mode === 'domain-based' && (\n              <span className=\"state-badge domain-based\">\n                <FiGrid /> Domain-based ({branchState.domainCount} domains)\n              </span>\n            )}\n            {branchState?.mode === 'direct' && (\n              <span className=\"state-badge direct\">\n                <FiUsers /> Direct internships ({branchState.directInternshipCount})\n              </span>\n            )}\n            {branchState?.mode === 'empty' && (\n              <span className=\"state-badge empty\">\n                <FiInfo /> Ready to configure\n              </span>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"branch-menu\">\n          <button onClick={() => setShowMenu(!showMenu)}>\n            <FiSettings />\n          </button>\n          {showMenu && (\n            <div className=\"dropdown-menu\">\n              {/* ✅ SMART MENU OPTIONS BASED ON BRANCH STATE */}\n              <button \n                onClick={() => {\n                  onBranchAction(branch, 'domains');\n                  setShowMenu(false);\n                }}\n                disabled={!branchState?.canAddDomains}\n                className={!branchState?.canAddDomains ? 'disabled' : ''}\n                title={!branchState?.canAddDomains ? 'Cannot add domains - branch has direct internships' : ''}\n              >\n                <FiGrid /> \n                {branchState?.hasDomains ? 'Manage Domains' : 'Add Domains'}\n                {!branchState?.canAddDomains && <FiAlertTriangle className=\"warning-icon\" />}\n              </button>\n              \n              <button \n                onClick={() => {\n                  onBranchAction(branch, 'internships');\n                  setShowMenu(false);\n                }}\n                disabled={!branchState?.canAddDirectInternships}\n                className={!branchState?.canAddDirectInternships ? 'disabled' : ''}\n                title={!branchState?.canAddDirectInternships ? 'Cannot add direct internships - branch has domains' : ''}\n              >\n                <FiUsers /> \n                {branchState?.hasDirectInternships ? 'Manage Internships' : 'Add Direct Internships'}\n                {!branchState?.canAddDirectInternships && <FiAlertTriangle className=\"warning-icon\" />}\n              </button>\n              \n              <div className=\"menu-divider\"></div>\n              \n              <button onClick={() => {\n                onEdit(branch);\n                setShowMenu(false);\n              }}>\n                <FiEdit /> Edit Branch\n              </button>\n              \n              <button \n                onClick={() => {\n                  onDelete(branch);\n                  setShowMenu(false);\n                }} \n                className=\"danger\"\n              >\n                <FiTrash2 /> Delete Branch\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"branch-stats\">\n        <div className=\"stat\">\n          <span className=\"stat-value\">{branchState?.domainCount || 0}</span>\n          <span className=\"stat-label\">Domains</span>\n        </div>\n        <div className=\"stat\">\n          <span className=\"stat-value\">\n            {(branchState?.directInternshipCount || 0) + (branch.internshipCount || 0)}\n          </span>\n          <span className=\"stat-label\">Internships</span>\n        </div>\n        <div className=\"stat\">\n          <span className=\"stat-value\">{branch.totalLearners || 0}</span>\n          <span className=\"stat-label\">Learners</span>\n        </div>\n        <div className=\"stat\">\n          <span className={`status ${branch.isActive ? 'active' : 'inactive'}`}>\n            {branch.isActive ? 'Active' : 'Inactive'}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"branch-actions\">\n        <button \n          className={`btn btn-sm ${branchState?.canAddDomains ? 'btn-outline' : 'btn-disabled'}`}\n          onClick={() => onBranchAction(branch, 'domains')}\n          disabled={!branchState?.canAddDomains}\n          title={!branchState?.canAddDomains ? 'Cannot add domains - branch has direct internships' : ''}\n        >\n          <FiGrid /> Domains\n        </button>\n        <button \n          className={`btn btn-sm ${branchState?.canAddDirectInternships ? 'btn-outline' : 'btn-disabled'}`}\n          onClick={() => onBranchAction(branch, 'internships')}\n          disabled={!branchState?.canAddDirectInternships}\n          title={!branchState?.canAddDirectInternships ? 'Cannot add direct internships - branch has domains' : ''}\n        >\n          <FiUsers /> Internships\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Keep existing BranchModal, DomainManagementModal, and DirectInternshipModal components...\n// (Previous implementations remain the same)\n\nexport default ManageBranches;\n\n\n\n\n\n\n// // src/components/internships/ManageBranches.js - REAL API INTEGRATION\n\n// import React, { useState, useEffect } from 'react';\n// import { \n//   FiPlus, \n//   FiEdit, \n//   FiTrash2, \n//   FiSettings, \n//   FiBookOpen,\n//   FiUsers,\n//   FiSearch,\n//   FiGrid,\n//   FiList\n// } from 'react-icons/fi';\n// import { toast } from 'react-toastify';\n// import Modal from '../common/Modal';\n// import ConfirmationModal from '../common/ConfirmationModal';\n// import { branchService } from '../../services/branchService';\n// import './ManageBranches.css';\n\n// const ManageBranches = () => {\n//   const [branches, setBranches] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [showModal, setShowModal] = useState(false);\n//   const [editingBranch, setEditingBranch] = useState(null);\n//   const [showDeleteModal, setShowDeleteModal] = useState(false);\n//   const [branchToDelete, setBranchToDelete] = useState(null);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [viewMode, setViewMode] = useState('grid');\n//   const [selectedBranch, setSelectedBranch] = useState(null);\n//   const [showDomainModal, setShowDomainModal] = useState(false);\n//   const [showInternshipModal, setShowInternshipModal] = useState(false);\n\n//   useEffect(() => {\n//     fetchBranches();\n//   }, []);\n\n//   // const fetchBranches = async () => {\n//   //   try {\n//   //     setLoading(true);\n//   //     console.log('🔄 Fetching branches from API...');\n      \n//   //     const response = await branchService.getAllBranches();\n//   //     console.log('✅ API Response:', response);\n      \n//   //     // Handle different response structures\n//   //     const branchesData = response.data?.data || response.data || [];\n      \n//   //     if (Array.isArray(branchesData)) {\n//   //       setBranches(branchesData);\n//   //       toast.success(`Loaded ${branchesData.length} branches successfully!`);\n//   //     } else {\n//   //       console.warn('⚠️ Invalid response format:', response);\n//   //       setBranches([]);\n//   //       toast.warning('No branches found');\n//   //     }\n//   //   } catch (error) {\n//   //     console.error('❌ Error fetching branches:', error);\n      \n//   //     if (error.response?.status === 401) {\n//   //       toast.error('Authentication required. Please login again.');\n//   //     } else if (error.response?.status === 500) {\n//   //       toast.error('Server error. Please check if the backend is running.');\n//   //     } else {\n//   //       toast.error('Failed to fetch branches. Please try again.');\n//   //     }\n      \n//   //     setBranches([]);\n//   //   } finally {\n//   //     setLoading(false);\n//   //   }\n//   // };\n\n\n//   // src/components/internships/ManageBranches.js - FIXED RESPONSE PARSING\n\n// // Replace the fetchBranches function in your ManageBranches.js with this:\n\n// const fetchBranches = async () => {\n//   try {\n//     setLoading(true);\n//     console.log('🔄 Fetching branches from API...');\n    \n//     const response = await branchService.getAllBranches();\n//     console.log('✅ API Response:', response);\n    \n//     // ✅ FIXED: Correct data extraction from response\n//     // Your API returns: { success: true, data: { branches: [...], pagination: {...} } }\n//     // So we need to access response.data.data.branches\n    \n//     let branchesData = [];\n    \n//     // Handle different possible response structures\n//     if (response.data?.data?.branches) {\n//       // Standard API response: response.data.data.branches\n//       branchesData = response.data.data.branches;\n//       console.log('✅ Using response.data.data.branches:', branchesData);\n//     } else if (response.data?.branches) {\n//       // Alternative structure: response.data.branches\n//       branchesData = response.data.branches;\n//       console.log('✅ Using response.data.branches:', branchesData);\n//     } else if (Array.isArray(response.data?.data)) {\n//       // Direct array in data: response.data.data\n//       branchesData = response.data.data;\n//       console.log('✅ Using response.data.data (array):', branchesData);\n//     } else if (Array.isArray(response.data)) {\n//       // Direct array: response.data\n//       branchesData = response.data;\n//       console.log('✅ Using response.data (array):', branchesData);\n//     } else {\n//       console.warn('⚠️ Unexpected response structure:', response.data);\n//       branchesData = [];\n//     }\n    \n//     if (Array.isArray(branchesData) && branchesData.length > 0) {\n//       setBranches(branchesData);\n//       toast.success(`Loaded ${branchesData.length} branches successfully!`);\n//       console.log('✅ Branches set successfully:', branchesData);\n//     } else {\n//       console.warn('⚠️ No branches found in response');\n//       setBranches([]);\n//       toast.warning('No branches found');\n//     }\n//   } catch (error) {\n//     console.error('❌ Error fetching branches:', error);\n    \n//     if (error.response?.status === 401) {\n//       toast.error('Authentication required. Please login again.');\n//     } else if (error.response?.status === 500) {\n//       toast.error('Server error. Please check if the backend is running.');\n//     } else {\n//       toast.error('Failed to fetch branches. Please try again.');\n//     }\n    \n//     setBranches([]);\n//   } finally {\n//     setLoading(false);\n//   }\n// };\n//   const handleSaveBranch = async (branchData) => {\n//     try {\n//       console.log('💾 Saving branch:', branchData);\n      \n//       if (editingBranch) {\n//         await branchService.updateBranch(editingBranch.id, branchData);\n//         toast.success('Branch updated successfully');\n//       } else {\n//         await branchService.createBranch(branchData);\n//         toast.success('Branch created successfully');\n//       }\n      \n//       setShowModal(false);\n//       setEditingBranch(null);\n//       fetchBranches(); // Refresh the list\n//     } catch (error) {\n//       console.error('❌ Error saving branch:', error);\n      \n//       if (error.response?.data?.message) {\n//         toast.error(error.response.data.message);\n//       } else {\n//         toast.error('Failed to save branch');\n//       }\n//     }\n//   };\n\n//   const handleDeleteBranch = async () => {\n//     try {\n//       console.log('🗑️ Deleting branch:', branchToDelete);\n      \n//       await branchService.deleteBranch(branchToDelete.id);\n//       toast.success('Branch deleted successfully');\n      \n//       setShowDeleteModal(false);\n//       setBranchToDelete(null);\n//       fetchBranches(); // Refresh the list\n//     } catch (error) {\n//       console.error('❌ Error deleting branch:', error);\n      \n//       if (error.response?.data?.message) {\n//         toast.error(error.response.data.message);\n//       } else {\n//         toast.error('Failed to delete branch');\n//       }\n//     }\n//   };\n\n//   // Safe filtering with array check\n//   const filteredBranches = Array.isArray(branches) ? branches.filter(branch =>\n//     branch.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//     branch.code?.toLowerCase().includes(searchTerm.toLowerCase())\n//   ) : [];\n\n//   if (loading) {\n//     return (\n//       <div className=\"loading-container\">\n//         <div className=\"loading-spinner\"></div>\n//         <p>Loading branches...</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"manage-branches\">\n//       <div className=\"page-header\">\n//         <div className=\"header-content\">\n//           <h1>Manage Branches</h1>\n//           <p>Manage academic branches and their associated domains</p>\n//         </div>\n//         <button \n//           className=\"btn btn-primary\"\n//           onClick={() => {\n//             setEditingBranch(null);\n//             setShowModal(true);\n//           }}\n//         >\n//           <FiPlus /> Add Branch\n//         </button>\n//       </div>\n\n//       <div className=\"page-controls\">\n//         <div className=\"search-controls\">\n//           <div className=\"search-box\">\n//             <FiSearch />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search branches...\"\n//               value={searchTerm}\n//               onChange={(e) => setSearchTerm(e.target.value)}\n//             />\n//           </div>\n//         </div>\n        \n//         <div className=\"view-controls\">\n//           <button\n//             className={`view-btn ${viewMode === 'grid' ? 'active' : ''}`}\n//             onClick={() => setViewMode('grid')}\n//           >\n//             <FiGrid />\n//           </button>\n//           <button\n//             className={`view-btn ${viewMode === 'list' ? 'active' : ''}`}\n//             onClick={() => setViewMode('list')}\n//           >\n//             <FiList />\n//           </button>\n//         </div>\n//       </div>\n\n//       <div className={`branches-container ${viewMode}`}>\n//         {filteredBranches.map(branch => (\n//           <BranchCard\n//             key={branch.id}\n//             branch={branch}\n//             viewMode={viewMode}\n//             onEdit={(branch) => {\n//               setEditingBranch(branch);\n//               setShowModal(true);\n//             }}\n//             onDelete={(branch) => {\n//               setBranchToDelete(branch);\n//               setShowDeleteModal(true);\n//             }}\n//             onManageDomains={(branch) => {\n//               setSelectedBranch(branch);\n//               setShowDomainModal(true);\n//             }}\n//             onManageInternships={(branch) => {\n//               setSelectedBranch(branch);\n//               setShowInternshipModal(true);\n//             }}\n//           />\n//         ))}\n//       </div>\n\n//       {filteredBranches.length === 0 && !loading && (\n//         <div className=\"empty-state\">\n//           <FiBookOpen size={48} />\n//           <h3>No branches found</h3>\n//           <p>Get started by creating your first branch</p>\n//           <button \n//             className=\"btn btn-primary\"\n//             onClick={() => {\n//               setEditingBranch(null);\n//               setShowModal(true);\n//             }}\n//           >\n//             <FiPlus /> Add Branch\n//           </button>\n//         </div>\n//       )}\n\n//       {/* Branch Modal */}\n//       {showModal && (\n//         <BranchModal\n//           branch={editingBranch}\n//           onClose={() => {\n//             setShowModal(false);\n//             setEditingBranch(null);\n//           }}\n//           onSave={handleSaveBranch}\n//         />\n//       )}\n\n//       {/* Delete Confirmation Modal */}\n//       {showDeleteModal && (\n//         <ConfirmationModal\n//           title=\"Delete Branch\"\n//           message={`Are you sure you want to delete \"${branchToDelete?.name}\"? This action cannot be undone.`}\n//           onConfirm={handleDeleteBranch}\n//           onCancel={() => {\n//             setShowDeleteModal(false);\n//             setBranchToDelete(null);\n//           }}\n//           confirmText=\"Delete\"\n//           cancelText=\"Cancel\"\n//           type=\"danger\"\n//         />\n//       )}\n\n//       {/* ✅ REAL DOMAIN MANAGEMENT MODAL */}\n//       {showDomainModal && selectedBranch && (\n//         <DomainManagementModal\n//           branch={selectedBranch}\n//           onClose={() => {\n//             setShowDomainModal(false);\n//             setSelectedBranch(null);\n//           }}\n//         />\n//       )}\n\n//       {/* Direct Internship Management Modal */}\n//       {showInternshipModal && selectedBranch && (\n//         <DirectInternshipModal\n//           branch={selectedBranch}\n//           onClose={() => {\n//             setShowInternshipModal(false);\n//             setSelectedBranch(null);\n//           }}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // Branch Card Component (same as before)\n// const BranchCard = ({ branch, viewMode, onEdit, onDelete, onManageDomains, onManageInternships }) => {\n//   const [showMenu, setShowMenu] = useState(false);\n\n//   return (\n//     <div className={`branch-card ${viewMode}`}>\n//       <div className=\"branch-header\">\n//         <div className=\"branch-icon\">\n//           <FiBookOpen />\n//         </div>\n//         <div className=\"branch-info\">\n//           <h3 className=\"branch-name\">{branch.name}</h3>\n//           <span className=\"branch-code\">{branch.code}</span>\n//           {branch.description && (\n//             <p className=\"branch-description\">{branch.description}</p>\n//           )}\n//         </div>\n//         <div className=\"branch-menu\">\n//           <button onClick={() => setShowMenu(!showMenu)}>\n//             <FiSettings />\n//           </button>\n//           {showMenu && (\n//             <div className=\"dropdown-menu\">\n//               <button onClick={() => {\n//                 onManageDomains(branch);\n//                 setShowMenu(false);\n//               }}>\n//                 <FiGrid /> Manage Domains\n//               </button>\n//               <button onClick={() => {\n//                 onManageInternships(branch);\n//                 setShowMenu(false);\n//               }}>\n//                 <FiUsers /> Direct Internships\n//               </button>\n//               <button onClick={() => {\n//                 onEdit(branch);\n//                 setShowMenu(false);\n//               }}>\n//                 <FiEdit /> Edit Branch\n//               </button>\n//               <button \n//                 onClick={() => {\n//                   onDelete(branch);\n//                   setShowMenu(false);\n//                 }} \n//                 className=\"danger\"\n//               >\n//                 <FiTrash2 /> Delete Branch\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n      \n//       <div className=\"branch-stats\">\n//         <div className=\"stat\">\n//           <span className=\"stat-value\">{branch.domainCount || 0}</span>\n//           <span className=\"stat-label\">Domains</span>\n//         </div>\n//         <div className=\"stat\">\n//           <span className=\"stat-value\">{branch.internshipCount || 0}</span>\n//           <span className=\"stat-label\">Internships</span>\n//         </div>\n//         <div className=\"stat\">\n//           <span className=\"stat-value\">{branch.totalLearners || 0}</span>\n//           <span className=\"stat-label\">Learners</span>\n//         </div>\n//         <div className=\"stat\">\n//           <span className={`status ${branch.isActive ? 'active' : 'inactive'}`}>\n//             {branch.isActive ? 'Active' : 'Inactive'}\n//           </span>\n//         </div>\n//       </div>\n\n//       <div className=\"branch-actions\">\n//         <button \n//           className=\"btn btn-sm btn-outline\"\n//           onClick={() => onManageDomains(branch)}\n//         >\n//           <FiGrid /> Domains\n//         </button>\n//         <button \n//           className=\"btn btn-sm btn-outline\"\n//           onClick={() => onManageInternships(branch)}\n//         >\n//           <FiUsers /> Internships\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Branch Modal Component (same as before)\n// const BranchModal = ({ branch, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     name: branch?.name || '',\n//     code: branch?.code || '',\n//     description: branch?.description || '',\n//     isActive: branch?.isActive !== undefined ? branch.isActive : true,\n//     sortOrder: branch?.sortOrder || 0\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const [loading, setLoading] = useState(false);\n\n//   const validate = () => {\n//     const newErrors = {};\n    \n//     if (!formData.name.trim()) {\n//       newErrors.name = 'Branch name is required';\n//     } else if (formData.name.length < 2) {\n//       newErrors.name = 'Branch name must be at least 2 characters';\n//     }\n    \n//     if (!formData.code.trim()) {\n//       newErrors.code = 'Branch code is required';\n//     } else if (formData.code.length < 2) {\n//       newErrors.code = 'Branch code must be at least 2 characters';\n//     }\n    \n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n    \n//     if (!validate()) return;\n    \n//     setLoading(true);\n//     try {\n//       await onSave(formData);\n//     } catch (error) {\n//       console.error('Error saving branch:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <Modal title={branch ? 'Edit Branch' : 'Add Branch'} onClose={onClose}>\n//       <form onSubmit={handleSubmit} className=\"branch-form\">\n//         <div className=\"form-group\">\n//           <label>Branch Name *</label>\n//           <input\n//             type=\"text\"\n//             value={formData.name}\n//             onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n//             placeholder=\"e.g., Computer Science & Engineering\"\n//             className={errors.name ? 'error' : ''}\n//           />\n//           {errors.name && <span className=\"error-text\">{errors.name}</span>}\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label>Branch Code *</label>\n//           <input\n//             type=\"text\"\n//             value={formData.code}\n//             onChange={(e) => setFormData({ ...formData, code: e.target.value.toUpperCase() })}\n//             placeholder=\"e.g., CSE\"\n//             className={errors.code ? 'error' : ''}\n//           />\n//           {errors.code && <span className=\"error-text\">{errors.code}</span>}\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label>Description</label>\n//           <textarea\n//             value={formData.description}\n//             onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n//             placeholder=\"Brief description of the branch\"\n//             rows={3}\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label>Sort Order</label>\n//           <input\n//             type=\"number\"\n//             value={formData.sortOrder}\n//             onChange={(e) => setFormData({ ...formData, sortOrder: parseInt(e.target.value) || 0 })}\n//             min=\"0\"\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label className=\"checkbox-label\">\n//             <input\n//               type=\"checkbox\"\n//               checked={formData.isActive}\n//               onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n//             />\n//             Active\n//           </label>\n//         </div>\n\n//         <div className=\"form-actions\">\n//           <button type=\"button\" className=\"btn btn-secondary\" onClick={onClose}>\n//             Cancel\n//           </button>\n//           <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n//             {loading ? 'Saving...' : (branch ? 'Update' : 'Create')}\n//           </button>\n//         </div>\n//       </form>\n//     </Modal>\n//   );\n// };\n\n// // ✅ REAL DOMAIN MANAGEMENT MODAL WITH API INTEGRATION\n// const DomainManagementModal = ({ branch, onClose }) => {\n//   const [domains, setDomains] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [showDomainModal, setShowDomainModal] = useState(false);\n//   const [editingDomain, setEditingDomain] = useState(null);\n\n//   useEffect(() => {\n//     fetchDomains();\n//   }, [branch.id]);\n\n//   const fetchDomains = async () => {\n//     try {\n//       setLoading(true);\n//       console.log('🔄 Fetching domains for branch:', branch.id);\n      \n//       const response = await branchService.getDomainsByBranch(branch.id);\n//       console.log('✅ Domains API Response:', response);\n      \n//       const domainsData = response.data?.data || response.data || [];\n//       setDomains(Array.isArray(domainsData) ? domainsData : []);\n      \n//     } catch (error) {\n//       console.error('❌ Error fetching domains:', error);\n      \n//       if (error.response?.status === 404) {\n//         setDomains([]); // No domains found is okay\n//       } else {\n//         toast.error('Failed to fetch domains');\n//       }\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSaveDomain = async (domainData) => {\n//     try {\n//       const dataWithBranch = { ...domainData, branchId: branch.id };\n//       console.log('💾 Saving domain:', dataWithBranch);\n      \n//       if (editingDomain) {\n//         await branchService.updateDomain(editingDomain.id, dataWithBranch);\n//         toast.success('Domain updated successfully');\n//       } else {\n//         await branchService.createDomain(dataWithBranch);\n//         toast.success('Domain created successfully');\n//       }\n      \n//       setShowDomainModal(false);\n//       setEditingDomain(null);\n//       fetchDomains(); // Refresh the list\n//     } catch (error) {\n//       console.error('❌ Error saving domain:', error);\n      \n//       if (error.response?.data?.message) {\n//         toast.error(error.response.data.message);\n//       } else {\n//         toast.error('Failed to save domain');\n//       }\n//     }\n//   };\n\n//   const handleDeleteDomain = async (domain) => {\n//     if (window.confirm(`Are you sure you want to delete \"${domain.name}\"?`)) {\n//       try {\n//         console.log('🗑️ Deleting domain:', domain);\n        \n//         await branchService.deleteDomain(domain.id);\n//         toast.success('Domain deleted successfully');\n//         fetchDomains(); // Refresh the list\n//       } catch (error) {\n//         console.error('❌ Error deleting domain:', error);\n        \n//         if (error.response?.data?.message) {\n//           toast.error(error.response.data.message);\n//         } else {\n//           toast.error('Failed to delete domain');\n//         }\n//       }\n//     }\n//   };\n\n//   return (\n//     <Modal \n//       title={`Manage Domains - ${branch.name}`} \n//       onClose={onClose}\n//       size=\"large\"\n//     >\n//       <div className=\"domain-management\">\n//         <div className=\"section-header\">\n//           <h3>Domains under {branch.name}</h3>\n//           <button \n//             className=\"btn btn-primary\"\n//             onClick={() => {\n//               setEditingDomain(null);\n//               setShowDomainModal(true);\n//             }}\n//           >\n//             <FiPlus /> Add Domain\n//           </button>\n//         </div>\n\n//         {loading ? (\n//           <div className=\"loading-container\">\n//             <div className=\"loading-spinner\"></div>\n//             <p>Loading domains...</p>\n//           </div>\n//         ) : (\n//           <div className=\"domains-grid\">\n//             {domains.map(domain => (\n//               <div key={domain.id} className=\"domain-card\">\n//                 <div className=\"domain-header\">\n//                   <h4>{domain.name}</h4>\n//                   <div className=\"domain-actions\">\n//                     <button \n//                       className=\"btn btn-sm btn-outline\"\n//                       onClick={() => {\n//                         setEditingDomain(domain);\n//                         setShowDomainModal(true);\n//                       }}\n//                     >\n//                       <FiEdit />\n//                     </button>\n//                     <button \n//                       className=\"btn btn-sm btn-danger\"\n//                       onClick={() => handleDeleteDomain(domain)}\n//                     >\n//                       <FiTrash2 />\n//                     </button>\n//                   </div>\n//                 </div>\n                \n//                 {domain.description && (\n//                   <p className=\"domain-description\">{domain.description}</p>\n//                 )}\n                \n//                 <div className=\"domain-stats\">\n//                   <span className=\"stat\">\n//                     {domain.internshipCount || 0} Internships\n//                   </span>\n//                   <span className={`status ${domain.isActive ? 'active' : 'inactive'}`}>\n//                     {domain.isActive ? 'Active' : 'Inactive'}\n//                   </span>\n//                 </div>\n//               </div>\n//             ))}\n            \n//             {domains.length === 0 && (\n//               <div className=\"empty-state\">\n//                 <FiGrid size={32} />\n//                 <p>No domains found</p>\n//                 <button \n//                   className=\"btn btn-primary\"\n//                   onClick={() => {\n//                     setEditingDomain(null);\n//                     setShowDomainModal(true);\n//                   }}\n//                 >\n//                   <FiPlus /> Add First Domain\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         )}\n\n//         {/* Domain Modal */}\n//         {showDomainModal && (\n//           <DomainModal\n//             domain={editingDomain}\n//             branch={branch}\n//             onClose={() => {\n//               setShowDomainModal(false);\n//               setEditingDomain(null);\n//             }}\n//             onSave={handleSaveDomain}\n//           />\n//         )}\n//       </div>\n//     </Modal>\n//   );\n// };\n\n// // Domain Modal Component\n// const DomainModal = ({ domain, branch, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     name: domain?.name || '',\n//     description: domain?.description || '',\n//     isActive: domain?.isActive !== undefined ? domain.isActive : true,\n//     sortOrder: domain?.sortOrder || 0\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const [loading, setLoading] = useState(false);\n\n//   const validate = () => {\n//     const newErrors = {};\n    \n//     if (!formData.name.trim()) {\n//       newErrors.name = 'Domain name is required';\n//     } else if (formData.name.length < 2) {\n//       newErrors.name = 'Domain name must be at least 2 characters';\n//     }\n    \n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n    \n//     if (!validate()) return;\n    \n//     setLoading(true);\n//     try {\n//       await onSave(formData);\n//     } catch (error) {\n//       console.error('Error saving domain:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <Modal title={domain ? 'Edit Domain' : 'Add Domain'} onClose={onClose}>\n//       <form onSubmit={handleSubmit} className=\"domain-form\">\n//         <div className=\"form-group\">\n//           <label>Domain Name *</label>\n//           <input\n//             type=\"text\"\n//             value={formData.name}\n//             onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n//             placeholder=\"e.g., Artificial Intelligence & Machine Learning\"\n//             className={errors.name ? 'error' : ''}\n//           />\n//           {errors.name && <span className=\"error-text\">{errors.name}</span>}\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label>Description</label>\n//           <textarea\n//             value={formData.description}\n//             onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n//             placeholder=\"Brief description of the domain\"\n//             rows={3}\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label>Sort Order</label>\n//           <input\n//             type=\"number\"\n//             value={formData.sortOrder}\n//             onChange={(e) => setFormData({ ...formData, sortOrder: parseInt(e.target.value) || 0 })}\n//             min=\"0\"\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label className=\"checkbox-label\">\n//             <input\n//               type=\"checkbox\"\n//               checked={formData.isActive}\n//               onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n//             />\n//             Active\n//           </label>\n//         </div>\n\n//         <div className=\"form-actions\">\n//           <button type=\"button\" className=\"btn btn-secondary\" onClick={onClose}>\n//             Cancel\n//           </button>\n//           <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n//             {loading ? 'Saving...' : (domain ? 'Update' : 'Create')}\n//           </button>\n//         </div>\n//       </form>\n//     </Modal>\n//   );\n// };\n\n// // Placeholder for Direct Internship Modal\n// const DirectInternshipModal = ({ branch, onClose }) => {\n//   return (\n//     <Modal title={`Direct Internships - ${branch.name}`} onClose={onClose} size=\"large\">\n//       <div className=\"coming-soon\">\n//         <h3>🚀 Coming Soon!</h3>\n//         <p>Direct internship management will be available here.</p>\n//         <p>You'll be able to add internships directly to {branch.name} without requiring domains.</p>\n//       </div>\n//     </Modal>\n//   );\n// };\n\n// export default ManageBranches;\n\n\n\n// // // src/components/internships/ManageBranches.js - FIXED VERSION\n// // import React, { useState, useEffect } from 'react';\n// // import { \n// //   FiPlus, \n// //   FiEdit, \n// //   FiTrash2, \n// //   FiSettings, \n// //   FiBookOpen,\n// //   FiUsers,\n// //   FiSearch,\n// //   FiGrid,\n// //   FiList\n// // } from 'react-icons/fi';\n// // import { toast } from 'react-toastify';\n// // import Modal from '../common/Modal';\n// // import ConfirmationModal from '../common/ConfirmationModal';\n// // // import { branchService } from '../../services/branchService'; // Commented out for now\n// // import './ManageBranches.css';\n\n// // const ManageBranches = () => {\n// //   const [branches, setBranches] = useState([]); // ✅ Ensure it's always an array\n// //   const [loading, setLoading] = useState(true);\n// //   const [showModal, setShowModal] = useState(false);\n// //   const [editingBranch, setEditingBranch] = useState(null);\n// //   const [showDeleteModal, setShowDeleteModal] = useState(false);\n// //   const [branchToDelete, setBranchToDelete] = useState(null);\n// //   const [searchTerm, setSearchTerm] = useState('');\n// //   const [viewMode, setViewMode] = useState('grid');\n// //   const [selectedBranch, setSelectedBranch] = useState(null);\n// //   const [showDomainModal, setShowDomainModal] = useState(false);\n// //   const [showInternshipModal, setShowInternshipModal] = useState(false);\n\n// //   useEffect(() => {\n// //     fetchBranches();\n// //   }, []);\n\n// //   const fetchBranches = async () => {\n// //     try {\n// //       setLoading(true);\n      \n// //       // ✅ TEMPORARY: Mock data for testing (replace with real API call later)\n// //       const mockBranches = [\n// //         {\n// //           id: 1,\n// //           name: 'Computer Science & Engineering',\n// //           code: 'CSE',\n// //           description: 'Computer Science and Engineering branch focusing on software development and technology.',\n// //           isActive: true,\n// //           domainCount: 5,\n// //           internshipCount: 12,\n// //           totalLearners: 150\n// //         },\n// //         {\n// //           id: 2,\n// //           name: 'Electronics & Communication Engineering',\n// //           code: 'ECE',\n// //           description: 'Electronics and Communication Engineering branch.',\n// //           isActive: true,\n// //           domainCount: 3,\n// //           internshipCount: 8,\n// //           totalLearners: 95\n// //         },\n// //         {\n// //           id: 3,\n// //           name: 'Mechanical Engineering',\n// //           code: 'MECH',\n// //           description: 'Mechanical Engineering branch.',\n// //           isActive: true,\n// //           domainCount: 2,\n// //           internshipCount: 5,\n// //           totalLearners: 60\n// //         }\n// //       ];\n\n// //       // Simulate API delay\n// //       setTimeout(() => {\n// //         setBranches(mockBranches);\n// //         setLoading(false);\n// //         toast.success('Branches loaded successfully!');\n// //       }, 1000);\n\n// //       // ✅ FUTURE: Uncomment this when branchService is ready\n// //       // const response = await branchService.getAllBranches();\n// //       // setBranches(Array.isArray(response.data) ? response.data : []);\n      \n// //     } catch (error) {\n// //       console.error('Error fetching branches:', error);\n// //       toast.error('Failed to fetch branches');\n// //       setBranches([]); // ✅ Ensure it's always an array on error\n// //     } finally {\n// //       setTimeout(() => setLoading(false), 1000); // Ensure loading stops\n// //     }\n// //   };\n\n// //   const handleSaveBranch = async (branchData) => {\n// //     try {\n// //       if (editingBranch) {\n// //         // ✅ TEMPORARY: Mock update\n// //         setBranches(prev => prev.map(branch => \n// //           branch.id === editingBranch.id \n// //             ? { ...branch, ...branchData }\n// //             : branch\n// //         ));\n// //         toast.success('Branch updated successfully');\n        \n// //         // ✅ FUTURE: Uncomment when API is ready\n// //         // await branchService.updateBranch(editingBranch.id, branchData);\n// //       } else {\n// //         // ✅ TEMPORARY: Mock create\n// //         const newBranch = {\n// //           id: Date.now(), // Temporary ID\n// //           ...branchData,\n// //           domainCount: 0,\n// //           internshipCount: 0,\n// //           totalLearners: 0\n// //         };\n// //         setBranches(prev => [...prev, newBranch]);\n// //         toast.success('Branch created successfully');\n        \n// //         // ✅ FUTURE: Uncomment when API is ready\n// //         // await branchService.createBranch(branchData);\n// //       }\n      \n// //       setShowModal(false);\n// //       setEditingBranch(null);\n// //       // fetchBranches(); // Re-fetch when using real API\n// //     } catch (error) {\n// //       console.error('Error saving branch:', error);\n// //       toast.error('Failed to save branch');\n// //     }\n// //   };\n\n// //   const handleDeleteBranch = async () => {\n// //     try {\n// //       // ✅ TEMPORARY: Mock delete\n// //       setBranches(prev => prev.filter(branch => branch.id !== branchToDelete.id));\n// //       toast.success('Branch deleted successfully');\n      \n// //       // ✅ FUTURE: Uncomment when API is ready\n// //       // await branchService.deleteBranch(branchToDelete.id);\n      \n// //       setShowDeleteModal(false);\n// //       setBranchToDelete(null);\n// //       // fetchBranches(); // Re-fetch when using real API\n// //     } catch (error) {\n// //       console.error('Error deleting branch:', error);\n// //       toast.error('Failed to delete branch');\n// //     }\n// //   };\n\n// //   // ✅ SAFE FILTERING: Ensure branches is always an array\n// //   const filteredBranches = Array.isArray(branches) ? branches.filter(branch =>\n// //     branch.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n// //     branch.code.toLowerCase().includes(searchTerm.toLowerCase())\n// //   ) : [];\n\n// //   if (loading) {\n// //     return (\n// //       <div className=\"loading-container\">\n// //         <div className=\"loading-spinner\"></div>\n// //         <p>Loading branches...</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"manage-branches\">\n// //       <div className=\"page-header\">\n// //         <div className=\"header-content\">\n// //           <h1>Manage Branches</h1>\n// //           <p>Manage academic branches and their associated domains</p>\n// //         </div>\n// //         <button \n// //           className=\"btn btn-primary\"\n// //           onClick={() => {\n// //             setEditingBranch(null);\n// //             setShowModal(true);\n// //           }}\n// //         >\n// //           <FiPlus /> Add Branch\n// //         </button>\n// //       </div>\n\n// //       <div className=\"page-controls\">\n// //         <div className=\"search-controls\">\n// //           <div className=\"search-box\">\n// //             <FiSearch />\n// //             <input\n// //               type=\"text\"\n// //               placeholder=\"Search branches...\"\n// //               value={searchTerm}\n// //               onChange={(e) => setSearchTerm(e.target.value)}\n// //             />\n// //           </div>\n// //         </div>\n        \n// //         <div className=\"view-controls\">\n// //           <button\n// //             className={`view-btn ${viewMode === 'grid' ? 'active' : ''}`}\n// //             onClick={() => setViewMode('grid')}\n// //           >\n// //             <FiGrid />\n// //           </button>\n// //           <button\n// //             className={`view-btn ${viewMode === 'list' ? 'active' : ''}`}\n// //             onClick={() => setViewMode('list')}\n// //           >\n// //             <FiList />\n// //           </button>\n// //         </div>\n// //       </div>\n\n// //       <div className={`branches-container ${viewMode}`}>\n// //         {filteredBranches.map(branch => (\n// //           <BranchCard\n// //             key={branch.id}\n// //             branch={branch}\n// //             viewMode={viewMode}\n// //             onEdit={(branch) => {\n// //               setEditingBranch(branch);\n// //               setShowModal(true);\n// //             }}\n// //             onDelete={(branch) => {\n// //               setBranchToDelete(branch);\n// //               setShowDeleteModal(true);\n// //             }}\n// //             onManageDomains={(branch) => {\n// //               setSelectedBranch(branch);\n// //               setShowDomainModal(true);\n// //             }}\n// //             onManageInternships={(branch) => {\n// //               setSelectedBranch(branch);\n// //               setShowInternshipModal(true);\n// //             }}\n// //           />\n// //         ))}\n// //       </div>\n\n// //       {filteredBranches.length === 0 && !loading && (\n// //         <div className=\"empty-state\">\n// //           <FiBookOpen size={48} />\n// //           <h3>No branches found</h3>\n// //           <p>Get started by creating your first branch</p>\n// //           <button \n// //             className=\"btn btn-primary\"\n// //             onClick={() => {\n// //               setEditingBranch(null);\n// //               setShowModal(true);\n// //             }}\n// //           >\n// //             <FiPlus /> Add Branch\n// //           </button>\n// //         </div>\n// //       )}\n\n// //       {/* Branch Modal */}\n// //       {showModal && (\n// //         <BranchModal\n// //           branch={editingBranch}\n// //           onClose={() => {\n// //             setShowModal(false);\n// //             setEditingBranch(null);\n// //           }}\n// //           onSave={handleSaveBranch}\n// //         />\n// //       )}\n\n// //       {/* Delete Confirmation Modal */}\n// //       {showDeleteModal && (\n// //         <ConfirmationModal\n// //           title=\"Delete Branch\"\n// //           message={`Are you sure you want to delete \"${branchToDelete?.name}\"? This action cannot be undone.`}\n// //           onConfirm={handleDeleteBranch}\n// //           onCancel={() => {\n// //             setShowDeleteModal(false);\n// //             setBranchToDelete(null);\n// //           }}\n// //           confirmText=\"Delete\"\n// //           cancelText=\"Cancel\"\n// //           type=\"danger\"\n// //         />\n// //       )}\n\n// //       {/* Domain Management Modal */}\n// //       {showDomainModal && selectedBranch && (\n// //         <DomainManagementModal\n// //           branch={selectedBranch}\n// //           onClose={() => {\n// //             setShowDomainModal(false);\n// //             setSelectedBranch(null);\n// //           }}\n// //         />\n// //       )}\n\n// //       {/* Direct Internship Management Modal */}\n// //       {showInternshipModal && selectedBranch && (\n// //         <DirectInternshipModal\n// //           branch={selectedBranch}\n// //           onClose={() => {\n// //             setShowInternshipModal(false);\n// //             setSelectedBranch(null);\n// //           }}\n// //         />\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // // Branch Card Component\n// // const BranchCard = ({ branch, viewMode, onEdit, onDelete, onManageDomains, onManageInternships }) => {\n// //   const [showMenu, setShowMenu] = useState(false);\n\n// //   return (\n// //     <div className={`branch-card ${viewMode}`}>\n// //       <div className=\"branch-header\">\n// //         <div className=\"branch-icon\">\n// //           <FiBookOpen />\n// //         </div>\n// //         <div className=\"branch-info\">\n// //           <h3 className=\"branch-name\">{branch.name}</h3>\n// //           <span className=\"branch-code\">{branch.code}</span>\n// //           {branch.description && (\n// //             <p className=\"branch-description\">{branch.description}</p>\n// //           )}\n// //         </div>\n// //         <div className=\"branch-menu\">\n// //           <button onClick={() => setShowMenu(!showMenu)}>\n// //             <FiSettings />\n// //           </button>\n// //           {showMenu && (\n// //             <div className=\"dropdown-menu\">\n// //               <button onClick={() => {\n// //                 onManageDomains(branch);\n// //                 setShowMenu(false);\n// //               }}>\n// //                 <FiGrid /> Manage Domains\n// //               </button>\n// //               <button onClick={() => {\n// //                 onManageInternships(branch);\n// //                 setShowMenu(false);\n// //               }}>\n// //                 <FiUsers /> Direct Internships\n// //               </button>\n// //               <button onClick={() => {\n// //                 onEdit(branch);\n// //                 setShowMenu(false);\n// //               }}>\n// //                 <FiEdit /> Edit Branch\n// //               </button>\n// //               <button \n// //                 onClick={() => {\n// //                   onDelete(branch);\n// //                   setShowMenu(false);\n// //                 }} \n// //                 className=\"danger\"\n// //               >\n// //                 <FiTrash2 /> Delete Branch\n// //               </button>\n// //             </div>\n// //           )}\n// //         </div>\n// //       </div>\n      \n// //       <div className=\"branch-stats\">\n// //         <div className=\"stat\">\n// //           <span className=\"stat-value\">{branch.domainCount || 0}</span>\n// //           <span className=\"stat-label\">Domains</span>\n// //         </div>\n// //         <div className=\"stat\">\n// //           <span className=\"stat-value\">{branch.internshipCount || 0}</span>\n// //           <span className=\"stat-label\">Internships</span>\n// //         </div>\n// //         <div className=\"stat\">\n// //           <span className=\"stat-value\">{branch.totalLearners || 0}</span>\n// //           <span className=\"stat-label\">Learners</span>\n// //         </div>\n// //         <div className=\"stat\">\n// //           <span className={`status ${branch.isActive ? 'active' : 'inactive'}`}>\n// //             {branch.isActive ? 'Active' : 'Inactive'}\n// //           </span>\n// //         </div>\n// //       </div>\n\n// //       <div className=\"branch-actions\">\n// //         <button \n// //           className=\"btn btn-sm btn-outline\"\n// //           onClick={() => onManageDomains(branch)}\n// //         >\n// //           <FiGrid /> Domains\n// //         </button>\n// //         <button \n// //           className=\"btn btn-sm btn-outline\"\n// //           onClick={() => onManageInternships(branch)}\n// //         >\n// //           <FiUsers /> Internships\n// //         </button>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // // Branch Modal Component\n// // const BranchModal = ({ branch, onClose, onSave }) => {\n// //   const [formData, setFormData] = useState({\n// //     name: branch?.name || '',\n// //     code: branch?.code || '',\n// //     description: branch?.description || '',\n// //     isActive: branch?.isActive !== undefined ? branch.isActive : true,\n// //     sortOrder: branch?.sortOrder || 0\n// //   });\n\n// //   const [errors, setErrors] = useState({});\n// //   const [loading, setLoading] = useState(false);\n\n// //   const validate = () => {\n// //     const newErrors = {};\n    \n// //     if (!formData.name.trim()) {\n// //       newErrors.name = 'Branch name is required';\n// //     } else if (formData.name.length < 2) {\n// //       newErrors.name = 'Branch name must be at least 2 characters';\n// //     }\n    \n// //     if (!formData.code.trim()) {\n// //       newErrors.code = 'Branch code is required';\n// //     } else if (formData.code.length < 2) {\n// //       newErrors.code = 'Branch code must be at least 2 characters';\n// //     }\n    \n// //     setErrors(newErrors);\n// //     return Object.keys(newErrors).length === 0;\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n    \n// //     if (!validate()) return;\n    \n// //     setLoading(true);\n// //     try {\n// //       await onSave(formData);\n// //     } catch (error) {\n// //       console.error('Error saving branch:', error);\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <Modal title={branch ? 'Edit Branch' : 'Add Branch'} onClose={onClose}>\n// //       <form onSubmit={handleSubmit} className=\"branch-form\">\n// //         <div className=\"form-group\">\n// //           <label>Branch Name *</label>\n// //           <input\n// //             type=\"text\"\n// //             value={formData.name}\n// //             onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n// //             placeholder=\"e.g., Computer Science & Engineering\"\n// //             className={errors.name ? 'error' : ''}\n// //           />\n// //           {errors.name && <span className=\"error-text\">{errors.name}</span>}\n// //         </div>\n\n// //         <div className=\"form-group\">\n// //           <label>Branch Code *</label>\n// //           <input\n// //             type=\"text\"\n// //             value={formData.code}\n// //             onChange={(e) => setFormData({ ...formData, code: e.target.value.toUpperCase() })}\n// //             placeholder=\"e.g., CSE\"\n// //             className={errors.code ? 'error' : ''}\n// //           />\n// //           {errors.code && <span className=\"error-text\">{errors.code}</span>}\n// //         </div>\n\n// //         <div className=\"form-group\">\n// //           <label>Description</label>\n// //           <textarea\n// //             value={formData.description}\n// //             onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n// //             placeholder=\"Brief description of the branch\"\n// //             rows={3}\n// //           />\n// //         </div>\n\n// //         <div className=\"form-group\">\n// //           <label>Sort Order</label>\n// //           <input\n// //             type=\"number\"\n// //             value={formData.sortOrder}\n// //             onChange={(e) => setFormData({ ...formData, sortOrder: parseInt(e.target.value) || 0 })}\n// //             min=\"0\"\n// //           />\n// //         </div>\n\n// //         <div className=\"form-group\">\n// //           <label className=\"checkbox-label\">\n// //             <input\n// //               type=\"checkbox\"\n// //               checked={formData.isActive}\n// //               onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n// //             />\n// //             Active\n// //           </label>\n// //         </div>\n\n// //         <div className=\"form-actions\">\n// //           <button type=\"button\" className=\"btn btn-secondary\" onClick={onClose}>\n// //             Cancel\n// //           </button>\n// //           <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n// //             {loading ? 'Saving...' : (branch ? 'Update' : 'Create')}\n// //           </button>\n// //         </div>\n// //       </form>\n// //     </Modal>\n// //   );\n// // };\n\n// // // ✅ PLACEHOLDER MODALS (will show \"Coming Soon\" for now)\n// // const DomainManagementModal = ({ branch, onClose }) => {\n// //   return (\n// //     <Modal title={`Manage Domains - ${branch.name}`} onClose={onClose} size=\"large\">\n// //       <div className=\"coming-soon\">\n// //         <h3>🚀 Coming Soon!</h3>\n// //         <p>Domain management interface will be available here.</p>\n// //         <p>You'll be able to add and manage domains for {branch.name}.</p>\n// //       </div>\n// //     </Modal>\n// //   );\n// // };\n\n// // const DirectInternshipModal = ({ branch, onClose }) => {\n// //   return (\n// //     <Modal title={`Direct Internships - ${branch.name}`} onClose={onClose} size=\"large\">\n// //       <div className=\"coming-soon\">\n// //         <h3>🚀 Coming Soon!</h3>\n// //         <p>Direct internship management will be available here.</p>\n// //         <p>You'll be able to add internships directly to {branch.name} without requiring domains.</p>\n// //       </div>\n// //     </Modal>\n// //   );\n// // };\n\n// // export default ManageBranches;\n\n\n\n\n"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAqH,EAAA,EAAAW,GAAA;AAAAC,YAAA,CAAAZ,EAAA;AAAAY,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}