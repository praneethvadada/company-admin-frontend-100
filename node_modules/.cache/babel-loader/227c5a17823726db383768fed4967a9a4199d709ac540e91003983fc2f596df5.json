{"ast":null,"code":"var _jsxFileName = \"/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/components/projects/ProjectManagement.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/projects/ProjectManagement.js - COMPLETE VERSION WITH ADD PROJECT\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { authService } from '../../services/authService';\nimport { toast } from 'react-toastify';\nimport { FiEdit, FiTrash2, FiSearch, FiFilter, FiMove, FiArchive, FiStar, FiEye, FiUsers, FiImage, FiMoreVertical, FiFolder, FiFileText, FiPlus, FiSettings, FiArrowRight, FiGrid, FiList, FiX } from 'react-icons/fi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectManagement = () => {\n  _s();\n  console.log('🚀 PROJECT MANAGEMENT - Component rendering/mounting');\n  const navigate = useNavigate();\n  const [projects, setProjects] = useState([]);\n  const [domains, setDomains] = useState([]);\n  const [subDomains, setSubDomains] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingProject, setEditingProject] = useState(null);\n  const [selectedDomain, setSelectedDomain] = useState('');\n  const [viewMode, setViewMode] = useState('grid');\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    totalPages: 1,\n    totalItems: 0\n  });\n  const [filters, setFilters] = useState({\n    search: '',\n    domainId: '',\n    subDomainId: '',\n    isActive: true,\n    isFeatured: null,\n    sortBy: 'updatedAt',\n    sortOrder: 'DESC'\n  });\n  console.log('📊 PROJECT MANAGEMENT - Current state:', {\n    projectsCount: projects.length,\n    domainsCount: domains.length,\n    subDomainsCount: subDomains.length,\n    loading,\n    showAddModal,\n    selectedDomain,\n    pagination,\n    filters\n  });\n  useEffect(() => {\n    console.log('🔄 PROJECT MANAGEMENT - Initial useEffect triggered');\n    fetchInitialData();\n  }, []);\n  useEffect(() => {\n    console.log('🔄 PROJECT MANAGEMENT - Filters or pagination changed');\n    fetchProjects();\n  }, [filters, pagination.currentPage]);\n  const fetchInitialData = async () => {\n    try {\n      var _domainsResponse$data;\n      console.log('📡 INITIAL DATA - Fetching domains...');\n      const domainsResponse = await authService.getDomains({\n        limit: 100\n      });\n      console.log('✅ INITIAL DATA - Domains fetched:', domainsResponse.data);\n      setDomains(((_domainsResponse$data = domainsResponse.data) === null || _domainsResponse$data === void 0 ? void 0 : _domainsResponse$data.domains) || []);\n    } catch (error) {\n      console.error('❌ INITIAL DATA - Error fetching domains:', error);\n      toast.error('Failed to load domains');\n    }\n  };\n  const fetchProjects = async () => {\n    try {\n      setLoading(true);\n\n      // Clean up filters - remove empty strings and null values\n      const cleanFilters = {};\n      Object.keys(filters).forEach(key => {\n        const value = filters[key];\n        if (value !== '' && value !== null && value !== undefined) {\n          cleanFilters[key] = value;\n        }\n      });\n      const params = {\n        page: pagination.currentPage,\n        limit: 12,\n        ...cleanFilters\n      };\n      console.log('📡 PROJECT FETCH - Starting with params:', params);\n      const response = await authService.getProjects(params);\n      console.log('✅ PROJECT FETCH - Response:', response.data);\n      setProjects(response.data.projects || []);\n      setPagination(response.data.pagination || pagination);\n    } catch (error) {\n      console.error('❌ PROJECT FETCH - Error:', error);\n      toast.error('Failed to fetch projects');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchSubDomains = async domainId => {\n    try {\n      var _response$data;\n      console.log('📡 SUBDOMAINS - Fetching for domain:', domainId);\n      const response = await authService.getSubDomainsByDomain(domainId);\n      console.log('✅ SUBDOMAINS - Fetched:', response.data);\n      setSubDomains(((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.subDomains) || []);\n    } catch (error) {\n      console.error('❌ SUBDOMAINS - Error:', error);\n      setSubDomains([]);\n    }\n  };\n  const handleSearch = searchTerm => {\n    console.log('🔍 PROJECT SEARCH - Search term:', searchTerm);\n    setFilters(prev => ({\n      ...prev,\n      search: searchTerm\n    }));\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n  };\n  const handleFilterChange = (filterKey, value) => {\n    console.log('🎛️ PROJECT FILTER - Changed:', filterKey, '=', value);\n    setFilters(prev => ({\n      ...prev,\n      [filterKey]: value\n    }));\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // If domain changes, fetch subdomains\n    if (filterKey === 'domainId') {\n      if (value) {\n        fetchSubDomains(value);\n      } else {\n        setSubDomains([]);\n      }\n      // Reset subdomain filter when domain changes\n      setFilters(prev => ({\n        ...prev,\n        subDomainId: ''\n      }));\n    }\n  };\n  const handleAddProject = () => {\n    console.log('➕ PROJECT ADD - Opening modal');\n    setEditingProject(null);\n    setShowAddModal(true);\n  };\n  const handleEditProject = project => {\n    console.log('✏️ PROJECT EDIT - Editing:', project.title);\n    setEditingProject(project);\n    setShowAddModal(true);\n  };\n  const handleDeleteProject = async project => {\n    console.log('🗑️ PROJECT DELETE - Requesting deletion:', project.title);\n    if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n      console.log('❌ PROJECT DELETE - Cancelled by user');\n      return;\n    }\n    try {\n      console.log('📡 PROJECT DELETE - API call for:', project.id);\n      await authService.deleteProject(project.id);\n      console.log('✅ PROJECT DELETE - Success');\n      toast.success('Project deleted successfully');\n      fetchProjects();\n    } catch (error) {\n      console.error('❌ PROJECT DELETE - Error:', error);\n      toast.error('Failed to delete project');\n    }\n  };\n  const handleModalClose = () => {\n    console.log('❌ PROJECT MODAL - Closing');\n    setShowAddModal(false);\n    setEditingProject(null);\n    setSelectedDomain('');\n    setSubDomains([]);\n  };\n  const handleModalSave = () => {\n    console.log('✅ PROJECT MODAL - Saved successfully');\n    setShowAddModal(false);\n    setEditingProject(null);\n    setSelectedDomain('');\n    setSubDomains([]);\n    fetchProjects();\n  };\n  if (loading && projects.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading projects...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  }\n  console.log('🎨 PROJECT MANAGEMENT - Rendering main component');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-management\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Project Management\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Manage and organize all your projects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-button\",\n          onClick: handleAddProject,\n          children: [/*#__PURE__*/_jsxDEV(FiPlus, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), \"Add Project\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-bar\",\n        children: [/*#__PURE__*/_jsxDEV(FiSearch, {\n          className: \"search-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search projects...\",\n          value: filters.search,\n          onChange: e => handleSearch(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: filters.domainId,\n          onChange: e => handleFilterChange('domainId', e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"All Domains\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), domains.map(domain => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: domain.id,\n            children: domain.title\n          }, domain.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filters.subDomainId,\n          onChange: e => handleFilterChange('subDomainId', e.target.value),\n          disabled: !filters.domainId,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"All SubDomains\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), subDomains.map(subdomain => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: subdomain.id,\n            children: subdomain.title\n          }, subdomain.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filters.isActive,\n          onChange: e => handleFilterChange('isActive', e.target.value === 'true'),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: true,\n            children: \"Active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: false,\n            children: \"Archived\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"view-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view-mode-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: viewMode === 'grid' ? 'active' : '',\n            onClick: () => setViewMode('grid'),\n            children: /*#__PURE__*/_jsxDEV(FiGrid, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: viewMode === 'list' ? 'active' : '',\n            onClick: () => setViewMode('list'),\n            children: /*#__PURE__*/_jsxDEV(FiList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `projects-container ${viewMode}`,\n      children: projects.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: [/*#__PURE__*/_jsxDEV(FiFileText, {\n          size: 48\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No projects found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Get started by creating your first project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-button\",\n          onClick: handleAddProject,\n          children: [/*#__PURE__*/_jsxDEV(FiPlus, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), \"Create Project\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this) : projects.map(project => {\n        var _project$subDomain;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"project-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"project-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: project.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"project-actions\",\n              children: [project.isFeatured && /*#__PURE__*/_jsxDEV(FiStar, {\n                className: \"featured-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 42\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleEditProject(project),\n                children: /*#__PURE__*/_jsxDEV(FiEdit, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteProject(project),\n                children: /*#__PURE__*/_jsxDEV(FiTrash2, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"project-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"project-abstract\",\n              children: project.abstract || 'No abstract available'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"project-meta\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"subdomain-tag\",\n                children: [/*#__PURE__*/_jsxDEV(FiFolder, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 21\n                }, this), ((_project$subDomain = project.subDomain) === null || _project$subDomain === void 0 ? void 0 : _project$subDomain.title) || 'Unknown SubDomain']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `status-badge ${project.isActive ? 'active' : 'inactive'}`,\n                children: project.isActive ? 'Active' : 'Archived'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this)]\n        }, project.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), pagination.totalPages > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: pagination.currentPage === 1,\n        onClick: () => setPagination(prev => ({\n          ...prev,\n          currentPage: prev.currentPage - 1\n        })),\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page \", pagination.currentPage, \" of \", pagination.totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: pagination.currentPage === pagination.totalPages,\n        onClick: () => setPagination(prev => ({\n          ...prev,\n          currentPage: prev.currentPage + 1\n        })),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }, this), showAddModal && /*#__PURE__*/_jsxDEV(ProjectModal, {\n      project: editingProject,\n      domains: domains,\n      onClose: handleModalClose,\n      onSave: handleModalSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n\n// Project Modal Component\n_s(ProjectManagement, \"Xze/4tcQrklmf87fJAsWc6gyUg0=\", false, function () {\n  return [useNavigate];\n});\n_c = ProjectManagement;\nconst ProjectModal = ({\n  project,\n  domains,\n  onClose,\n  onSave\n}) => {\n  _s2();\n  const [formData, setFormData] = useState({\n    title: (project === null || project === void 0 ? void 0 : project.title) || '',\n    abstract: (project === null || project === void 0 ? void 0 : project.abstract) || '',\n    specifications: (project === null || project === void 0 ? void 0 : project.specifications) || '',\n    learningOutcomes: (project === null || project === void 0 ? void 0 : project.learningOutcomes) || '',\n    subDomainId: (project === null || project === void 0 ? void 0 : project.subDomainId) || '',\n    isFeatured: (project === null || project === void 0 ? void 0 : project.isFeatured) || false\n  });\n  const [loading, setLoading] = useState(false);\n  const [selectedDomain, setSelectedDomain] = useState('');\n  const [subDomains, setSubDomains] = useState([]);\n  console.log('📝 PROJECT MODAL - Props:', {\n    project: project === null || project === void 0 ? void 0 : project.title,\n    domainsCount: domains.length,\n    formData\n  });\n  useEffect(() => {\n    if (selectedDomain) {\n      fetchSubDomains(selectedDomain);\n    }\n  }, [selectedDomain]);\n  const fetchSubDomains = async domainId => {\n    try {\n      var _response$data2;\n      console.log('📡 MODAL - Fetching subdomains for domain:', domainId);\n      const response = await authService.getSubDomainsByDomain(domainId);\n      console.log('✅ MODAL - Subdomains fetched:', response.data);\n      setSubDomains(((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.subDomains) || []);\n    } catch (error) {\n      console.error('❌ MODAL - Error fetching subdomains:', error);\n      setSubDomains([]);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    console.log('💾 MODAL - Submitting form data:', formData);\n    try {\n      const projectData = {\n        title: formData.title.trim(),\n        abstract: formData.abstract.trim(),\n        specifications: formData.specifications.trim(),\n        learningOutcomes: formData.learningOutcomes.trim(),\n        subDomainId: formData.subDomainId,\n        isFeatured: formData.isFeatured\n      };\n      if (project) {\n        console.log('📡 MODAL - Updating project:', project.id);\n        await authService.updateProject(project.id, projectData);\n        console.log('✅ MODAL - Project updated successfully');\n        toast.success('Project updated successfully');\n      } else {\n        console.log('📡 MODAL - Creating new project');\n        await authService.createProject(projectData);\n        console.log('✅ MODAL - Project created successfully');\n        toast.success('Project created successfully');\n      }\n      onSave();\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error('❌ MODAL - Error saving project:', error);\n      console.error('❌ MODAL - Error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to save project';\n      toast.error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal large\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: project ? 'Edit Project' : 'Add New Project'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(FiX, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Project Title *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: formData.title,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              title: e.target.value\n            })),\n            placeholder: \"Enter project title...\",\n            required: true,\n            minLength: 3,\n            maxLength: 200\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Domain *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedDomain,\n            onChange: e => {\n              setSelectedDomain(e.target.value);\n              setFormData(prev => ({\n                ...prev,\n                subDomainId: ''\n              }));\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Domain\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 15\n            }, this), domains.map(domain => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: domain.id,\n              children: domain.title\n            }, domain.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"SubDomain *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.subDomainId,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              subDomainId: e.target.value\n            })),\n            disabled: !selectedDomain,\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select SubDomain\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 15\n            }, this), subDomains.map(subdomain => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: subdomain.id,\n              children: subdomain.title\n            }, subdomain.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Abstract\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.abstract,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              abstract: e.target.value\n            })),\n            placeholder: \"Brief project description...\",\n            rows: 3,\n            maxLength: 1000\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Specifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.specifications,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              specifications: e.target.value\n            })),\n            placeholder: \"Technical specifications...\",\n            rows: 4,\n            maxLength: 2000\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Learning Outcomes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.learningOutcomes,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              learningOutcomes: e.target.value\n            })),\n            placeholder: \"What will students learn...\",\n            rows: 3,\n            maxLength: 1000\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group checkbox\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: formData.isFeatured,\n              onChange: e => setFormData(prev => ({\n                ...prev,\n                isFeatured: e.target.checked\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 15\n            }, this), \"Featured Project\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: onClose,\n            disabled: loading,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"primary-button\",\n            disabled: loading || !formData.title.trim() || !formData.subDomainId,\n            children: loading ? project ? 'Updating...' : 'Creating...' : project ? 'Update Project' : 'Create Project'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 459,\n    columnNumber: 5\n  }, this);\n};\n_s2(ProjectModal, \"VZekkEBGgm+wx+SZjvkyCu6g52Q=\");\n_c2 = ProjectModal;\nexport default ProjectManagement;\n\n// // src/components/projects/ProjectManagement.js - SIMPLIFIED VERSION FOR VIEWING/MANAGING PROJECTS\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { authService } from '../../services/authService';\n// import { toast } from 'react-toastify';\n// import {\n//   FiEdit,\n//   FiTrash2,\n//   FiSearch,\n//   FiFilter,\n//   FiMove,\n//   FiArchive,\n//   FiStar,\n//   FiEye,\n//   FiUsers,\n//   FiImage,\n//   FiMoreVertical,\n//   FiFolder,\n//   FiFileText,\n//   FiPlus,\n//   FiSettings,\n//   FiArrowRight\n// } from 'react-icons/fi';\n\n// const ProjectManagement = () => {\n//   console.log('🚀 PROJECT MANAGEMENT - Component rendering/mounting');\n\n//   const navigate = useNavigate();\n//   const [projects, setProjects] = useState([]);\n//   const [domains, setDomains] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [pagination, setPagination] = useState({\n//     currentPage: 1,\n//     totalPages: 1,\n//     totalItems: 0\n//   });\n//   const [filters, setFilters] = useState({\n//     search: '',\n//     domainId: '',\n//     isActive: true,\n//     isFeatured: null,\n//     sortBy: 'updatedAt',\n//     sortOrder: 'DESC'\n//   });\n//   const [editingProject, setEditingProject] = useState(null);\n//   const [selectedProject, setSelectedProject] = useState(null);\n//   const [showEditModal, setShowEditModal] = useState(false);\n\n//   console.log('📊 PROJECT MANAGEMENT - Current state:', {\n//     projectsCount: projects.length,\n//     loading,\n//     pagination,\n//     filters,\n//     editingProject: !!editingProject,\n//     selectedProject: !!selectedProject\n//   });\n\n//   useEffect(() => {\n//     console.log('🔄 PROJECT MANAGEMENT - useEffect triggered');\n//     fetchInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     console.log('🔄 PROJECT MANAGEMENT - Filters or pagination changed');\n//     fetchProjects();\n//   }, [filters, pagination.currentPage]);\n\n//   const fetchInitialData = async () => {\n//     try {\n//       console.log('📡 INITIAL DATA - Fetching domains...');\n//       const domainsResponse = await authService.getDomains({ limit: 100 });\n//       console.log('✅ INITIAL DATA - Domains fetched:', domainsResponse.data);\n\n//       setDomains(domainsResponse.data?.domains || []);\n//     } catch (error) {\n//       console.error('❌ INITIAL DATA - Error fetching domains:', error);\n//       toast.error('Failed to load domains');\n//     }\n//   };\n\n//   const fetchProjects = async () => {\n//     try {\n//       setLoading(true);\n\n//       // Clean up filters - remove empty strings and null values\n//       const cleanFilters = {};\n//       Object.keys(filters).forEach(key => {\n//         const value = filters[key];\n//         if (value !== '' && value !== null && value !== undefined) {\n//           cleanFilters[key] = value;\n//         }\n//       });\n\n//       const params = {\n//         page: pagination.currentPage,\n//         limit: 12,\n//         ...cleanFilters\n//       };\n\n//       console.log('📡 PROJECT FETCH - Starting with params:', params);\n\n//       const response = await authService.getProjects(params);\n//       console.log('✅ PROJECT FETCH - Response:', response.data);\n\n//       setProjects(response.data.projects || []);\n//       setPagination(response.data.pagination || pagination);\n\n//     } catch (error) {\n//       console.error('❌ PROJECT FETCH - Error:', error);\n//       toast.error('Failed to fetch projects');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = (searchTerm) => {\n//     console.log('🔍 PROJECT SEARCH - Search term:', searchTerm);\n//     setFilters(prev => ({ ...prev, search: searchTerm }));\n//     setPagination(prev => ({ ...prev, currentPage: 1 }));\n//   };\n\n//   const handleFilterChange = (filterKey, value) => {\n//     console.log('🎛️ PROJECT FILTER - Changed:', filterKey, '=', value);\n//     setFilters(prev => ({ ...prev, [filterKey]: value }));\n//     setPagination(prev => ({ ...prev, currentPage: 1 }));\n//   };\n\n//   const handleEditProject = (project) => {\n//     console.log('✏️ PROJECT EDIT - Editing:', project.title);\n//     setEditingProject(project);\n//     setShowEditModal(true);\n//   };\n\n//   const handleDeleteProject = async (project) => {\n//     console.log('🗑️ PROJECT DELETE - Requesting deletion:', project.title);\n\n//     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n//       console.log('❌ PROJECT DELETE - Cancelled by user');\n//       return;\n//     }\n\n//     try {\n//       console.log('📡 PROJECT DELETE - API call for:', project.id);\n//       await authService.deleteProject(project.id);\n//       console.log('✅ PROJECT DELETE - Success');\n//       toast.success('Project deleted successfully');\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('❌ PROJECT DELETE - Error:', error);\n//       toast.error('Failed to delete project');\n//     }\n//   };\n\n//   const handleArchiveProject = async (project) => {\n//     const isArchiving = project.isActive;\n//     const action = isArchiving ? 'archive' : 'restore';\n\n//     console.log('📁 PROJECT ARCHIVE - Action:', action, 'for:', project.title);\n\n//     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n//       return;\n//     }\n\n//     try {\n//       await authService.archiveProject(project.id, {\n//         archive: isArchiving,\n//         reason: `${action} via admin panel`\n//       });\n//       console.log('✅ PROJECT ARCHIVE - Success');\n//       toast.success(`Project ${action}d successfully`);\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('❌ PROJECT ARCHIVE - Error:', error);\n//       toast.error(`Failed to ${action} project`);\n//     }\n//   };\n\n//   const handleToggleFeatured = async (project) => {\n//     console.log('⭐ PROJECT FEATURED - Toggle for:', project.title);\n\n//     try {\n//       await authService.updateProject(project.id, {\n//         isFeatured: !project.isFeatured\n//       });\n//       console.log('✅ PROJECT FEATURED - Success');\n//       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('❌ PROJECT FEATURED - Error:', error);\n//       toast.error('Failed to update featured status');\n//     }\n//   };\n\n//   const navigateToCreateProject = () => {\n//     console.log('🌐 NAVIGATION - Redirecting to domains for project creation');\n//     navigate('/domains');\n//     toast.info('Navigate to Domains → SubDomains to create new projects');\n//   };\n\n//   if (loading && projects.length === 0) {\n//     return (\n//       <div className=\"loading-container\">\n//         <div className=\"loading-spinner\"></div>\n//         <p>Loading projects...</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"project-management\">\n//       <div className=\"page-header\">\n//         <div className=\"header-content\">\n//           <h1>Project Management</h1>\n//           <p>View and manage your existing projects</p>\n//         </div>\n//         <div className=\"header-actions\">\n//           <button \n//             className=\"secondary-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             <FiSettings />\n//             Manage Domains\n//           </button>\n//           <button \n//             className=\"primary-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             <FiPlus />\n//             Create New Project\n//             <FiArrowRight />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Info Banner */}\n//       <div className=\"info-banner\">\n//         <div className=\"banner-content\">\n//           <FiFileText className=\"banner-icon\" />\n//           <div className=\"banner-text\">\n//             <strong>Want to create a new project?</strong>\n//             <p>Go to <strong>Domains → SubDomains</strong> and click \"Add Project\" on any leaf subdomain for better organization.</p>\n//           </div>\n//           <button \n//             className=\"banner-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             Go to Domains <FiArrowRight />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Filters and Controls */}\n//       <div className=\"controls-section\">\n//         <div className=\"search-bar\">\n//           <FiSearch className=\"search-icon\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search projects...\"\n//             value={filters.search}\n//             onChange={(e) => handleSearch(e.target.value)}\n//           />\n//         </div>\n\n//         <div className=\"filter-controls\">\n//           <select\n//             value={filters.domainId}\n//             onChange={(e) => handleFilterChange('domainId', e.target.value)}\n//           >\n//             <option value=\"\">All Domains</option>\n//             {domains.map(domain => (\n//               <option key={domain.id} value={domain.id}>{domain.title}</option>\n//             ))}\n//           </select>\n\n//           <select\n//             value={filters.isFeatured === null ? '' : filters.isFeatured}\n//             onChange={(e) => handleFilterChange('isFeatured', \n//               e.target.value === '' ? null : e.target.value === 'true'\n//             )}\n//           >\n//             <option value=\"\">All Projects</option>\n//             <option value=\"true\">Featured Only</option>\n//             <option value=\"false\">Non-Featured</option>\n//           </select>\n\n//           <select\n//             value={filters.isActive}\n//             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n//           >\n//             <option value=\"true\">Active Projects</option>\n//             <option value=\"false\">Archived Projects</option>\n//           </select>\n\n//           <select\n//             value={filters.sortBy}\n//             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n//           >\n//             <option value=\"updatedAt\">Sort by Last Updated</option>\n//             <option value=\"title\">Sort by Title</option>\n//             <option value=\"createdAt\">Sort by Date Created</option>\n//             <option value=\"leadCount\">Sort by Leads</option>\n//             <option value=\"viewCount\">Sort by Views</option>\n//           </select>\n//         </div>\n//       </div>\n\n//       {/* Projects Grid */}\n//       <div className=\"projects-grid\">\n//         {projects.length > 0 ? (\n//           projects.map((project) => (\n//             <ProjectCard\n//               key={project.id}\n//               project={project}\n//               onEdit={handleEditProject}\n//               onDelete={handleDeleteProject}\n//               onArchive={handleArchiveProject}\n//               onToggleFeatured={handleToggleFeatured}\n//               onViewDetails={(project) => setSelectedProject(project)}\n//             />\n//           ))\n//         ) : (\n//           <div className=\"empty-state\">\n//             <FiFileText size={48} />\n//             <h3>No projects found</h3>\n//             <p>Projects are created from Domain → SubDomain pages for better organization</p>\n//             <div className=\"empty-state-actions\">\n//               <button className=\"primary-button\" onClick={navigateToCreateProject}>\n//                 <FiSettings />\n//                 Go to Domains\n//               </button>\n//               <p className=\"help-text\">\n//                 💡 Tip: Organize your projects by creating domains and subdomains first\n//               </p>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Pagination */}\n//       {pagination.totalPages > 1 && (\n//         <div className=\"pagination\">\n//           <button\n//             disabled={pagination.currentPage === 1}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n//           >\n//             Previous\n//           </button>\n\n//           <span className=\"page-info\">\n//             Page {pagination.currentPage} of {pagination.totalPages}\n//             ({pagination.totalItems} total)\n//           </span>\n\n//           <button\n//             disabled={pagination.currentPage === pagination.totalPages}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n//           >\n//             Next\n//           </button>\n//         </div>\n//       )}\n\n//       {/* Edit Project Modal */}\n//       {showEditModal && editingProject && (\n//         <ProjectEditModal\n//           project={editingProject}\n//           onClose={() => {\n//             setShowEditModal(false);\n//             setEditingProject(null);\n//           }}\n//           onSave={() => {\n//             setShowEditModal(false);\n//             setEditingProject(null);\n//             fetchProjects();\n//           }}\n//         />\n//       )}\n\n//       {/* Project Details Modal */}\n//       {selectedProject && (\n//         <ProjectDetailsModal\n//           project={selectedProject}\n//           onClose={() => setSelectedProject(null)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // Project Card Component\n// const ProjectCard = ({ \n//   project, \n//   onEdit, \n//   onDelete, \n//   onArchive, \n//   onToggleFeatured, \n//   onViewDetails \n// }) => {\n//   const [showMenu, setShowMenu] = useState(false);\n\n//   return (\n//     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n//       <div className=\"project-header\">\n//         <div className=\"project-image\">\n//           {project.images && project.images.length > 0 ? (\n//             <img src={project.images[0].url} alt={project.title} />\n//           ) : (\n//             <div className=\"image-placeholder\">\n//               <FiImage />\n//             </div>\n//           )}\n//         </div>\n\n//         <div className=\"project-badges\">\n//           {project.isFeatured && (\n//             <span className=\"badge featured\">\n//               <FiStar /> Featured\n//             </span>\n//           )}\n//           {!project.isActive && (\n//             <span className=\"badge archived\">Archived</span>\n//           )}\n//         </div>\n\n//         <div className=\"project-menu\">\n//           <button onClick={() => setShowMenu(!showMenu)}>\n//             <FiMoreVertical />\n//           </button>\n//           {showMenu && (\n//             <div className=\"dropdown-menu\">\n//               <button onClick={() => onViewDetails(project)}>\n//                 <FiEye /> View Details\n//               </button>\n//               <button onClick={() => onEdit(project)}>\n//                 <FiEdit /> Edit\n//               </button>\n//               <button onClick={() => onToggleFeatured(project)}>\n//                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n//               </button>\n//               <button onClick={() => onArchive(project)}>\n//                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n//               </button>\n//               <button onClick={() => onDelete(project)} className=\"danger\">\n//                 <FiTrash2 /> Delete\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       <div className=\"project-content\">\n//         <h3 className=\"project-title\">{project.title}</h3>\n//         <p className=\"project-subdomain\">\n//           <FiFolder className=\"subdomain-icon\" />\n//           {project.subDomain?.domain?.title} → {project.subDomain?.title || 'No sub-domain'}\n//         </p>\n//         <p className=\"project-abstract\">\n//           {project.abstract?.substring(0, 100)}...\n//         </p>\n//       </div>\n\n//       <div className=\"project-footer\">\n//         <div className=\"project-stats\">\n//           <div className=\"stat\">\n//             <FiEye />\n//             <span>{project.viewCount || 0}</span>\n//           </div>\n//           <div className=\"stat\">\n//             <FiUsers />\n//             <span>{project.leadCount || 0}</span>\n//           </div>\n//         </div>\n\n//         <div className=\"project-actions\">\n//           <button onClick={() => onEdit(project)} className=\"edit-button\">\n//             <FiEdit />\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Project Edit Modal Component\n// const ProjectEditModal = ({ project, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     title: project?.title || '',\n//     abstract: project?.abstract || '',\n//     specifications: project?.specifications || '',\n//     learningOutcomes: project?.learningOutcomes || '',\n//     isFeatured: project?.isFeatured || false\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   console.log('📝 PROJECT EDIT MODAL - Project:', project.title);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     try {\n//       console.log('💾 PROJECT UPDATE - Starting with data:', formData);\n//       await authService.updateProject(project.id, formData);\n//       console.log('✅ PROJECT UPDATE - Success');\n//       toast.success('Project updated successfully');\n//       onSave();\n//     } catch (error) {\n//       console.error('❌ PROJECT UPDATE - Error:', error);\n//       toast.error('Failed to update project');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal large\">\n//         <div className=\"modal-header\">\n//           <h2>Edit Project: {project.title}</h2>\n//           <button onClick={onClose}>×</button>\n//         </div>\n\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label>Project Title</label>\n//             <input\n//               type=\"text\"\n//               value={formData.title}\n//               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"modal-info\">\n//             <strong>Domain:</strong> {project.subDomain?.domain?.title || 'Unknown'}<br />\n//             <strong>SubDomain:</strong> {project.subDomain?.title || 'Unknown'}<br />\n//             <span className=\"info-note\">\n//               💡 To move this project to a different domain/subdomain, contact your administrator\n//             </span>\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label>Abstract</label>\n//             <textarea\n//               value={formData.abstract}\n//               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n//               rows={4}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label>Specifications</label>\n//             <textarea\n//               value={formData.specifications}\n//               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n//               rows={6}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label>Learning Outcomes</label>\n//             <textarea\n//               value={formData.learningOutcomes}\n//               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n//               rows={4}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"form-group checkbox\">\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 checked={formData.isFeatured}\n//                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n//               />\n//               Featured Project\n//             </label>\n//           </div>\n\n//           <div className=\"modal-actions\">\n//             <button type=\"button\" onClick={onClose} disabled={loading}>\n//               Cancel\n//             </button>\n//             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n//               {loading ? 'Updating...' : 'Update Project'}\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Project Details Modal\n// const ProjectDetailsModal = ({ project, onClose }) => {\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal large\">\n//         <div className=\"modal-header\">\n//           <h2>{project.title}</h2>\n//           <button onClick={onClose}>×</button>\n//         </div>\n\n//         <div className=\"project-details\">\n//           <div className=\"detail-section\">\n//             <h3>Location</h3>\n//             <p><strong>Domain:</strong> {project.subDomain?.domain?.title || 'Unknown'}</p>\n//             <p><strong>SubDomain:</strong> {project.subDomain?.title || 'Unknown'}</p>\n//           </div>\n\n//           <div className=\"detail-section\">\n//             <h3>Abstract</h3>\n//             <p>{project.abstract}</p>\n//           </div>\n\n//           <div className=\"detail-section\">\n//             <h3>Specifications</h3>\n//             <p>{project.specifications}</p>\n//           </div>\n\n//           <div className=\"detail-section\">\n//             <h3>Learning Outcomes</h3>\n//             <p>{project.learningOutcomes}</p>\n//           </div>\n\n//           <div className=\"detail-stats\">\n//             <div className=\"stat-item\">\n//               <strong>Views:</strong> {project.viewCount || 0}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Leads:</strong> {project.leadCount || 0}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ProjectManagement;\n\n// // // src/components/projects/ProjectManagement.js - FIXED WITH LOGGING\n// // import React, { useState, useEffect } from 'react';\n// // import { authService } from '../../services/authService';\n// // import { toast } from 'react-toastify';\n// // import {\n// //   FiPlus,\n// //   FiEdit,\n// //   FiTrash2,\n// //   FiSearch,\n// //   FiFilter,\n// //   FiMove,\n// //   FiArchive,\n// //   FiStar,\n// //   FiEye,\n// //   FiUsers,\n// //   FiImage,\n// //   FiMoreVertical,\n// //   FiFolder,\n// //   FiFileText\n// // } from 'react-icons/fi';\n\n// // const ProjectManagement = () => {\n// //   const [projects, setProjects] = useState([]);\n// //   const [domains, setDomains] = useState([]);\n// //   const [subDomains, setSubDomains] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [pagination, setPagination] = useState({\n// //     currentPage: 1,\n// //     totalPages: 1,\n// //     totalItems: 0\n// //   });\n// //   const [filters, setFilters] = useState({\n// //     search: '',\n// //     subDomainId: '',\n// //     isActive: true,\n// //     isFeatured: null,\n// //     sortBy: 'title',\n// //     sortOrder: 'ASC'\n// //   });\n// //   const [showAddModal, setShowAddModal] = useState(false);\n// //   const [editingProject, setEditingProject] = useState(null);\n// //   const [selectedProject, setSelectedProject] = useState(null);\n\n// //   useEffect(() => {\n// //     console.log('🚀 ProjectManagement component mounted');\n// //     fetchInitialData();\n// //   }, []);\n\n// //   useEffect(() => {\n// //     console.log('🔄 Filters or pagination changed:', { filters, currentPage: pagination.currentPage });\n// //     fetchProjects();\n// //   }, [filters, pagination.currentPage]);\n\n// //   const fetchInitialData = async () => {\n// //     try {\n// //       console.log('📡 Fetching initial data (domains)...');\n// //       const [domainsResponse] = await Promise.all([\n// //         authService.getDomains({ limit: 100 })\n// //       ]);\n\n// //       console.log('✅ Domains fetched:', domainsResponse);\n// //       setDomains(domainsResponse.data.domains || []);\n// //     } catch (error) {\n// //       console.error('❌ Error fetching initial data:', error);\n// //       toast.error('Failed to load domains');\n// //     }\n// //   };\n\n// //   const fetchProjects = async () => {\n// //     try {\n// //       setLoading(true);\n\n// //       // Clean up filters - remove empty strings and null values\n// //       const cleanFilters = {};\n// //       Object.keys(filters).forEach(key => {\n// //         const value = filters[key];\n// //         // Only add non-empty values to the params\n// //         if (value !== '' && value !== null && value !== undefined) {\n// //           cleanFilters[key] = value;\n// //         }\n// //       });\n\n// //       const params = {\n// //         page: pagination.currentPage,\n// //         limit: 12,\n// //         ...cleanFilters\n// //       };\n\n// //       console.log('📡 Fetching projects with params:', params);\n// //       console.log('🔍 Raw filters before cleaning:', filters);\n// //       console.log('🧹 Cleaned filters:', cleanFilters);\n\n// //       const response = await authService.getProjects(params);\n// //       console.log('✅ Projects API response:', response);\n\n// //       setProjects(response.data.projects || []);\n// //       setPagination(response.data.pagination || pagination);\n\n// //       console.log('📊 Projects set:', response.data.projects?.length || 0, 'projects');\n// //       console.log('📄 Pagination set:', response.data.pagination);\n\n// //     } catch (error) {\n// //       console.error('❌ Error fetching projects:', error);\n// //       console.error('❌ Error details:', {\n// //         message: error.message,\n// //         response: error.response?.data,\n// //         status: error.response?.status,\n// //         config: error.config\n// //       });\n// //       toast.error('Failed to fetch projects');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const fetchSubDomains = async (domainId) => {\n// //     try {\n// //       console.log('📡 Fetching subdomains for domain:', domainId);\n// //       const response = await authService.getLeafSubDomains(domainId);\n// //       console.log('✅ Subdomains fetched:', response);\n// //       setSubDomains(response.data || []);\n// //     } catch (error) {\n// //       console.error('❌ Error fetching sub-domains:', error);\n// //     }\n// //   };\n\n// //   const handleSearch = (searchTerm) => {\n// //     console.log('🔍 Search term changed:', searchTerm);\n// //     setFilters(prev => ({ ...prev, search: searchTerm }));\n// //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// //   };\n\n// //   const handleFilterChange = (filterKey, value) => {\n// //     console.log('🎛️ Filter changed:', filterKey, '=', value);\n// //     setFilters(prev => ({ ...prev, [filterKey]: value }));\n// //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// //   };\n\n// //   const handleDomainChange = (domainId) => {\n// //     console.log('🏢 Domain changed:', domainId);\n// //     if (domainId) {\n// //       fetchSubDomains(domainId);\n// //     } else {\n// //       setSubDomains([]);\n// //     }\n// //     // Reset subdomain filter when domain changes\n// //     setFilters(prev => ({ ...prev, subDomainId: '' }));\n// //   };\n\n// //   const handleAddProject = () => {\n// //     console.log('➕ Add project clicked');\n// //     setEditingProject(null);\n// //     setShowAddModal(true);\n// //   };\n\n// //   const handleEditProject = (project) => {\n// //     console.log('✏️ Edit project clicked:', project.id, project.title);\n// //     setEditingProject(project);\n// //     setShowAddModal(true);\n// //   };\n\n// //   const handleDeleteProject = async (project) => {\n// //     console.log('🗑️ Delete project requested:', project.id, project.title);\n\n// //     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n// //       console.log('❌ Delete cancelled by user');\n// //       return;\n// //     }\n\n// //     try {\n// //       console.log('📡 Deleting project:', project.id);\n// //       await authService.deleteProject(project.id);\n// //       console.log('✅ Project deleted successfully');\n// //       toast.success('Project deleted successfully');\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('❌ Error deleting project:', error);\n// //       toast.error('Failed to delete project');\n// //     }\n// //   };\n\n// //   const handleMoveProject = async (project, newSubDomainId) => {\n// //     console.log('📦 Move project requested:', project.id, 'to subdomain:', newSubDomainId);\n\n// //     try {\n// //       await authService.moveProject(project.id, {\n// //         newSubDomainId,\n// //         reason: 'Moved via admin panel'\n// //       });\n// //       console.log('✅ Project moved successfully');\n// //       toast.success('Project moved successfully');\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('❌ Error moving project:', error);\n// //       toast.error('Failed to move project');\n// //     }\n// //   };\n\n// //   const handleArchiveProject = async (project) => {\n// //     const isArchiving = project.isActive;\n// //     const action = isArchiving ? 'archive' : 'restore';\n\n// //     console.log('📁 Archive/restore project requested:', project.id, action);\n\n// //     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n// //       console.log('❌ Archive/restore cancelled by user');\n// //       return;\n// //     }\n\n// //     try {\n// //       await authService.archiveProject(project.id, {\n// //         archive: isArchiving,\n// //         reason: `${action} via admin panel`\n// //       });\n// //       console.log('✅ Project archived/restored successfully');\n// //       toast.success(`Project ${action}d successfully`);\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error(`❌ Error ${action}ing project:`, error);\n// //       toast.error(`Failed to ${action} project`);\n// //     }\n// //   };\n\n// //   const handleToggleFeatured = async (project) => {\n// //     console.log('⭐ Toggle featured requested:', project.id, 'current:', project.isFeatured);\n\n// //     try {\n// //       await authService.updateProject(project.id, {\n// //         isFeatured: !project.isFeatured\n// //       });\n// //       console.log('✅ Featured status updated successfully');\n// //       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('❌ Error updating featured status:', error);\n// //       toast.error('Failed to update featured status');\n// //     }\n// //   };\n\n// //   if (loading && projects.length === 0) {\n// //     return (\n// //       <div className=\"loading-container\">\n// //         <div className=\"loading-spinner\"></div>\n// //         <p>Loading projects...</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"project-management\">\n// //       <div className=\"page-header\">\n// //         <div className=\"header-content\">\n// //           <h1>Project Management</h1>\n// //           <p>Manage your project portfolio and content</p>\n// //         </div>\n// //         <button className=\"primary-button\" onClick={handleAddProject}>\n// //           <FiPlus />\n// //           Add Project\n// //         </button>\n// //       </div>\n\n// //       {/* Filters and Controls */}\n// //       <div className=\"controls-section\">\n// //         <div className=\"search-bar\">\n// //           <FiSearch className=\"search-icon\" />\n// //           <input\n// //             type=\"text\"\n// //             placeholder=\"Search projects...\"\n// //             value={filters.search}\n// //             onChange={(e) => handleSearch(e.target.value)}\n// //           />\n// //         </div>\n\n// //         <div className=\"filter-controls\">\n// //           {/* Domain Selector */}\n// //           <select\n// //             onChange={(e) => handleDomainChange(e.target.value)}\n// //           >\n// //             <option value=\"\">Select Domain</option>\n// //             {domains.map(domain => (\n// //               <option key={domain.id} value={domain.id}>{domain.title}</option>\n// //             ))}\n// //           </select>\n\n// //           {/* Subdomain Selector */}\n// //           <select\n// //             value={filters.subDomainId}\n// //             onChange={(e) => handleFilterChange('subDomainId', e.target.value)}\n// //             disabled={subDomains.length === 0}\n// //           >\n// //             <option value=\"\">All Sub-domains</option>\n// //             {subDomains.map(sub => (\n// //               <option key={sub.id} value={sub.id}>{sub.title}</option>\n// //             ))}\n// //           </select>\n\n// //           <select\n// //             value={filters.isFeatured === null ? '' : filters.isFeatured}\n// //             onChange={(e) => handleFilterChange('isFeatured', \n// //               e.target.value === '' ? null : e.target.value === 'true'\n// //             )}\n// //           >\n// //             <option value=\"\">All Projects</option>\n// //             <option value=\"true\">Featured Only</option>\n// //             <option value=\"false\">Non-Featured</option>\n// //           </select>\n\n// //           <select\n// //             value={filters.isActive}\n// //             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n// //           >\n// //             <option value=\"true\">Active Projects</option>\n// //             <option value=\"false\">Archived Projects</option>\n// //           </select>\n\n// //           <select\n// //             value={filters.sortBy}\n// //             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n// //           >\n// //             <option value=\"title\">Sort by Title</option>\n// //             <option value=\"createdAt\">Sort by Date</option>\n// //             <option value=\"leadCount\">Sort by Leads</option>\n// //             <option value=\"viewCount\">Sort by Views</option>\n// //           </select>\n// //         </div>\n// //       </div>\n\n// //       {/* Projects Grid */}\n// //       <div className=\"projects-grid\">\n// //         {projects.length > 0 ? (\n// //           projects.map((project) => (\n// //             <ProjectCard\n// //               key={project.id}\n// //               project={project}\n// //               onEdit={handleEditProject}\n// //               onDelete={handleDeleteProject}\n// //               onMove={handleMoveProject}\n// //               onArchive={handleArchiveProject}\n// //               onToggleFeatured={handleToggleFeatured}\n// //               onViewDetails={(project) => setSelectedProject(project)}\n// //             />\n// //           ))\n// //         ) : (\n// //           <div className=\"empty-state\">\n// //             <FiFileText size={48} />\n// //             <h3>No projects found</h3>\n// //             <p>Create your first project to get started</p>\n// //             <button className=\"primary-button\" onClick={handleAddProject}>\n// //               <FiPlus />\n// //               Add Project\n// //             </button>\n// //           </div>\n// //         )}\n// //       </div>\n\n// //       {/* Pagination */}\n// //       {pagination.totalPages > 1 && (\n// //         <div className=\"pagination\">\n// //           <button\n// //             disabled={pagination.currentPage === 1}\n// //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n// //           >\n// //             Previous\n// //           </button>\n\n// //           <span className=\"page-info\">\n// //             Page {pagination.currentPage} of {pagination.totalPages}\n// //             ({pagination.totalItems} total)\n// //           </span>\n\n// //           <button\n// //             disabled={pagination.currentPage === pagination.totalPages}\n// //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n// //           >\n// //             Next\n// //           </button>\n// //         </div>\n// //       )}\n\n// //       {/* Add/Edit Modal */}\n// //       {showAddModal && (\n// //         <ProjectModal\n// //           project={editingProject}\n// //           domains={domains}\n// //           onClose={() => setShowAddModal(false)}\n// //           onSave={() => {\n// //             setShowAddModal(false);\n// //             fetchProjects();\n// //           }}\n// //         />\n// //       )}\n\n// //       {/* Project Details Modal */}\n// //       {selectedProject && (\n// //         <ProjectDetailsModal\n// //           project={selectedProject}\n// //           onClose={() => setSelectedProject(null)}\n// //         />\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // // Project Card Component\n// // const ProjectCard = ({ \n// //   project, \n// //   onEdit, \n// //   onDelete, \n// //   onMove, \n// //   onArchive, \n// //   onToggleFeatured, \n// //   onViewDetails \n// // }) => {\n// //   const [showMenu, setShowMenu] = useState(false);\n\n// //   return (\n// //     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n// //       <div className=\"project-header\">\n// //         <div className=\"project-image\">\n// //           {project.images && project.images.length > 0 ? (\n// //             <img src={project.images[0].url} alt={project.title} />\n// //           ) : (\n// //             <div className=\"image-placeholder\">\n// //               <FiImage />\n// //             </div>\n// //           )}\n// //         </div>\n\n// //         <div className=\"project-badges\">\n// //           {project.isFeatured && (\n// //             <span className=\"badge featured\">\n// //               <FiStar /> Featured\n// //             </span>\n// //           )}\n// //           {!project.isActive && (\n// //             <span className=\"badge archived\">Archived</span>\n// //           )}\n// //         </div>\n\n// //         <div className=\"project-menu\">\n// //           <button onClick={() => setShowMenu(!showMenu)}>\n// //             <FiMoreVertical />\n// //           </button>\n// //           {showMenu && (\n// //             <div className=\"dropdown-menu\">\n// //               <button onClick={() => onViewDetails(project)}>\n// //                 <FiEye /> View Details\n// //               </button>\n// //               <button onClick={() => onEdit(project)}>\n// //                 <FiEdit /> Edit\n// //               </button>\n// //               <button onClick={() => onToggleFeatured(project)}>\n// //                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n// //               </button>\n// //               <button onClick={() => onMove(project)}>\n// //                 <FiMove /> Move\n// //               </button>\n// //               <button onClick={() => onArchive(project)}>\n// //                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n// //               </button>\n// //               <button onClick={() => onDelete(project)} className=\"danger\">\n// //                 <FiTrash2 /> Delete\n// //               </button>\n// //             </div>\n// //           )}\n// //         </div>\n// //       </div>\n\n// //       <div className=\"project-content\">\n// //         <h3 className=\"project-title\">{project.title}</h3>\n// //         <p className=\"project-subdomain\">\n// //           <FiFolder className=\"subdomain-icon\" />\n// //           {project.subDomain?.title || 'No sub-domain'}\n// //         </p>\n// //         <p className=\"project-abstract\">\n// //           {project.abstract?.substring(0, 100)}...\n// //         </p>\n// //       </div>\n\n// //       <div className=\"project-footer\">\n// //         <div className=\"project-stats\">\n// //           <div className=\"stat\">\n// //             <FiEye />\n// //             <span>{project.viewCount || 0}</span>\n// //           </div>\n// //           <div className=\"stat\">\n// //             <FiUsers />\n// //             <span>{project.leadCount || 0}</span>\n// //           </div>\n// //         </div>\n\n// //         <div className=\"project-actions\">\n// //           <button onClick={() => onEdit(project)} className=\"edit-button\">\n// //             <FiEdit />\n// //           </button>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // // Project Modal Component (Add/Edit)\n// // const ProjectModal = ({ project, domains, onClose, onSave }) => {\n// //   const [formData, setFormData] = useState({\n// //     title: project?.title || '',\n// //     abstract: project?.abstract || '',\n// //     specifications: project?.specifications || '',\n// //     learningOutcomes: project?.learningOutcomes || '',\n// //     subDomainId: project?.subDomainId || '',\n// //     isFeatured: project?.isFeatured || false\n// //   });\n// //   const [loading, setLoading] = useState(false);\n// //   const [selectedDomain, setSelectedDomain] = useState('');\n// //   const [subDomains, setSubDomains] = useState([]);\n\n// //   useEffect(() => {\n// //     if (selectedDomain) {\n// //       fetchSubDomains(selectedDomain);\n// //     }\n// //   }, [selectedDomain]);\n\n// //   const fetchSubDomains = async (domainId) => {\n// //     try {\n// //       console.log('📡 Modal: Fetching subdomains for domain:', domainId);\n// //       const response = await authService.getLeafSubDomains(domainId);\n// //       console.log('✅ Modal: Subdomains fetched:', response);\n// //       setSubDomains(response.data || []);\n// //     } catch (error) {\n// //       console.error('❌ Modal: Error fetching sub-domains:', error);\n// //     }\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     setLoading(true);\n\n// //     console.log('💾 Modal: Submitting form data:', formData);\n\n// //     try {\n// //       if (project) {\n// //         console.log('📡 Modal: Updating project:', project.id);\n// //         await authService.updateProject(project.id, formData);\n// //         console.log('✅ Modal: Project updated successfully');\n// //         toast.success('Project updated successfully');\n// //       } else {\n// //         console.log('📡 Modal: Creating new project');\n// //         await authService.createProject(formData);\n// //         console.log('✅ Modal: Project created successfully');\n// //         toast.success('Project created successfully');\n// //       }\n// //       onSave();\n// //     } catch (error) {\n// //       console.error('❌ Modal: Error saving project:', error);\n// //       toast.error('Failed to save project');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"modal-overlay\">\n// //       <div className=\"modal large\">\n// //         <div className=\"modal-header\">\n// //           <h2>{project ? 'Edit Project' : 'Add New Project'}</h2>\n// //           <button onClick={onClose}>×</button>\n// //         </div>\n\n// //         <form onSubmit={handleSubmit}>\n// //           <div className=\"form-grid\">\n// //             <div className=\"form-group\">\n// //               <label>Project Title</label>\n// //               <input\n// //                 type=\"text\"\n// //                 value={formData.title}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// //                 required\n// //               />\n// //             </div>\n\n// //             <div className=\"form-group\">\n// //               <label>Domain</label>\n// //               <select\n// //                 value={selectedDomain}\n// //                 onChange={(e) => setSelectedDomain(e.target.value)}\n// //                 required={!project}\n// //               >\n// //                 <option value=\"\">Select Domain</option>\n// //                 {domains.map(domain => (\n// //                   <option key={domain.id} value={domain.id}>{domain.title}</option>\n// //                 ))}\n// //               </select>\n// //             </div>\n\n// //             <div className=\"form-group\">\n// //               <label>Sub-Domain</label>\n// //               <select\n// //                 value={formData.subDomainId}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, subDomainId: e.target.value }))}\n// //                 required\n// //               >\n// //                 <option value=\"\">Select Sub-Domain</option>\n// //                 {subDomains.map(sub => (\n// //                   <option key={sub.id} value={sub.id}>{sub.title}</option>\n// //                 ))}\n// //               </select>\n// //             </div>\n// //           </div>\n\n// //           <div className=\"form-group\">\n// //             <label>Abstract</label>\n// //             <textarea\n// //               value={formData.abstract}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n// //               rows={4}\n// //               required\n// //             />\n// //           </div>\n\n// //           <div className=\"form-group\">\n// //             <label>Specifications</label>\n// //             <textarea\n// //               value={formData.specifications}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n// //               rows={6}\n// //               required\n// //             />\n// //           </div>\n\n// //           <div className=\"form-group\">\n// //             <label>Learning Outcomes</label>\n// //             <textarea\n// //               value={formData.learningOutcomes}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n// //               rows={4}\n// //               required\n// //             />\n// //           </div>\n\n// //           <div className=\"form-group checkbox\">\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 checked={formData.isFeatured}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n// //               />\n// //               Featured Project\n// //             </label>\n// //           </div>\n\n// //           <div className=\"modal-actions\">\n// //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// //               Cancel\n// //             </button>\n// //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// //               {loading ? 'Saving...' : 'Save'}\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // // Project Details Modal\n// // const ProjectDetailsModal = ({ project, onClose }) => {\n// //   return (\n// //     <div className=\"modal-overlay\">\n// //       <div className=\"modal large\">\n// //         <div className=\"modal-header\">\n// //           <h2>{project.title}</h2>\n// //           <button onClick={onClose}>×</button>\n// //         </div>\n\n// //         <div className=\"project-details\">\n// //           <div className=\"detail-section\">\n// //             <h3>Abstract</h3>\n// //             <p>{project.abstract}</p>\n// //           </div>\n\n// //           <div className=\"detail-section\">\n// //             <h3>Specifications</h3>\n// //             <p>{project.specifications}</p>\n// //           </div>\n\n// //           <div className=\"detail-section\">\n// //             <h3>Learning Outcomes</h3>\n// //             <p>{project.learningOutcomes}</p>\n// //           </div>\n\n// //           <div className=\"detail-stats\">\n// //             <div className=\"stat-item\">\n// //               <strong>Views:</strong> {project.viewCount || 0}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Leads:</strong> {project.leadCount || 0}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ProjectManagement;\n\n// // // // src/components/projects/ProjectManagement.js - NEW FILE\n// // // import React, { useState, useEffect } from 'react';\n// // // import { authService } from '../../services/authService';\n// // // import { toast } from 'react-toastify';\n// // // import {\n// // //   FiPlus,\n// // //   FiEdit,\n// // //   FiTrash2,\n// // //   FiSearch,\n// // //   FiFilter,\n// // //   FiMove,\n// // //   FiArchive,\n// // //   FiStar,\n// // //   FiEye,\n// // //   FiUsers,\n// // //   FiImage,\n// // //   FiMoreVertical,\n// // //   FiFolder,\n// // //   FiFileText\n// // // } from 'react-icons/fi';\n\n// // // const ProjectManagement = () => {\n// // //   const [projects, setProjects] = useState([]);\n// // //   const [domains, setDomains] = useState([]);\n// // //   const [subDomains, setSubDomains] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [pagination, setPagination] = useState({\n// // //     currentPage: 1,\n// // //     totalPages: 1,\n// // //     totalItems: 0\n// // //   });\n// // //   const [filters, setFilters] = useState({\n// // //     search: '',\n// // //     subDomainId: '',\n// // //     isActive: true,\n// // //     isFeatured: null,\n// // //     sortBy: 'title',\n// // //     sortOrder: 'ASC'\n// // //   });\n// // //   const [showAddModal, setShowAddModal] = useState(false);\n// // //   const [editingProject, setEditingProject] = useState(null);\n// // //   const [selectedProject, setSelectedProject] = useState(null);\n\n// // //   useEffect(() => {\n// // //     fetchInitialData();\n// // //   }, []);\n\n// // //   useEffect(() => {\n// // //     fetchProjects();\n// // //   }, [filters, pagination.currentPage]);\n\n// // //   const fetchInitialData = async () => {\n// // //     try {\n// // //       const [domainsResponse] = await Promise.all([\n// // //         authService.getDomains({ limit: 100 })\n// // //       ]);\n\n// // //       setDomains(domainsResponse.data.domains || []);\n// // //     } catch (error) {\n// // //       console.error('❌ Error fetching initial data:', error);\n// // //       toast.error('Failed to load domains');\n// // //     }\n// // //   };\n\n// // //   const fetchProjects = async () => {\n// // //     try {\n// // //       setLoading(true);\n// // //       const params = {\n// // //         page: pagination.currentPage,\n// // //         limit: 12,\n// // //         ...filters\n// // //       };\n\n// // //       const response = await authService.getProjects(params);\n// // //       console.log('✅ Projects fetched:', response);\n\n// // //       setProjects(response.data.projects || []);\n// // //       setPagination(response.data.pagination || pagination);\n// // //     } catch (error) {\n// // //       console.error('❌ Error fetching projects:', error);\n// // //       toast.error('Failed to fetch projects');\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   const fetchSubDomains = async (domainId) => {\n// // //     try {\n// // //       const response = await authService.getLeafSubDomains(domainId);\n// // //       setSubDomains(response.data || []);\n// // //     } catch (error) {\n// // //       console.error('❌ Error fetching sub-domains:', error);\n// // //     }\n// // //   };\n\n// // //   const handleSearch = (searchTerm) => {\n// // //     setFilters(prev => ({ ...prev, search: searchTerm }));\n// // //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// // //   };\n\n// // //   const handleFilterChange = (filterKey, value) => {\n// // //     setFilters(prev => ({ ...prev, [filterKey]: value }));\n// // //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// // //   };\n\n// // //   const handleAddProject = () => {\n// // //     setEditingProject(null);\n// // //     setShowAddModal(true);\n// // //   };\n\n// // //   const handleEditProject = (project) => {\n// // //     setEditingProject(project);\n// // //     setShowAddModal(true);\n// // //   };\n\n// // //   const handleDeleteProject = async (project) => {\n// // //     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       await authService.deleteProject(project.id);\n// // //       toast.success('Project deleted successfully');\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('❌ Error deleting project:', error);\n// // //       toast.error('Failed to delete project');\n// // //     }\n// // //   };\n\n// // //   const handleMoveProject = async (project, newSubDomainId) => {\n// // //     try {\n// // //       await authService.moveProject(project.id, {\n// // //         newSubDomainId,\n// // //         reason: 'Moved via admin panel'\n// // //       });\n// // //       toast.success('Project moved successfully');\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('❌ Error moving project:', error);\n// // //       toast.error('Failed to move project');\n// // //     }\n// // //   };\n\n// // //   const handleArchiveProject = async (project) => {\n// // //     const isArchiving = project.isActive;\n// // //     const action = isArchiving ? 'archive' : 'restore';\n\n// // //     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       await authService.archiveProject(project.id, {\n// // //         archive: isArchiving,\n// // //         reason: `${action} via admin panel`\n// // //       });\n// // //       toast.success(`Project ${action}d successfully`);\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error(`❌ Error ${action}ing project:`, error);\n// // //       toast.error(`Failed to ${action} project`);\n// // //     }\n// // //   };\n\n// // //   const handleToggleFeatured = async (project) => {\n// // //     try {\n// // //       await authService.updateProject(project.id, {\n// // //         isFeatured: !project.isFeatured\n// // //       });\n// // //       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('❌ Error updating featured status:', error);\n// // //       toast.error('Failed to update featured status');\n// // //     }\n// // //   };\n\n// // //   if (loading && projects.length === 0) {\n// // //     return (\n// // //       <div className=\"loading-container\">\n// // //         <div className=\"loading-spinner\"></div>\n// // //         <p>Loading projects...</p>\n// // //       </div>\n// // //     );\n// // //   }\n\n// // //   return (\n// // //     <div className=\"project-management\">\n// // //       <div className=\"page-header\">\n// // //         <div className=\"header-content\">\n// // //           <h1>Project Management</h1>\n// // //           <p>Manage your project portfolio and content</p>\n// // //         </div>\n// // //         <button className=\"primary-button\" onClick={handleAddProject}>\n// // //           <FiPlus />\n// // //           Add Project\n// // //         </button>\n// // //       </div>\n\n// // //       {/* Filters and Controls */}\n// // //       <div className=\"controls-section\">\n// // //         <div className=\"search-bar\">\n// // //           <FiSearch className=\"search-icon\" />\n// // //           <input\n// // //             type=\"text\"\n// // //             placeholder=\"Search projects...\"\n// // //             value={filters.search}\n// // //             onChange={(e) => handleSearch(e.target.value)}\n// // //           />\n// // //         </div>\n\n// // //         <div className=\"filter-controls\">\n// // //           <select\n// // //             value={filters.subDomainId}\n// // //             onChange={(e) => handleFilterChange('subDomainId', e.target.value)}\n// // //           >\n// // //             <option value=\"\">All Sub-domains</option>\n// // //             {subDomains.map(sub => (\n// // //               <option key={sub.id} value={sub.id}>{sub.title}</option>\n// // //             ))}\n// // //           </select>\n\n// // //           <select\n// // //             value={filters.isFeatured === null ? '' : filters.isFeatured}\n// // //             onChange={(e) => handleFilterChange('isFeatured', \n// // //               e.target.value === '' ? null : e.target.value === 'true'\n// // //             )}\n// // //           >\n// // //             <option value=\"\">All Projects</option>\n// // //             <option value=\"true\">Featured Only</option>\n// // //             <option value=\"false\">Non-Featured</option>\n// // //           </select>\n\n// // //           <select\n// // //             value={filters.isActive}\n// // //             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n// // //           >\n// // //             <option value=\"true\">Active Projects</option>\n// // //             <option value=\"false\">Archived Projects</option>\n// // //           </select>\n\n// // //           <select\n// // //             value={filters.sortBy}\n// // //             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n// // //           >\n// // //             <option value=\"title\">Sort by Title</option>\n// // //             <option value=\"createdAt\">Sort by Date</option>\n// // //             <option value=\"leadCount\">Sort by Leads</option>\n// // //             <option value=\"viewCount\">Sort by Views</option>\n// // //           </select>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Projects Grid */}\n// // //       <div className=\"projects-grid\">\n// // //         {projects.length > 0 ? (\n// // //           projects.map((project) => (\n// // //             <ProjectCard\n// // //               key={project.id}\n// // //               project={project}\n// // //               onEdit={handleEditProject}\n// // //               onDelete={handleDeleteProject}\n// // //               onMove={handleMoveProject}\n// // //               onArchive={handleArchiveProject}\n// // //               onToggleFeatured={handleToggleFeatured}\n// // //               onViewDetails={(project) => setSelectedProject(project)}\n// // //             />\n// // //           ))\n// // //         ) : (\n// // //           <div className=\"empty-state\">\n// // //             <FiFileText size={48} />\n// // //             <h3>No projects found</h3>\n// // //             <p>Create your first project to get started</p>\n// // //             <button className=\"primary-button\" onClick={handleAddProject}>\n// // //               <FiPlus />\n// // //               Add Project\n// // //             </button>\n// // //           </div>\n// // //         )}\n// // //       </div>\n\n// // //       {/* Pagination */}\n// // //       {pagination.totalPages > 1 && (\n// // //         <div className=\"pagination\">\n// // //           <button\n// // //             disabled={pagination.currentPage === 1}\n// // //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n// // //           >\n// // //             Previous\n// // //           </button>\n\n// // //           <span className=\"page-info\">\n// // //             Page {pagination.currentPage} of {pagination.totalPages}\n// // //             ({pagination.totalItems} total)\n// // //           </span>\n\n// // //           <button\n// // //             disabled={pagination.currentPage === pagination.totalPages}\n// // //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n// // //           >\n// // //             Next\n// // //           </button>\n// // //         </div>\n// // //       )}\n\n// // //       {/* Add/Edit Modal */}\n// // //       {showAddModal && (\n// // //         <ProjectModal\n// // //           project={editingProject}\n// // //           domains={domains}\n// // //           onClose={() => setShowAddModal(false)}\n// // //           onSave={() => {\n// // //             setShowAddModal(false);\n// // //             fetchProjects();\n// // //           }}\n// // //         />\n// // //       )}\n\n// // //       {/* Project Details Modal */}\n// // //       {selectedProject && (\n// // //         <ProjectDetailsModal\n// // //           project={selectedProject}\n// // //           onClose={() => setSelectedProject(null)}\n// // //         />\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Card Component\n// // // const ProjectCard = ({ \n// // //   project, \n// // //   onEdit, \n// // //   onDelete, \n// // //   onMove, \n// // //   onArchive, \n// // //   onToggleFeatured, \n// // //   onViewDetails \n// // // }) => {\n// // //   const [showMenu, setShowMenu] = useState(false);\n\n// // //   return (\n// // //     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n// // //       <div className=\"project-header\">\n// // //         <div className=\"project-image\">\n// // //           {project.images && project.images.length > 0 ? (\n// // //             <img src={project.images[0].url} alt={project.title} />\n// // //           ) : (\n// // //             <div className=\"image-placeholder\">\n// // //               <FiImage />\n// // //             </div>\n// // //           )}\n// // //         </div>\n\n// // //         <div className=\"project-badges\">\n// // //           {project.isFeatured && (\n// // //             <span className=\"badge featured\">\n// // //               <FiStar /> Featured\n// // //             </span>\n// // //           )}\n// // //           {!project.isActive && (\n// // //             <span className=\"badge archived\">Archived</span>\n// // //           )}\n// // //         </div>\n\n// // //         <div className=\"project-menu\">\n// // //           <button onClick={() => setShowMenu(!showMenu)}>\n// // //             <FiMoreVertical />\n// // //           </button>\n// // //           {showMenu && (\n// // //             <div className=\"dropdown-menu\">\n// // //               <button onClick={() => onViewDetails(project)}>\n// // //                 <FiEye /> View Details\n// // //               </button>\n// // //               <button onClick={() => onEdit(project)}>\n// // //                 <FiEdit /> Edit\n// // //               </button>\n// // //               <button onClick={() => onToggleFeatured(project)}>\n// // //                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n// // //               </button>\n// // //               <button onClick={() => onMove(project)}>\n// // //                 <FiMove /> Move\n// // //               </button>\n// // //               <button onClick={() => onArchive(project)}>\n// // //                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n// // //               </button>\n// // //               <button onClick={() => onDelete(project)} className=\"danger\">\n// // //                 <FiTrash2 /> Delete\n// // //               </button>\n// // //             </div>\n// // //           )}\n// // //         </div>\n// // //       </div>\n\n// // //       <div className=\"project-content\">\n// // //         <h3 className=\"project-title\">{project.title}</h3>\n// // //         <p className=\"project-subdomain\">\n// // //           <FiFolder className=\"subdomain-icon\" />\n// // //           {project.subDomain?.title || 'No sub-domain'}\n// // //         </p>\n// // //         <p className=\"project-abstract\">\n// // //           {project.abstract?.substring(0, 100)}...\n// // //         </p>\n// // //       </div>\n\n// // //       <div className=\"project-footer\">\n// // //         <div className=\"project-stats\">\n// // //           <div className=\"stat\">\n// // //             <FiEye />\n// // //             <span>{project.viewCount || 0}</span>\n// // //           </div>\n// // //           <div className=\"stat\">\n// // //             <FiUsers />\n// // //             <span>{project.leadCount || 0}</span>\n// // //           </div>\n// // //         </div>\n\n// // //         <div className=\"project-actions\">\n// // //           <button onClick={() => onEdit(project)} className=\"edit-button\">\n// // //             <FiEdit />\n// // //           </button>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Modal Component (Add/Edit)\n// // // const ProjectModal = ({ project, domains, onClose, onSave }) => {\n// // //   const [formData, setFormData] = useState({\n// // //     title: project?.title || '',\n// // //     abstract: project?.abstract || '',\n// // //     specifications: project?.specifications || '',\n// // //     learningOutcomes: project?.learningOutcomes || '',\n// // //     subDomainId: project?.subDomainId || '',\n// // //     isFeatured: project?.isFeatured || false\n// // //   });\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [selectedDomain, setSelectedDomain] = useState('');\n// // //   const [subDomains, setSubDomains] = useState([]);\n\n// // //   useEffect(() => {\n// // //     if (selectedDomain) {\n// // //       fetchSubDomains(selectedDomain);\n// // //     }\n// // //   }, [selectedDomain]);\n\n// // //   const fetchSubDomains = async (domainId) => {\n// // //     try {\n// // //       const response = await authService.getLeafSubDomains(domainId);\n// // //       setSubDomains(response.data || []);\n// // //     } catch (error) {\n// // //       console.error('❌ Error fetching sub-domains:', error);\n// // //     }\n// // //   };\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     setLoading(true);\n\n// // //     try {\n// // //       if (project) {\n// // //         await authService.updateProject(project.id, formData);\n// // //         toast.success('Project updated successfully');\n// // //       } else {\n// // //         await authService.createProject(formData);\n// // //         toast.success('Project created successfully');\n// // //       }\n// // //       onSave();\n// // //     } catch (error) {\n// // //       console.error('❌ Error saving project:', error);\n// // //       toast.error('Failed to save project');\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div className=\"modal-overlay\">\n// // //       <div className=\"modal large\">\n// // //         <div className=\"modal-header\">\n// // //           <h2>{project ? 'Edit Project' : 'Add New Project'}</h2>\n// // //           <button onClick={onClose}>×</button>\n// // //         </div>\n\n// // //         <form onSubmit={handleSubmit}>\n// // //           <div className=\"form-grid\">\n// // //             <div className=\"form-group\">\n// // //               <label>Project Title</label>\n// // //               <input\n// // //                 type=\"text\"\n// // //                 value={formData.title}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // //                 required\n// // //               />\n// // //             </div>\n\n// // //             <div className=\"form-group\">\n// // //               <label>Domain</label>\n// // //               <select\n// // //                 value={selectedDomain}\n// // //                 onChange={(e) => setSelectedDomain(e.target.value)}\n// // //                 required={!project}\n// // //               >\n// // //                 <option value=\"\">Select Domain</option>\n// // //                 {domains.map(domain => (\n// // //                   <option key={domain.id} value={domain.id}>{domain.title}</option>\n// // //                 ))}\n// // //               </select>\n// // //             </div>\n\n// // //             <div className=\"form-group\">\n// // //               <label>Sub-Domain</label>\n// // //               <select\n// // //                 value={formData.subDomainId}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, subDomainId: e.target.value }))}\n// // //                 required\n// // //               >\n// // //                 <option value=\"\">Select Sub-Domain</option>\n// // //                 {subDomains.map(sub => (\n// // //                   <option key={sub.id} value={sub.id}>{sub.title}</option>\n// // //                 ))}\n// // //               </select>\n// // //             </div>\n// // //           </div>\n\n// // //           <div className=\"form-group\">\n// // //             <label>Abstract</label>\n// // //             <textarea\n// // //               value={formData.abstract}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n// // //               rows={4}\n// // //               required\n// // //             />\n// // //           </div>\n\n// // //           <div className=\"form-group\">\n// // //             <label>Specifications</label>\n// // //             <textarea\n// // //               value={formData.specifications}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n// // //               rows={6}\n// // //               required\n// // //             />\n// // //           </div>\n\n// // //           <div className=\"form-group\">\n// // //             <label>Learning Outcomes</label>\n// // //             <textarea\n// // //               value={formData.learningOutcomes}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n// // //               rows={4}\n// // //               required\n// // //             />\n// // //           </div>\n\n// // //           <div className=\"form-group checkbox\">\n// // //             <label>\n// // //               <input\n// // //                 type=\"checkbox\"\n// // //                 checked={formData.isFeatured}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n// // //               />\n// // //               Featured Project\n// // //             </label>\n// // //           </div>\n\n// // //           <div className=\"modal-actions\">\n// // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // //               Cancel\n// // //             </button>\n// // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // //               {loading ? 'Saving...' : 'Save'}\n// // //             </button>\n// // //           </div>\n// // //         </form>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Details Modal\n// // // const ProjectDetailsModal = ({ project, onClose }) => {\n// // //   return (\n// // //     <div className=\"modal-overlay\">\n// // //       <div className=\"modal large\">\n// // //         <div className=\"modal-header\">\n// // //           <h2>{project.title}</h2>\n// // //           <button onClick={onClose}>×</button>\n// // //         </div>\n\n// // //         <div className=\"project-details\">\n// // //           <div className=\"detail-section\">\n// // //             <h3>Abstract</h3>\n// // //             <p>{project.abstract}</p>\n// // //           </div>\n\n// // //           <div className=\"detail-section\">\n// // //             <h3>Specifications</h3>\n// // //             <p>{project.specifications}</p>\n// // //           </div>\n\n// // //           <div className=\"detail-section\">\n// // //             <h3>Learning Outcomes</h3>\n// // //             <p>{project.learningOutcomes}</p>\n// // //           </div>\n\n// // //           <div className=\"detail-stats\">\n// // //             <div className=\"stat-item\">\n// // //               <strong>Views:</strong> {project.viewCount || 0}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Leads:</strong> {project.leadCount || 0}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ProjectManagement;\nvar _c, _c2;\n$RefreshReg$(_c, \"ProjectManagement\");\n$RefreshReg$(_c2, \"ProjectModal\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","authService","toast","FiEdit","FiTrash2","FiSearch","FiFilter","FiMove","FiArchive","FiStar","FiEye","FiUsers","FiImage","FiMoreVertical","FiFolder","FiFileText","FiPlus","FiSettings","FiArrowRight","FiGrid","FiList","FiX","jsxDEV","_jsxDEV","ProjectManagement","_s","console","log","navigate","projects","setProjects","domains","setDomains","subDomains","setSubDomains","loading","setLoading","showAddModal","setShowAddModal","editingProject","setEditingProject","selectedDomain","setSelectedDomain","viewMode","setViewMode","pagination","setPagination","currentPage","totalPages","totalItems","filters","setFilters","search","domainId","subDomainId","isActive","isFeatured","sortBy","sortOrder","projectsCount","length","domainsCount","subDomainsCount","fetchInitialData","fetchProjects","_domainsResponse$data","domainsResponse","getDomains","limit","data","error","cleanFilters","Object","keys","forEach","key","value","undefined","params","page","response","getProjects","fetchSubDomains","_response$data","getSubDomainsByDomain","handleSearch","searchTerm","prev","handleFilterChange","filterKey","handleAddProject","handleEditProject","project","title","handleDeleteProject","window","confirm","id","deleteProject","success","handleModalClose","handleModalSave","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","onChange","e","target","map","domain","disabled","subdomain","size","_project$subDomain","abstract","subDomain","ProjectModal","onClose","onSave","_c","_s2","formData","setFormData","specifications","learningOutcomes","_response$data2","handleSubmit","preventDefault","projectData","trim","updateProject","createProject","_error$response","_error$response2","_error$response2$data","errorMessage","message","onSubmit","required","minLength","maxLength","rows","checked","_c2","$RefreshReg$"],"sources":["/Users/praneeth/Desktop/Project100/frontend100/adminpanel100/src/components/projects/ProjectManagement.js"],"sourcesContent":["// src/components/projects/ProjectManagement.js - COMPLETE VERSION WITH ADD PROJECT\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { authService } from '../../services/authService';\nimport { toast } from 'react-toastify';\nimport {\n  FiEdit,\n  FiTrash2,\n  FiSearch,\n  FiFilter,\n  FiMove,\n  FiArchive,\n  FiStar,\n  FiEye,\n  FiUsers,\n  FiImage,\n  FiMoreVertical,\n  FiFolder,\n  FiFileText,\n  FiPlus,\n  FiSettings,\n  FiArrowRight,\n  FiGrid,\n  FiList,\n  FiX\n} from 'react-icons/fi';\n\nconst ProjectManagement = () => {\n  console.log('🚀 PROJECT MANAGEMENT - Component rendering/mounting');\n  \n  const navigate = useNavigate();\n  const [projects, setProjects] = useState([]);\n  const [domains, setDomains] = useState([]);\n  const [subDomains, setSubDomains] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingProject, setEditingProject] = useState(null);\n  const [selectedDomain, setSelectedDomain] = useState('');\n  const [viewMode, setViewMode] = useState('grid');\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    totalPages: 1,\n    totalItems: 0\n  });\n  const [filters, setFilters] = useState({\n    search: '',\n    domainId: '',\n    subDomainId: '',\n    isActive: true,\n    isFeatured: null,\n    sortBy: 'updatedAt',\n    sortOrder: 'DESC'\n  });\n\n  console.log('📊 PROJECT MANAGEMENT - Current state:', {\n    projectsCount: projects.length,\n    domainsCount: domains.length,\n    subDomainsCount: subDomains.length,\n    loading,\n    showAddModal,\n    selectedDomain,\n    pagination,\n    filters\n  });\n\n  useEffect(() => {\n    console.log('🔄 PROJECT MANAGEMENT - Initial useEffect triggered');\n    fetchInitialData();\n  }, []);\n\n  useEffect(() => {\n    console.log('🔄 PROJECT MANAGEMENT - Filters or pagination changed');\n    fetchProjects();\n  }, [filters, pagination.currentPage]);\n\n  const fetchInitialData = async () => {\n    try {\n      console.log('📡 INITIAL DATA - Fetching domains...');\n      const domainsResponse = await authService.getDomains({ limit: 100 });\n      console.log('✅ INITIAL DATA - Domains fetched:', domainsResponse.data);\n      \n      setDomains(domainsResponse.data?.domains || []);\n    } catch (error) {\n      console.error('❌ INITIAL DATA - Error fetching domains:', error);\n      toast.error('Failed to load domains');\n    }\n  };\n\n  const fetchProjects = async () => {\n    try {\n      setLoading(true);\n      \n      // Clean up filters - remove empty strings and null values\n      const cleanFilters = {};\n      Object.keys(filters).forEach(key => {\n        const value = filters[key];\n        if (value !== '' && value !== null && value !== undefined) {\n          cleanFilters[key] = value;\n        }\n      });\n      \n      const params = {\n        page: pagination.currentPage,\n        limit: 12,\n        ...cleanFilters\n      };\n      \n      console.log('📡 PROJECT FETCH - Starting with params:', params);\n      \n      const response = await authService.getProjects(params);\n      console.log('✅ PROJECT FETCH - Response:', response.data);\n      \n      setProjects(response.data.projects || []);\n      setPagination(response.data.pagination || pagination);\n      \n    } catch (error) {\n      console.error('❌ PROJECT FETCH - Error:', error);\n      toast.error('Failed to fetch projects');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchSubDomains = async (domainId) => {\n    try {\n      console.log('📡 SUBDOMAINS - Fetching for domain:', domainId);\n      const response = await authService.getSubDomainsByDomain(domainId);\n      console.log('✅ SUBDOMAINS - Fetched:', response.data);\n      setSubDomains(response.data?.subDomains || []);\n    } catch (error) {\n      console.error('❌ SUBDOMAINS - Error:', error);\n      setSubDomains([]);\n    }\n  };\n\n  const handleSearch = (searchTerm) => {\n    console.log('🔍 PROJECT SEARCH - Search term:', searchTerm);\n    setFilters(prev => ({ ...prev, search: searchTerm }));\n    setPagination(prev => ({ ...prev, currentPage: 1 }));\n  };\n\n  const handleFilterChange = (filterKey, value) => {\n    console.log('🎛️ PROJECT FILTER - Changed:', filterKey, '=', value);\n    setFilters(prev => ({ ...prev, [filterKey]: value }));\n    setPagination(prev => ({ ...prev, currentPage: 1 }));\n    \n    // If domain changes, fetch subdomains\n    if (filterKey === 'domainId') {\n      if (value) {\n        fetchSubDomains(value);\n      } else {\n        setSubDomains([]);\n      }\n      // Reset subdomain filter when domain changes\n      setFilters(prev => ({ ...prev, subDomainId: '' }));\n    }\n  };\n\n  const handleAddProject = () => {\n    console.log('➕ PROJECT ADD - Opening modal');\n    setEditingProject(null);\n    setShowAddModal(true);\n  };\n\n  const handleEditProject = (project) => {\n    console.log('✏️ PROJECT EDIT - Editing:', project.title);\n    setEditingProject(project);\n    setShowAddModal(true);\n  };\n\n  const handleDeleteProject = async (project) => {\n    console.log('🗑️ PROJECT DELETE - Requesting deletion:', project.title);\n    \n    if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n      console.log('❌ PROJECT DELETE - Cancelled by user');\n      return;\n    }\n\n    try {\n      console.log('📡 PROJECT DELETE - API call for:', project.id);\n      await authService.deleteProject(project.id);\n      console.log('✅ PROJECT DELETE - Success');\n      toast.success('Project deleted successfully');\n      fetchProjects();\n    } catch (error) {\n      console.error('❌ PROJECT DELETE - Error:', error);\n      toast.error('Failed to delete project');\n    }\n  };\n\n  const handleModalClose = () => {\n    console.log('❌ PROJECT MODAL - Closing');\n    setShowAddModal(false);\n    setEditingProject(null);\n    setSelectedDomain('');\n    setSubDomains([]);\n  };\n\n  const handleModalSave = () => {\n    console.log('✅ PROJECT MODAL - Saved successfully');\n    setShowAddModal(false);\n    setEditingProject(null);\n    setSelectedDomain('');\n    setSubDomains([]);\n    fetchProjects();\n  };\n\n  if (loading && projects.length === 0) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading projects...</p>\n      </div>\n    );\n  }\n\n  console.log('🎨 PROJECT MANAGEMENT - Rendering main component');\n\n  return (\n    <div className=\"project-management\">\n      {/* Header */}\n      <div className=\"page-header\">\n        <div className=\"header-content\">\n          <h1>Project Management</h1>\n          <p>Manage and organize all your projects</p>\n        </div>\n        <div className=\"header-actions\">\n          <button className=\"primary-button\" onClick={handleAddProject}>\n            <FiPlus />\n            Add Project\n          </button>\n        </div>\n      </div>\n\n      {/* Controls */}\n      <div className=\"controls-section\">\n        <div className=\"search-bar\">\n          <FiSearch className=\"search-icon\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search projects...\"\n            value={filters.search}\n            onChange={(e) => handleSearch(e.target.value)}\n          />\n        </div>\n\n        <div className=\"filter-controls\">\n          <select\n            value={filters.domainId}\n            onChange={(e) => handleFilterChange('domainId', e.target.value)}\n          >\n            <option value=\"\">All Domains</option>\n            {domains.map(domain => (\n              <option key={domain.id} value={domain.id}>\n                {domain.title}\n              </option>\n            ))}\n          </select>\n\n          <select\n            value={filters.subDomainId}\n            onChange={(e) => handleFilterChange('subDomainId', e.target.value)}\n            disabled={!filters.domainId}\n          >\n            <option value=\"\">All SubDomains</option>\n            {subDomains.map(subdomain => (\n              <option key={subdomain.id} value={subdomain.id}>\n                {subdomain.title}\n              </option>\n            ))}\n          </select>\n\n          <select\n            value={filters.isActive}\n            onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n          >\n            <option value={true}>Active</option>\n            <option value={false}>Archived</option>\n          </select>\n        </div>\n\n        <div className=\"view-controls\">\n          <div className=\"view-mode-toggle\">\n            <button\n              className={viewMode === 'grid' ? 'active' : ''}\n              onClick={() => setViewMode('grid')}\n            >\n              <FiGrid />\n            </button>\n            <button\n              className={viewMode === 'list' ? 'active' : ''}\n              onClick={() => setViewMode('list')}\n            >\n              <FiList />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Projects Grid/List */}\n      <div className={`projects-container ${viewMode}`}>\n        {projects.length === 0 ? (\n          <div className=\"empty-state\">\n            <FiFileText size={48} />\n            <h3>No projects found</h3>\n            <p>Get started by creating your first project</p>\n            <button className=\"primary-button\" onClick={handleAddProject}>\n              <FiPlus />\n              Create Project\n            </button>\n          </div>\n        ) : (\n          projects.map(project => (\n            <div key={project.id} className=\"project-card\">\n              <div className=\"project-header\">\n                <h3>{project.title}</h3>\n                <div className=\"project-actions\">\n                  {project.isFeatured && <FiStar className=\"featured-icon\" />}\n                  <button onClick={() => handleEditProject(project)}>\n                    <FiEdit />\n                  </button>\n                  <button onClick={() => handleDeleteProject(project)}>\n                    <FiTrash2 />\n                  </button>\n                </div>\n              </div>\n              \n              <div className=\"project-content\">\n                <p className=\"project-abstract\">\n                  {project.abstract || 'No abstract available'}\n                </p>\n                \n                <div className=\"project-meta\">\n                  <span className=\"subdomain-tag\">\n                    <FiFolder />\n                    {project.subDomain?.title || 'Unknown SubDomain'}\n                  </span>\n                  <span className={`status-badge ${project.isActive ? 'active' : 'inactive'}`}>\n                    {project.isActive ? 'Active' : 'Archived'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n\n      {/* Pagination */}\n      {pagination.totalPages > 1 && (\n        <div className=\"pagination\">\n          <button\n            disabled={pagination.currentPage === 1}\n            onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n          >\n            Previous\n          </button>\n          <span>\n            Page {pagination.currentPage} of {pagination.totalPages}\n          </span>\n          <button\n            disabled={pagination.currentPage === pagination.totalPages}\n            onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n          >\n            Next\n          </button>\n        </div>\n      )}\n\n      {/* Add/Edit Project Modal */}\n      {showAddModal && (\n        <ProjectModal\n          project={editingProject}\n          domains={domains}\n          onClose={handleModalClose}\n          onSave={handleModalSave}\n        />\n      )}\n    </div>\n  );\n};\n\n// Project Modal Component\nconst ProjectModal = ({ project, domains, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    title: project?.title || '',\n    abstract: project?.abstract || '',\n    specifications: project?.specifications || '',\n    learningOutcomes: project?.learningOutcomes || '',\n    subDomainId: project?.subDomainId || '',\n    isFeatured: project?.isFeatured || false\n  });\n  const [loading, setLoading] = useState(false);\n  const [selectedDomain, setSelectedDomain] = useState('');\n  const [subDomains, setSubDomains] = useState([]);\n\n  console.log('📝 PROJECT MODAL - Props:', {\n    project: project?.title,\n    domainsCount: domains.length,\n    formData\n  });\n\n  useEffect(() => {\n    if (selectedDomain) {\n      fetchSubDomains(selectedDomain);\n    }\n  }, [selectedDomain]);\n\n  const fetchSubDomains = async (domainId) => {\n    try {\n      console.log('📡 MODAL - Fetching subdomains for domain:', domainId);\n      const response = await authService.getSubDomainsByDomain(domainId);\n      console.log('✅ MODAL - Subdomains fetched:', response.data);\n      setSubDomains(response.data?.subDomains || []);\n    } catch (error) {\n      console.error('❌ MODAL - Error fetching subdomains:', error);\n      setSubDomains([]);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    console.log('💾 MODAL - Submitting form data:', formData);\n\n    try {\n      const projectData = {\n        title: formData.title.trim(),\n        abstract: formData.abstract.trim(),\n        specifications: formData.specifications.trim(),\n        learningOutcomes: formData.learningOutcomes.trim(),\n        subDomainId: formData.subDomainId,\n        isFeatured: formData.isFeatured\n      };\n\n      if (project) {\n        console.log('📡 MODAL - Updating project:', project.id);\n        await authService.updateProject(project.id, projectData);\n        console.log('✅ MODAL - Project updated successfully');\n        toast.success('Project updated successfully');\n      } else {\n        console.log('📡 MODAL - Creating new project');\n        await authService.createProject(projectData);\n        console.log('✅ MODAL - Project created successfully');\n        toast.success('Project created successfully');\n      }\n      onSave();\n    } catch (error) {\n      console.error('❌ MODAL - Error saving project:', error);\n      console.error('❌ MODAL - Error details:', error.response?.data);\n      const errorMessage = error.response?.data?.message || 'Failed to save project';\n      toast.error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal large\">\n        <div className=\"modal-header\">\n          <h2>{project ? 'Edit Project' : 'Add New Project'}</h2>\n          <button onClick={onClose}>\n            <FiX />\n          </button>\n        </div>\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label>Project Title *</label>\n            <input\n              type=\"text\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              placeholder=\"Enter project title...\"\n              required\n              minLength={3}\n              maxLength={200}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Domain *</label>\n            <select\n              value={selectedDomain}\n              onChange={(e) => {\n                setSelectedDomain(e.target.value);\n                setFormData(prev => ({ ...prev, subDomainId: '' }));\n              }}\n              required\n            >\n              <option value=\"\">Select Domain</option>\n              {domains.map(domain => (\n                <option key={domain.id} value={domain.id}>\n                  {domain.title}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <label>SubDomain *</label>\n            <select\n              value={formData.subDomainId}\n              onChange={(e) => setFormData(prev => ({ ...prev, subDomainId: e.target.value }))}\n              disabled={!selectedDomain}\n              required\n            >\n              <option value=\"\">Select SubDomain</option>\n              {subDomains.map(subdomain => (\n                <option key={subdomain.id} value={subdomain.id}>\n                  {subdomain.title}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          <div className=\"form-group\">\n            <label>Abstract</label>\n            <textarea\n              value={formData.abstract}\n              onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n              placeholder=\"Brief project description...\"\n              rows={3}\n              maxLength={1000}\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label>Specifications</label>\n            <textarea\n              value={formData.specifications}\n              onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n              placeholder=\"Technical specifications...\"\n              rows={4}\n              maxLength={2000}\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label>Learning Outcomes</label>\n            <textarea\n              value={formData.learningOutcomes}\n              onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n              placeholder=\"What will students learn...\"\n              rows={3}\n              maxLength={1000}\n            />\n          </div>\n\n          <div className=\"form-group checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={formData.isFeatured}\n                onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n              />\n              Featured Project\n            </label>\n          </div>\n          \n          <div className=\"modal-actions\">\n            <button type=\"button\" onClick={onClose} disabled={loading}>\n              Cancel\n            </button>\n            <button \n              type=\"submit\" \n              className=\"primary-button\" \n              disabled={loading || !formData.title.trim() || !formData.subDomainId}\n            >\n              {loading ? (project ? 'Updating...' : 'Creating...') : (project ? 'Update Project' : 'Create Project')}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectManagement;\n\n// // src/components/projects/ProjectManagement.js - SIMPLIFIED VERSION FOR VIEWING/MANAGING PROJECTS\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { authService } from '../../services/authService';\n// import { toast } from 'react-toastify';\n// import {\n//   FiEdit,\n//   FiTrash2,\n//   FiSearch,\n//   FiFilter,\n//   FiMove,\n//   FiArchive,\n//   FiStar,\n//   FiEye,\n//   FiUsers,\n//   FiImage,\n//   FiMoreVertical,\n//   FiFolder,\n//   FiFileText,\n//   FiPlus,\n//   FiSettings,\n//   FiArrowRight\n// } from 'react-icons/fi';\n\n// const ProjectManagement = () => {\n//   console.log('🚀 PROJECT MANAGEMENT - Component rendering/mounting');\n  \n//   const navigate = useNavigate();\n//   const [projects, setProjects] = useState([]);\n//   const [domains, setDomains] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [pagination, setPagination] = useState({\n//     currentPage: 1,\n//     totalPages: 1,\n//     totalItems: 0\n//   });\n//   const [filters, setFilters] = useState({\n//     search: '',\n//     domainId: '',\n//     isActive: true,\n//     isFeatured: null,\n//     sortBy: 'updatedAt',\n//     sortOrder: 'DESC'\n//   });\n//   const [editingProject, setEditingProject] = useState(null);\n//   const [selectedProject, setSelectedProject] = useState(null);\n//   const [showEditModal, setShowEditModal] = useState(false);\n\n//   console.log('📊 PROJECT MANAGEMENT - Current state:', {\n//     projectsCount: projects.length,\n//     loading,\n//     pagination,\n//     filters,\n//     editingProject: !!editingProject,\n//     selectedProject: !!selectedProject\n//   });\n\n//   useEffect(() => {\n//     console.log('🔄 PROJECT MANAGEMENT - useEffect triggered');\n//     fetchInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     console.log('🔄 PROJECT MANAGEMENT - Filters or pagination changed');\n//     fetchProjects();\n//   }, [filters, pagination.currentPage]);\n\n//   const fetchInitialData = async () => {\n//     try {\n//       console.log('📡 INITIAL DATA - Fetching domains...');\n//       const domainsResponse = await authService.getDomains({ limit: 100 });\n//       console.log('✅ INITIAL DATA - Domains fetched:', domainsResponse.data);\n      \n//       setDomains(domainsResponse.data?.domains || []);\n//     } catch (error) {\n//       console.error('❌ INITIAL DATA - Error fetching domains:', error);\n//       toast.error('Failed to load domains');\n//     }\n//   };\n\n//   const fetchProjects = async () => {\n//     try {\n//       setLoading(true);\n      \n//       // Clean up filters - remove empty strings and null values\n//       const cleanFilters = {};\n//       Object.keys(filters).forEach(key => {\n//         const value = filters[key];\n//         if (value !== '' && value !== null && value !== undefined) {\n//           cleanFilters[key] = value;\n//         }\n//       });\n      \n//       const params = {\n//         page: pagination.currentPage,\n//         limit: 12,\n//         ...cleanFilters\n//       };\n      \n//       console.log('📡 PROJECT FETCH - Starting with params:', params);\n      \n//       const response = await authService.getProjects(params);\n//       console.log('✅ PROJECT FETCH - Response:', response.data);\n      \n//       setProjects(response.data.projects || []);\n//       setPagination(response.data.pagination || pagination);\n      \n//     } catch (error) {\n//       console.error('❌ PROJECT FETCH - Error:', error);\n//       toast.error('Failed to fetch projects');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = (searchTerm) => {\n//     console.log('🔍 PROJECT SEARCH - Search term:', searchTerm);\n//     setFilters(prev => ({ ...prev, search: searchTerm }));\n//     setPagination(prev => ({ ...prev, currentPage: 1 }));\n//   };\n\n//   const handleFilterChange = (filterKey, value) => {\n//     console.log('🎛️ PROJECT FILTER - Changed:', filterKey, '=', value);\n//     setFilters(prev => ({ ...prev, [filterKey]: value }));\n//     setPagination(prev => ({ ...prev, currentPage: 1 }));\n//   };\n\n//   const handleEditProject = (project) => {\n//     console.log('✏️ PROJECT EDIT - Editing:', project.title);\n//     setEditingProject(project);\n//     setShowEditModal(true);\n//   };\n\n//   const handleDeleteProject = async (project) => {\n//     console.log('🗑️ PROJECT DELETE - Requesting deletion:', project.title);\n    \n//     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n//       console.log('❌ PROJECT DELETE - Cancelled by user');\n//       return;\n//     }\n\n//     try {\n//       console.log('📡 PROJECT DELETE - API call for:', project.id);\n//       await authService.deleteProject(project.id);\n//       console.log('✅ PROJECT DELETE - Success');\n//       toast.success('Project deleted successfully');\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('❌ PROJECT DELETE - Error:', error);\n//       toast.error('Failed to delete project');\n//     }\n//   };\n\n//   const handleArchiveProject = async (project) => {\n//     const isArchiving = project.isActive;\n//     const action = isArchiving ? 'archive' : 'restore';\n    \n//     console.log('📁 PROJECT ARCHIVE - Action:', action, 'for:', project.title);\n    \n//     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n//       return;\n//     }\n\n//     try {\n//       await authService.archiveProject(project.id, {\n//         archive: isArchiving,\n//         reason: `${action} via admin panel`\n//       });\n//       console.log('✅ PROJECT ARCHIVE - Success');\n//       toast.success(`Project ${action}d successfully`);\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('❌ PROJECT ARCHIVE - Error:', error);\n//       toast.error(`Failed to ${action} project`);\n//     }\n//   };\n\n//   const handleToggleFeatured = async (project) => {\n//     console.log('⭐ PROJECT FEATURED - Toggle for:', project.title);\n    \n//     try {\n//       await authService.updateProject(project.id, {\n//         isFeatured: !project.isFeatured\n//       });\n//       console.log('✅ PROJECT FEATURED - Success');\n//       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n//       fetchProjects();\n//     } catch (error) {\n//       console.error('❌ PROJECT FEATURED - Error:', error);\n//       toast.error('Failed to update featured status');\n//     }\n//   };\n\n//   const navigateToCreateProject = () => {\n//     console.log('🌐 NAVIGATION - Redirecting to domains for project creation');\n//     navigate('/domains');\n//     toast.info('Navigate to Domains → SubDomains to create new projects');\n//   };\n\n//   if (loading && projects.length === 0) {\n//     return (\n//       <div className=\"loading-container\">\n//         <div className=\"loading-spinner\"></div>\n//         <p>Loading projects...</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"project-management\">\n//       <div className=\"page-header\">\n//         <div className=\"header-content\">\n//           <h1>Project Management</h1>\n//           <p>View and manage your existing projects</p>\n//         </div>\n//         <div className=\"header-actions\">\n//           <button \n//             className=\"secondary-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             <FiSettings />\n//             Manage Domains\n//           </button>\n//           <button \n//             className=\"primary-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             <FiPlus />\n//             Create New Project\n//             <FiArrowRight />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Info Banner */}\n//       <div className=\"info-banner\">\n//         <div className=\"banner-content\">\n//           <FiFileText className=\"banner-icon\" />\n//           <div className=\"banner-text\">\n//             <strong>Want to create a new project?</strong>\n//             <p>Go to <strong>Domains → SubDomains</strong> and click \"Add Project\" on any leaf subdomain for better organization.</p>\n//           </div>\n//           <button \n//             className=\"banner-button\" \n//             onClick={navigateToCreateProject}\n//           >\n//             Go to Domains <FiArrowRight />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Filters and Controls */}\n//       <div className=\"controls-section\">\n//         <div className=\"search-bar\">\n//           <FiSearch className=\"search-icon\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search projects...\"\n//             value={filters.search}\n//             onChange={(e) => handleSearch(e.target.value)}\n//           />\n//         </div>\n        \n//         <div className=\"filter-controls\">\n//           <select\n//             value={filters.domainId}\n//             onChange={(e) => handleFilterChange('domainId', e.target.value)}\n//           >\n//             <option value=\"\">All Domains</option>\n//             {domains.map(domain => (\n//               <option key={domain.id} value={domain.id}>{domain.title}</option>\n//             ))}\n//           </select>\n          \n//           <select\n//             value={filters.isFeatured === null ? '' : filters.isFeatured}\n//             onChange={(e) => handleFilterChange('isFeatured', \n//               e.target.value === '' ? null : e.target.value === 'true'\n//             )}\n//           >\n//             <option value=\"\">All Projects</option>\n//             <option value=\"true\">Featured Only</option>\n//             <option value=\"false\">Non-Featured</option>\n//           </select>\n          \n//           <select\n//             value={filters.isActive}\n//             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n//           >\n//             <option value=\"true\">Active Projects</option>\n//             <option value=\"false\">Archived Projects</option>\n//           </select>\n          \n//           <select\n//             value={filters.sortBy}\n//             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n//           >\n//             <option value=\"updatedAt\">Sort by Last Updated</option>\n//             <option value=\"title\">Sort by Title</option>\n//             <option value=\"createdAt\">Sort by Date Created</option>\n//             <option value=\"leadCount\">Sort by Leads</option>\n//             <option value=\"viewCount\">Sort by Views</option>\n//           </select>\n//         </div>\n//       </div>\n\n//       {/* Projects Grid */}\n//       <div className=\"projects-grid\">\n//         {projects.length > 0 ? (\n//           projects.map((project) => (\n//             <ProjectCard\n//               key={project.id}\n//               project={project}\n//               onEdit={handleEditProject}\n//               onDelete={handleDeleteProject}\n//               onArchive={handleArchiveProject}\n//               onToggleFeatured={handleToggleFeatured}\n//               onViewDetails={(project) => setSelectedProject(project)}\n//             />\n//           ))\n//         ) : (\n//           <div className=\"empty-state\">\n//             <FiFileText size={48} />\n//             <h3>No projects found</h3>\n//             <p>Projects are created from Domain → SubDomain pages for better organization</p>\n//             <div className=\"empty-state-actions\">\n//               <button className=\"primary-button\" onClick={navigateToCreateProject}>\n//                 <FiSettings />\n//                 Go to Domains\n//               </button>\n//               <p className=\"help-text\">\n//                 💡 Tip: Organize your projects by creating domains and subdomains first\n//               </p>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Pagination */}\n//       {pagination.totalPages > 1 && (\n//         <div className=\"pagination\">\n//           <button\n//             disabled={pagination.currentPage === 1}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n//           >\n//             Previous\n//           </button>\n          \n//           <span className=\"page-info\">\n//             Page {pagination.currentPage} of {pagination.totalPages}\n//             ({pagination.totalItems} total)\n//           </span>\n          \n//           <button\n//             disabled={pagination.currentPage === pagination.totalPages}\n//             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n//           >\n//             Next\n//           </button>\n//         </div>\n//       )}\n\n//       {/* Edit Project Modal */}\n//       {showEditModal && editingProject && (\n//         <ProjectEditModal\n//           project={editingProject}\n//           onClose={() => {\n//             setShowEditModal(false);\n//             setEditingProject(null);\n//           }}\n//           onSave={() => {\n//             setShowEditModal(false);\n//             setEditingProject(null);\n//             fetchProjects();\n//           }}\n//         />\n//       )}\n\n//       {/* Project Details Modal */}\n//       {selectedProject && (\n//         <ProjectDetailsModal\n//           project={selectedProject}\n//           onClose={() => setSelectedProject(null)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // Project Card Component\n// const ProjectCard = ({ \n//   project, \n//   onEdit, \n//   onDelete, \n//   onArchive, \n//   onToggleFeatured, \n//   onViewDetails \n// }) => {\n//   const [showMenu, setShowMenu] = useState(false);\n\n//   return (\n//     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n//       <div className=\"project-header\">\n//         <div className=\"project-image\">\n//           {project.images && project.images.length > 0 ? (\n//             <img src={project.images[0].url} alt={project.title} />\n//           ) : (\n//             <div className=\"image-placeholder\">\n//               <FiImage />\n//             </div>\n//           )}\n//         </div>\n        \n//         <div className=\"project-badges\">\n//           {project.isFeatured && (\n//             <span className=\"badge featured\">\n//               <FiStar /> Featured\n//             </span>\n//           )}\n//           {!project.isActive && (\n//             <span className=\"badge archived\">Archived</span>\n//           )}\n//         </div>\n        \n//         <div className=\"project-menu\">\n//           <button onClick={() => setShowMenu(!showMenu)}>\n//             <FiMoreVertical />\n//           </button>\n//           {showMenu && (\n//             <div className=\"dropdown-menu\">\n//               <button onClick={() => onViewDetails(project)}>\n//                 <FiEye /> View Details\n//               </button>\n//               <button onClick={() => onEdit(project)}>\n//                 <FiEdit /> Edit\n//               </button>\n//               <button onClick={() => onToggleFeatured(project)}>\n//                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n//               </button>\n//               <button onClick={() => onArchive(project)}>\n//                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n//               </button>\n//               <button onClick={() => onDelete(project)} className=\"danger\">\n//                 <FiTrash2 /> Delete\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n      \n//       <div className=\"project-content\">\n//         <h3 className=\"project-title\">{project.title}</h3>\n//         <p className=\"project-subdomain\">\n//           <FiFolder className=\"subdomain-icon\" />\n//           {project.subDomain?.domain?.title} → {project.subDomain?.title || 'No sub-domain'}\n//         </p>\n//         <p className=\"project-abstract\">\n//           {project.abstract?.substring(0, 100)}...\n//         </p>\n//       </div>\n      \n//       <div className=\"project-footer\">\n//         <div className=\"project-stats\">\n//           <div className=\"stat\">\n//             <FiEye />\n//             <span>{project.viewCount || 0}</span>\n//           </div>\n//           <div className=\"stat\">\n//             <FiUsers />\n//             <span>{project.leadCount || 0}</span>\n//           </div>\n//         </div>\n        \n//         <div className=\"project-actions\">\n//           <button onClick={() => onEdit(project)} className=\"edit-button\">\n//             <FiEdit />\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Project Edit Modal Component\n// const ProjectEditModal = ({ project, onClose, onSave }) => {\n//   const [formData, setFormData] = useState({\n//     title: project?.title || '',\n//     abstract: project?.abstract || '',\n//     specifications: project?.specifications || '',\n//     learningOutcomes: project?.learningOutcomes || '',\n//     isFeatured: project?.isFeatured || false\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   console.log('📝 PROJECT EDIT MODAL - Project:', project.title);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     try {\n//       console.log('💾 PROJECT UPDATE - Starting with data:', formData);\n//       await authService.updateProject(project.id, formData);\n//       console.log('✅ PROJECT UPDATE - Success');\n//       toast.success('Project updated successfully');\n//       onSave();\n//     } catch (error) {\n//       console.error('❌ PROJECT UPDATE - Error:', error);\n//       toast.error('Failed to update project');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal large\">\n//         <div className=\"modal-header\">\n//           <h2>Edit Project: {project.title}</h2>\n//           <button onClick={onClose}>×</button>\n//         </div>\n        \n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label>Project Title</label>\n//             <input\n//               type=\"text\"\n//               value={formData.title}\n//               onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"modal-info\">\n//             <strong>Domain:</strong> {project.subDomain?.domain?.title || 'Unknown'}<br />\n//             <strong>SubDomain:</strong> {project.subDomain?.title || 'Unknown'}<br />\n//             <span className=\"info-note\">\n//               💡 To move this project to a different domain/subdomain, contact your administrator\n//             </span>\n//           </div>\n          \n//           <div className=\"form-group\">\n//             <label>Abstract</label>\n//             <textarea\n//               value={formData.abstract}\n//               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n//               rows={4}\n//               required\n//             />\n//           </div>\n          \n//           <div className=\"form-group\">\n//             <label>Specifications</label>\n//             <textarea\n//               value={formData.specifications}\n//               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n//               rows={6}\n//               required\n//             />\n//           </div>\n          \n//           <div className=\"form-group\">\n//             <label>Learning Outcomes</label>\n//             <textarea\n//               value={formData.learningOutcomes}\n//               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n//               rows={4}\n//               required\n//             />\n//           </div>\n          \n//           <div className=\"form-group checkbox\">\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 checked={formData.isFeatured}\n//                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n//               />\n//               Featured Project\n//             </label>\n//           </div>\n          \n//           <div className=\"modal-actions\">\n//             <button type=\"button\" onClick={onClose} disabled={loading}>\n//               Cancel\n//             </button>\n//             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n//               {loading ? 'Updating...' : 'Update Project'}\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Project Details Modal\n// const ProjectDetailsModal = ({ project, onClose }) => {\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal large\">\n//         <div className=\"modal-header\">\n//           <h2>{project.title}</h2>\n//           <button onClick={onClose}>×</button>\n//         </div>\n        \n//         <div className=\"project-details\">\n//           <div className=\"detail-section\">\n//             <h3>Location</h3>\n//             <p><strong>Domain:</strong> {project.subDomain?.domain?.title || 'Unknown'}</p>\n//             <p><strong>SubDomain:</strong> {project.subDomain?.title || 'Unknown'}</p>\n//           </div>\n          \n//           <div className=\"detail-section\">\n//             <h3>Abstract</h3>\n//             <p>{project.abstract}</p>\n//           </div>\n          \n//           <div className=\"detail-section\">\n//             <h3>Specifications</h3>\n//             <p>{project.specifications}</p>\n//           </div>\n          \n//           <div className=\"detail-section\">\n//             <h3>Learning Outcomes</h3>\n//             <p>{project.learningOutcomes}</p>\n//           </div>\n          \n//           <div className=\"detail-stats\">\n//             <div className=\"stat-item\">\n//               <strong>Views:</strong> {project.viewCount || 0}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Leads:</strong> {project.leadCount || 0}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n//             </div>\n//             <div className=\"stat-item\">\n//               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ProjectManagement;\n\n\n// // // src/components/projects/ProjectManagement.js - FIXED WITH LOGGING\n// // import React, { useState, useEffect } from 'react';\n// // import { authService } from '../../services/authService';\n// // import { toast } from 'react-toastify';\n// // import {\n// //   FiPlus,\n// //   FiEdit,\n// //   FiTrash2,\n// //   FiSearch,\n// //   FiFilter,\n// //   FiMove,\n// //   FiArchive,\n// //   FiStar,\n// //   FiEye,\n// //   FiUsers,\n// //   FiImage,\n// //   FiMoreVertical,\n// //   FiFolder,\n// //   FiFileText\n// // } from 'react-icons/fi';\n\n// // const ProjectManagement = () => {\n// //   const [projects, setProjects] = useState([]);\n// //   const [domains, setDomains] = useState([]);\n// //   const [subDomains, setSubDomains] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [pagination, setPagination] = useState({\n// //     currentPage: 1,\n// //     totalPages: 1,\n// //     totalItems: 0\n// //   });\n// //   const [filters, setFilters] = useState({\n// //     search: '',\n// //     subDomainId: '',\n// //     isActive: true,\n// //     isFeatured: null,\n// //     sortBy: 'title',\n// //     sortOrder: 'ASC'\n// //   });\n// //   const [showAddModal, setShowAddModal] = useState(false);\n// //   const [editingProject, setEditingProject] = useState(null);\n// //   const [selectedProject, setSelectedProject] = useState(null);\n\n// //   useEffect(() => {\n// //     console.log('🚀 ProjectManagement component mounted');\n// //     fetchInitialData();\n// //   }, []);\n\n// //   useEffect(() => {\n// //     console.log('🔄 Filters or pagination changed:', { filters, currentPage: pagination.currentPage });\n// //     fetchProjects();\n// //   }, [filters, pagination.currentPage]);\n\n// //   const fetchInitialData = async () => {\n// //     try {\n// //       console.log('📡 Fetching initial data (domains)...');\n// //       const [domainsResponse] = await Promise.all([\n// //         authService.getDomains({ limit: 100 })\n// //       ]);\n      \n// //       console.log('✅ Domains fetched:', domainsResponse);\n// //       setDomains(domainsResponse.data.domains || []);\n// //     } catch (error) {\n// //       console.error('❌ Error fetching initial data:', error);\n// //       toast.error('Failed to load domains');\n// //     }\n// //   };\n\n// //   const fetchProjects = async () => {\n// //     try {\n// //       setLoading(true);\n      \n// //       // Clean up filters - remove empty strings and null values\n// //       const cleanFilters = {};\n// //       Object.keys(filters).forEach(key => {\n// //         const value = filters[key];\n// //         // Only add non-empty values to the params\n// //         if (value !== '' && value !== null && value !== undefined) {\n// //           cleanFilters[key] = value;\n// //         }\n// //       });\n      \n// //       const params = {\n// //         page: pagination.currentPage,\n// //         limit: 12,\n// //         ...cleanFilters\n// //       };\n      \n// //       console.log('📡 Fetching projects with params:', params);\n// //       console.log('🔍 Raw filters before cleaning:', filters);\n// //       console.log('🧹 Cleaned filters:', cleanFilters);\n      \n// //       const response = await authService.getProjects(params);\n// //       console.log('✅ Projects API response:', response);\n      \n// //       setProjects(response.data.projects || []);\n// //       setPagination(response.data.pagination || pagination);\n      \n// //       console.log('📊 Projects set:', response.data.projects?.length || 0, 'projects');\n// //       console.log('📄 Pagination set:', response.data.pagination);\n      \n// //     } catch (error) {\n// //       console.error('❌ Error fetching projects:', error);\n// //       console.error('❌ Error details:', {\n// //         message: error.message,\n// //         response: error.response?.data,\n// //         status: error.response?.status,\n// //         config: error.config\n// //       });\n// //       toast.error('Failed to fetch projects');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const fetchSubDomains = async (domainId) => {\n// //     try {\n// //       console.log('📡 Fetching subdomains for domain:', domainId);\n// //       const response = await authService.getLeafSubDomains(domainId);\n// //       console.log('✅ Subdomains fetched:', response);\n// //       setSubDomains(response.data || []);\n// //     } catch (error) {\n// //       console.error('❌ Error fetching sub-domains:', error);\n// //     }\n// //   };\n\n// //   const handleSearch = (searchTerm) => {\n// //     console.log('🔍 Search term changed:', searchTerm);\n// //     setFilters(prev => ({ ...prev, search: searchTerm }));\n// //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// //   };\n\n// //   const handleFilterChange = (filterKey, value) => {\n// //     console.log('🎛️ Filter changed:', filterKey, '=', value);\n// //     setFilters(prev => ({ ...prev, [filterKey]: value }));\n// //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// //   };\n\n// //   const handleDomainChange = (domainId) => {\n// //     console.log('🏢 Domain changed:', domainId);\n// //     if (domainId) {\n// //       fetchSubDomains(domainId);\n// //     } else {\n// //       setSubDomains([]);\n// //     }\n// //     // Reset subdomain filter when domain changes\n// //     setFilters(prev => ({ ...prev, subDomainId: '' }));\n// //   };\n\n// //   const handleAddProject = () => {\n// //     console.log('➕ Add project clicked');\n// //     setEditingProject(null);\n// //     setShowAddModal(true);\n// //   };\n\n// //   const handleEditProject = (project) => {\n// //     console.log('✏️ Edit project clicked:', project.id, project.title);\n// //     setEditingProject(project);\n// //     setShowAddModal(true);\n// //   };\n\n// //   const handleDeleteProject = async (project) => {\n// //     console.log('🗑️ Delete project requested:', project.id, project.title);\n    \n// //     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n// //       console.log('❌ Delete cancelled by user');\n// //       return;\n// //     }\n\n// //     try {\n// //       console.log('📡 Deleting project:', project.id);\n// //       await authService.deleteProject(project.id);\n// //       console.log('✅ Project deleted successfully');\n// //       toast.success('Project deleted successfully');\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('❌ Error deleting project:', error);\n// //       toast.error('Failed to delete project');\n// //     }\n// //   };\n\n// //   const handleMoveProject = async (project, newSubDomainId) => {\n// //     console.log('📦 Move project requested:', project.id, 'to subdomain:', newSubDomainId);\n    \n// //     try {\n// //       await authService.moveProject(project.id, {\n// //         newSubDomainId,\n// //         reason: 'Moved via admin panel'\n// //       });\n// //       console.log('✅ Project moved successfully');\n// //       toast.success('Project moved successfully');\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('❌ Error moving project:', error);\n// //       toast.error('Failed to move project');\n// //     }\n// //   };\n\n// //   const handleArchiveProject = async (project) => {\n// //     const isArchiving = project.isActive;\n// //     const action = isArchiving ? 'archive' : 'restore';\n    \n// //     console.log('📁 Archive/restore project requested:', project.id, action);\n    \n// //     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n// //       console.log('❌ Archive/restore cancelled by user');\n// //       return;\n// //     }\n\n// //     try {\n// //       await authService.archiveProject(project.id, {\n// //         archive: isArchiving,\n// //         reason: `${action} via admin panel`\n// //       });\n// //       console.log('✅ Project archived/restored successfully');\n// //       toast.success(`Project ${action}d successfully`);\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error(`❌ Error ${action}ing project:`, error);\n// //       toast.error(`Failed to ${action} project`);\n// //     }\n// //   };\n\n// //   const handleToggleFeatured = async (project) => {\n// //     console.log('⭐ Toggle featured requested:', project.id, 'current:', project.isFeatured);\n    \n// //     try {\n// //       await authService.updateProject(project.id, {\n// //         isFeatured: !project.isFeatured\n// //       });\n// //       console.log('✅ Featured status updated successfully');\n// //       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n// //       fetchProjects();\n// //     } catch (error) {\n// //       console.error('❌ Error updating featured status:', error);\n// //       toast.error('Failed to update featured status');\n// //     }\n// //   };\n\n// //   if (loading && projects.length === 0) {\n// //     return (\n// //       <div className=\"loading-container\">\n// //         <div className=\"loading-spinner\"></div>\n// //         <p>Loading projects...</p>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"project-management\">\n// //       <div className=\"page-header\">\n// //         <div className=\"header-content\">\n// //           <h1>Project Management</h1>\n// //           <p>Manage your project portfolio and content</p>\n// //         </div>\n// //         <button className=\"primary-button\" onClick={handleAddProject}>\n// //           <FiPlus />\n// //           Add Project\n// //         </button>\n// //       </div>\n\n// //       {/* Filters and Controls */}\n// //       <div className=\"controls-section\">\n// //         <div className=\"search-bar\">\n// //           <FiSearch className=\"search-icon\" />\n// //           <input\n// //             type=\"text\"\n// //             placeholder=\"Search projects...\"\n// //             value={filters.search}\n// //             onChange={(e) => handleSearch(e.target.value)}\n// //           />\n// //         </div>\n        \n// //         <div className=\"filter-controls\">\n// //           {/* Domain Selector */}\n// //           <select\n// //             onChange={(e) => handleDomainChange(e.target.value)}\n// //           >\n// //             <option value=\"\">Select Domain</option>\n// //             {domains.map(domain => (\n// //               <option key={domain.id} value={domain.id}>{domain.title}</option>\n// //             ))}\n// //           </select>\n          \n// //           {/* Subdomain Selector */}\n// //           <select\n// //             value={filters.subDomainId}\n// //             onChange={(e) => handleFilterChange('subDomainId', e.target.value)}\n// //             disabled={subDomains.length === 0}\n// //           >\n// //             <option value=\"\">All Sub-domains</option>\n// //             {subDomains.map(sub => (\n// //               <option key={sub.id} value={sub.id}>{sub.title}</option>\n// //             ))}\n// //           </select>\n          \n// //           <select\n// //             value={filters.isFeatured === null ? '' : filters.isFeatured}\n// //             onChange={(e) => handleFilterChange('isFeatured', \n// //               e.target.value === '' ? null : e.target.value === 'true'\n// //             )}\n// //           >\n// //             <option value=\"\">All Projects</option>\n// //             <option value=\"true\">Featured Only</option>\n// //             <option value=\"false\">Non-Featured</option>\n// //           </select>\n          \n// //           <select\n// //             value={filters.isActive}\n// //             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n// //           >\n// //             <option value=\"true\">Active Projects</option>\n// //             <option value=\"false\">Archived Projects</option>\n// //           </select>\n          \n// //           <select\n// //             value={filters.sortBy}\n// //             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n// //           >\n// //             <option value=\"title\">Sort by Title</option>\n// //             <option value=\"createdAt\">Sort by Date</option>\n// //             <option value=\"leadCount\">Sort by Leads</option>\n// //             <option value=\"viewCount\">Sort by Views</option>\n// //           </select>\n// //         </div>\n// //       </div>\n\n// //       {/* Projects Grid */}\n// //       <div className=\"projects-grid\">\n// //         {projects.length > 0 ? (\n// //           projects.map((project) => (\n// //             <ProjectCard\n// //               key={project.id}\n// //               project={project}\n// //               onEdit={handleEditProject}\n// //               onDelete={handleDeleteProject}\n// //               onMove={handleMoveProject}\n// //               onArchive={handleArchiveProject}\n// //               onToggleFeatured={handleToggleFeatured}\n// //               onViewDetails={(project) => setSelectedProject(project)}\n// //             />\n// //           ))\n// //         ) : (\n// //           <div className=\"empty-state\">\n// //             <FiFileText size={48} />\n// //             <h3>No projects found</h3>\n// //             <p>Create your first project to get started</p>\n// //             <button className=\"primary-button\" onClick={handleAddProject}>\n// //               <FiPlus />\n// //               Add Project\n// //             </button>\n// //           </div>\n// //         )}\n// //       </div>\n\n// //       {/* Pagination */}\n// //       {pagination.totalPages > 1 && (\n// //         <div className=\"pagination\">\n// //           <button\n// //             disabled={pagination.currentPage === 1}\n// //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n// //           >\n// //             Previous\n// //           </button>\n          \n// //           <span className=\"page-info\">\n// //             Page {pagination.currentPage} of {pagination.totalPages}\n// //             ({pagination.totalItems} total)\n// //           </span>\n          \n// //           <button\n// //             disabled={pagination.currentPage === pagination.totalPages}\n// //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n// //           >\n// //             Next\n// //           </button>\n// //         </div>\n// //       )}\n\n// //       {/* Add/Edit Modal */}\n// //       {showAddModal && (\n// //         <ProjectModal\n// //           project={editingProject}\n// //           domains={domains}\n// //           onClose={() => setShowAddModal(false)}\n// //           onSave={() => {\n// //             setShowAddModal(false);\n// //             fetchProjects();\n// //           }}\n// //         />\n// //       )}\n\n// //       {/* Project Details Modal */}\n// //       {selectedProject && (\n// //         <ProjectDetailsModal\n// //           project={selectedProject}\n// //           onClose={() => setSelectedProject(null)}\n// //         />\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // // Project Card Component\n// // const ProjectCard = ({ \n// //   project, \n// //   onEdit, \n// //   onDelete, \n// //   onMove, \n// //   onArchive, \n// //   onToggleFeatured, \n// //   onViewDetails \n// // }) => {\n// //   const [showMenu, setShowMenu] = useState(false);\n\n// //   return (\n// //     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n// //       <div className=\"project-header\">\n// //         <div className=\"project-image\">\n// //           {project.images && project.images.length > 0 ? (\n// //             <img src={project.images[0].url} alt={project.title} />\n// //           ) : (\n// //             <div className=\"image-placeholder\">\n// //               <FiImage />\n// //             </div>\n// //           )}\n// //         </div>\n        \n// //         <div className=\"project-badges\">\n// //           {project.isFeatured && (\n// //             <span className=\"badge featured\">\n// //               <FiStar /> Featured\n// //             </span>\n// //           )}\n// //           {!project.isActive && (\n// //             <span className=\"badge archived\">Archived</span>\n// //           )}\n// //         </div>\n        \n// //         <div className=\"project-menu\">\n// //           <button onClick={() => setShowMenu(!showMenu)}>\n// //             <FiMoreVertical />\n// //           </button>\n// //           {showMenu && (\n// //             <div className=\"dropdown-menu\">\n// //               <button onClick={() => onViewDetails(project)}>\n// //                 <FiEye /> View Details\n// //               </button>\n// //               <button onClick={() => onEdit(project)}>\n// //                 <FiEdit /> Edit\n// //               </button>\n// //               <button onClick={() => onToggleFeatured(project)}>\n// //                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n// //               </button>\n// //               <button onClick={() => onMove(project)}>\n// //                 <FiMove /> Move\n// //               </button>\n// //               <button onClick={() => onArchive(project)}>\n// //                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n// //               </button>\n// //               <button onClick={() => onDelete(project)} className=\"danger\">\n// //                 <FiTrash2 /> Delete\n// //               </button>\n// //             </div>\n// //           )}\n// //         </div>\n// //       </div>\n      \n// //       <div className=\"project-content\">\n// //         <h3 className=\"project-title\">{project.title}</h3>\n// //         <p className=\"project-subdomain\">\n// //           <FiFolder className=\"subdomain-icon\" />\n// //           {project.subDomain?.title || 'No sub-domain'}\n// //         </p>\n// //         <p className=\"project-abstract\">\n// //           {project.abstract?.substring(0, 100)}...\n// //         </p>\n// //       </div>\n      \n// //       <div className=\"project-footer\">\n// //         <div className=\"project-stats\">\n// //           <div className=\"stat\">\n// //             <FiEye />\n// //             <span>{project.viewCount || 0}</span>\n// //           </div>\n// //           <div className=\"stat\">\n// //             <FiUsers />\n// //             <span>{project.leadCount || 0}</span>\n// //           </div>\n// //         </div>\n        \n// //         <div className=\"project-actions\">\n// //           <button onClick={() => onEdit(project)} className=\"edit-button\">\n// //             <FiEdit />\n// //           </button>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // // Project Modal Component (Add/Edit)\n// // const ProjectModal = ({ project, domains, onClose, onSave }) => {\n// //   const [formData, setFormData] = useState({\n// //     title: project?.title || '',\n// //     abstract: project?.abstract || '',\n// //     specifications: project?.specifications || '',\n// //     learningOutcomes: project?.learningOutcomes || '',\n// //     subDomainId: project?.subDomainId || '',\n// //     isFeatured: project?.isFeatured || false\n// //   });\n// //   const [loading, setLoading] = useState(false);\n// //   const [selectedDomain, setSelectedDomain] = useState('');\n// //   const [subDomains, setSubDomains] = useState([]);\n\n// //   useEffect(() => {\n// //     if (selectedDomain) {\n// //       fetchSubDomains(selectedDomain);\n// //     }\n// //   }, [selectedDomain]);\n\n// //   const fetchSubDomains = async (domainId) => {\n// //     try {\n// //       console.log('📡 Modal: Fetching subdomains for domain:', domainId);\n// //       const response = await authService.getLeafSubDomains(domainId);\n// //       console.log('✅ Modal: Subdomains fetched:', response);\n// //       setSubDomains(response.data || []);\n// //     } catch (error) {\n// //       console.error('❌ Modal: Error fetching sub-domains:', error);\n// //     }\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     setLoading(true);\n\n// //     console.log('💾 Modal: Submitting form data:', formData);\n\n// //     try {\n// //       if (project) {\n// //         console.log('📡 Modal: Updating project:', project.id);\n// //         await authService.updateProject(project.id, formData);\n// //         console.log('✅ Modal: Project updated successfully');\n// //         toast.success('Project updated successfully');\n// //       } else {\n// //         console.log('📡 Modal: Creating new project');\n// //         await authService.createProject(formData);\n// //         console.log('✅ Modal: Project created successfully');\n// //         toast.success('Project created successfully');\n// //       }\n// //       onSave();\n// //     } catch (error) {\n// //       console.error('❌ Modal: Error saving project:', error);\n// //       toast.error('Failed to save project');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"modal-overlay\">\n// //       <div className=\"modal large\">\n// //         <div className=\"modal-header\">\n// //           <h2>{project ? 'Edit Project' : 'Add New Project'}</h2>\n// //           <button onClick={onClose}>×</button>\n// //         </div>\n        \n// //         <form onSubmit={handleSubmit}>\n// //           <div className=\"form-grid\">\n// //             <div className=\"form-group\">\n// //               <label>Project Title</label>\n// //               <input\n// //                 type=\"text\"\n// //                 value={formData.title}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// //                 required\n// //               />\n// //             </div>\n            \n// //             <div className=\"form-group\">\n// //               <label>Domain</label>\n// //               <select\n// //                 value={selectedDomain}\n// //                 onChange={(e) => setSelectedDomain(e.target.value)}\n// //                 required={!project}\n// //               >\n// //                 <option value=\"\">Select Domain</option>\n// //                 {domains.map(domain => (\n// //                   <option key={domain.id} value={domain.id}>{domain.title}</option>\n// //                 ))}\n// //               </select>\n// //             </div>\n            \n// //             <div className=\"form-group\">\n// //               <label>Sub-Domain</label>\n// //               <select\n// //                 value={formData.subDomainId}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, subDomainId: e.target.value }))}\n// //                 required\n// //               >\n// //                 <option value=\"\">Select Sub-Domain</option>\n// //                 {subDomains.map(sub => (\n// //                   <option key={sub.id} value={sub.id}>{sub.title}</option>\n// //                 ))}\n// //               </select>\n// //             </div>\n// //           </div>\n          \n// //           <div className=\"form-group\">\n// //             <label>Abstract</label>\n// //             <textarea\n// //               value={formData.abstract}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n// //               rows={4}\n// //               required\n// //             />\n// //           </div>\n          \n// //           <div className=\"form-group\">\n// //             <label>Specifications</label>\n// //             <textarea\n// //               value={formData.specifications}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n// //               rows={6}\n// //               required\n// //             />\n// //           </div>\n          \n// //           <div className=\"form-group\">\n// //             <label>Learning Outcomes</label>\n// //             <textarea\n// //               value={formData.learningOutcomes}\n// //               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n// //               rows={4}\n// //               required\n// //             />\n// //           </div>\n          \n// //           <div className=\"form-group checkbox\">\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 checked={formData.isFeatured}\n// //                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n// //               />\n// //               Featured Project\n// //             </label>\n// //           </div>\n          \n// //           <div className=\"modal-actions\">\n// //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// //               Cancel\n// //             </button>\n// //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// //               {loading ? 'Saving...' : 'Save'}\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // // Project Details Modal\n// // const ProjectDetailsModal = ({ project, onClose }) => {\n// //   return (\n// //     <div className=\"modal-overlay\">\n// //       <div className=\"modal large\">\n// //         <div className=\"modal-header\">\n// //           <h2>{project.title}</h2>\n// //           <button onClick={onClose}>×</button>\n// //         </div>\n        \n// //         <div className=\"project-details\">\n// //           <div className=\"detail-section\">\n// //             <h3>Abstract</h3>\n// //             <p>{project.abstract}</p>\n// //           </div>\n          \n// //           <div className=\"detail-section\">\n// //             <h3>Specifications</h3>\n// //             <p>{project.specifications}</p>\n// //           </div>\n          \n// //           <div className=\"detail-section\">\n// //             <h3>Learning Outcomes</h3>\n// //             <p>{project.learningOutcomes}</p>\n// //           </div>\n          \n// //           <div className=\"detail-stats\">\n// //             <div className=\"stat-item\">\n// //               <strong>Views:</strong> {project.viewCount || 0}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Leads:</strong> {project.leadCount || 0}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n// //             </div>\n// //             <div className=\"stat-item\">\n// //               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ProjectManagement;\n\n\n// // // // src/components/projects/ProjectManagement.js - NEW FILE\n// // // import React, { useState, useEffect } from 'react';\n// // // import { authService } from '../../services/authService';\n// // // import { toast } from 'react-toastify';\n// // // import {\n// // //   FiPlus,\n// // //   FiEdit,\n// // //   FiTrash2,\n// // //   FiSearch,\n// // //   FiFilter,\n// // //   FiMove,\n// // //   FiArchive,\n// // //   FiStar,\n// // //   FiEye,\n// // //   FiUsers,\n// // //   FiImage,\n// // //   FiMoreVertical,\n// // //   FiFolder,\n// // //   FiFileText\n// // // } from 'react-icons/fi';\n\n// // // const ProjectManagement = () => {\n// // //   const [projects, setProjects] = useState([]);\n// // //   const [domains, setDomains] = useState([]);\n// // //   const [subDomains, setSubDomains] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [pagination, setPagination] = useState({\n// // //     currentPage: 1,\n// // //     totalPages: 1,\n// // //     totalItems: 0\n// // //   });\n// // //   const [filters, setFilters] = useState({\n// // //     search: '',\n// // //     subDomainId: '',\n// // //     isActive: true,\n// // //     isFeatured: null,\n// // //     sortBy: 'title',\n// // //     sortOrder: 'ASC'\n// // //   });\n// // //   const [showAddModal, setShowAddModal] = useState(false);\n// // //   const [editingProject, setEditingProject] = useState(null);\n// // //   const [selectedProject, setSelectedProject] = useState(null);\n\n// // //   useEffect(() => {\n// // //     fetchInitialData();\n// // //   }, []);\n\n// // //   useEffect(() => {\n// // //     fetchProjects();\n// // //   }, [filters, pagination.currentPage]);\n\n// // //   const fetchInitialData = async () => {\n// // //     try {\n// // //       const [domainsResponse] = await Promise.all([\n// // //         authService.getDomains({ limit: 100 })\n// // //       ]);\n      \n// // //       setDomains(domainsResponse.data.domains || []);\n// // //     } catch (error) {\n// // //       console.error('❌ Error fetching initial data:', error);\n// // //       toast.error('Failed to load domains');\n// // //     }\n// // //   };\n\n// // //   const fetchProjects = async () => {\n// // //     try {\n// // //       setLoading(true);\n// // //       const params = {\n// // //         page: pagination.currentPage,\n// // //         limit: 12,\n// // //         ...filters\n// // //       };\n      \n// // //       const response = await authService.getProjects(params);\n// // //       console.log('✅ Projects fetched:', response);\n      \n// // //       setProjects(response.data.projects || []);\n// // //       setPagination(response.data.pagination || pagination);\n// // //     } catch (error) {\n// // //       console.error('❌ Error fetching projects:', error);\n// // //       toast.error('Failed to fetch projects');\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   const fetchSubDomains = async (domainId) => {\n// // //     try {\n// // //       const response = await authService.getLeafSubDomains(domainId);\n// // //       setSubDomains(response.data || []);\n// // //     } catch (error) {\n// // //       console.error('❌ Error fetching sub-domains:', error);\n// // //     }\n// // //   };\n\n// // //   const handleSearch = (searchTerm) => {\n// // //     setFilters(prev => ({ ...prev, search: searchTerm }));\n// // //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// // //   };\n\n// // //   const handleFilterChange = (filterKey, value) => {\n// // //     setFilters(prev => ({ ...prev, [filterKey]: value }));\n// // //     setPagination(prev => ({ ...prev, currentPage: 1 }));\n// // //   };\n\n// // //   const handleAddProject = () => {\n// // //     setEditingProject(null);\n// // //     setShowAddModal(true);\n// // //   };\n\n// // //   const handleEditProject = (project) => {\n// // //     setEditingProject(project);\n// // //     setShowAddModal(true);\n// // //   };\n\n// // //   const handleDeleteProject = async (project) => {\n// // //     if (!window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       await authService.deleteProject(project.id);\n// // //       toast.success('Project deleted successfully');\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('❌ Error deleting project:', error);\n// // //       toast.error('Failed to delete project');\n// // //     }\n// // //   };\n\n// // //   const handleMoveProject = async (project, newSubDomainId) => {\n// // //     try {\n// // //       await authService.moveProject(project.id, {\n// // //         newSubDomainId,\n// // //         reason: 'Moved via admin panel'\n// // //       });\n// // //       toast.success('Project moved successfully');\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('❌ Error moving project:', error);\n// // //       toast.error('Failed to move project');\n// // //     }\n// // //   };\n\n// // //   const handleArchiveProject = async (project) => {\n// // //     const isArchiving = project.isActive;\n// // //     const action = isArchiving ? 'archive' : 'restore';\n    \n// // //     if (!window.confirm(`Are you sure you want to ${action} \"${project.title}\"?`)) {\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       await authService.archiveProject(project.id, {\n// // //         archive: isArchiving,\n// // //         reason: `${action} via admin panel`\n// // //       });\n// // //       toast.success(`Project ${action}d successfully`);\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error(`❌ Error ${action}ing project:`, error);\n// // //       toast.error(`Failed to ${action} project`);\n// // //     }\n// // //   };\n\n// // //   const handleToggleFeatured = async (project) => {\n// // //     try {\n// // //       await authService.updateProject(project.id, {\n// // //         isFeatured: !project.isFeatured\n// // //       });\n// // //       toast.success(`Project ${project.isFeatured ? 'removed from' : 'added to'} featured`);\n// // //       fetchProjects();\n// // //     } catch (error) {\n// // //       console.error('❌ Error updating featured status:', error);\n// // //       toast.error('Failed to update featured status');\n// // //     }\n// // //   };\n\n// // //   if (loading && projects.length === 0) {\n// // //     return (\n// // //       <div className=\"loading-container\">\n// // //         <div className=\"loading-spinner\"></div>\n// // //         <p>Loading projects...</p>\n// // //       </div>\n// // //     );\n// // //   }\n\n// // //   return (\n// // //     <div className=\"project-management\">\n// // //       <div className=\"page-header\">\n// // //         <div className=\"header-content\">\n// // //           <h1>Project Management</h1>\n// // //           <p>Manage your project portfolio and content</p>\n// // //         </div>\n// // //         <button className=\"primary-button\" onClick={handleAddProject}>\n// // //           <FiPlus />\n// // //           Add Project\n// // //         </button>\n// // //       </div>\n\n// // //       {/* Filters and Controls */}\n// // //       <div className=\"controls-section\">\n// // //         <div className=\"search-bar\">\n// // //           <FiSearch className=\"search-icon\" />\n// // //           <input\n// // //             type=\"text\"\n// // //             placeholder=\"Search projects...\"\n// // //             value={filters.search}\n// // //             onChange={(e) => handleSearch(e.target.value)}\n// // //           />\n// // //         </div>\n        \n// // //         <div className=\"filter-controls\">\n// // //           <select\n// // //             value={filters.subDomainId}\n// // //             onChange={(e) => handleFilterChange('subDomainId', e.target.value)}\n// // //           >\n// // //             <option value=\"\">All Sub-domains</option>\n// // //             {subDomains.map(sub => (\n// // //               <option key={sub.id} value={sub.id}>{sub.title}</option>\n// // //             ))}\n// // //           </select>\n          \n// // //           <select\n// // //             value={filters.isFeatured === null ? '' : filters.isFeatured}\n// // //             onChange={(e) => handleFilterChange('isFeatured', \n// // //               e.target.value === '' ? null : e.target.value === 'true'\n// // //             )}\n// // //           >\n// // //             <option value=\"\">All Projects</option>\n// // //             <option value=\"true\">Featured Only</option>\n// // //             <option value=\"false\">Non-Featured</option>\n// // //           </select>\n          \n// // //           <select\n// // //             value={filters.isActive}\n// // //             onChange={(e) => handleFilterChange('isActive', e.target.value === 'true')}\n// // //           >\n// // //             <option value=\"true\">Active Projects</option>\n// // //             <option value=\"false\">Archived Projects</option>\n// // //           </select>\n          \n// // //           <select\n// // //             value={filters.sortBy}\n// // //             onChange={(e) => handleFilterChange('sortBy', e.target.value)}\n// // //           >\n// // //             <option value=\"title\">Sort by Title</option>\n// // //             <option value=\"createdAt\">Sort by Date</option>\n// // //             <option value=\"leadCount\">Sort by Leads</option>\n// // //             <option value=\"viewCount\">Sort by Views</option>\n// // //           </select>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Projects Grid */}\n// // //       <div className=\"projects-grid\">\n// // //         {projects.length > 0 ? (\n// // //           projects.map((project) => (\n// // //             <ProjectCard\n// // //               key={project.id}\n// // //               project={project}\n// // //               onEdit={handleEditProject}\n// // //               onDelete={handleDeleteProject}\n// // //               onMove={handleMoveProject}\n// // //               onArchive={handleArchiveProject}\n// // //               onToggleFeatured={handleToggleFeatured}\n// // //               onViewDetails={(project) => setSelectedProject(project)}\n// // //             />\n// // //           ))\n// // //         ) : (\n// // //           <div className=\"empty-state\">\n// // //             <FiFileText size={48} />\n// // //             <h3>No projects found</h3>\n// // //             <p>Create your first project to get started</p>\n// // //             <button className=\"primary-button\" onClick={handleAddProject}>\n// // //               <FiPlus />\n// // //               Add Project\n// // //             </button>\n// // //           </div>\n// // //         )}\n// // //       </div>\n\n// // //       {/* Pagination */}\n// // //       {pagination.totalPages > 1 && (\n// // //         <div className=\"pagination\">\n// // //           <button\n// // //             disabled={pagination.currentPage === 1}\n// // //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n// // //           >\n// // //             Previous\n// // //           </button>\n          \n// // //           <span className=\"page-info\">\n// // //             Page {pagination.currentPage} of {pagination.totalPages}\n// // //             ({pagination.totalItems} total)\n// // //           </span>\n          \n// // //           <button\n// // //             disabled={pagination.currentPage === pagination.totalPages}\n// // //             onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n// // //           >\n// // //             Next\n// // //           </button>\n// // //         </div>\n// // //       )}\n\n// // //       {/* Add/Edit Modal */}\n// // //       {showAddModal && (\n// // //         <ProjectModal\n// // //           project={editingProject}\n// // //           domains={domains}\n// // //           onClose={() => setShowAddModal(false)}\n// // //           onSave={() => {\n// // //             setShowAddModal(false);\n// // //             fetchProjects();\n// // //           }}\n// // //         />\n// // //       )}\n\n// // //       {/* Project Details Modal */}\n// // //       {selectedProject && (\n// // //         <ProjectDetailsModal\n// // //           project={selectedProject}\n// // //           onClose={() => setSelectedProject(null)}\n// // //         />\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Card Component\n// // // const ProjectCard = ({ \n// // //   project, \n// // //   onEdit, \n// // //   onDelete, \n// // //   onMove, \n// // //   onArchive, \n// // //   onToggleFeatured, \n// // //   onViewDetails \n// // // }) => {\n// // //   const [showMenu, setShowMenu] = useState(false);\n\n// // //   return (\n// // //     <div className={`project-card ${!project.isActive ? 'archived' : ''}`}>\n// // //       <div className=\"project-header\">\n// // //         <div className=\"project-image\">\n// // //           {project.images && project.images.length > 0 ? (\n// // //             <img src={project.images[0].url} alt={project.title} />\n// // //           ) : (\n// // //             <div className=\"image-placeholder\">\n// // //               <FiImage />\n// // //             </div>\n// // //           )}\n// // //         </div>\n        \n// // //         <div className=\"project-badges\">\n// // //           {project.isFeatured && (\n// // //             <span className=\"badge featured\">\n// // //               <FiStar /> Featured\n// // //             </span>\n// // //           )}\n// // //           {!project.isActive && (\n// // //             <span className=\"badge archived\">Archived</span>\n// // //           )}\n// // //         </div>\n        \n// // //         <div className=\"project-menu\">\n// // //           <button onClick={() => setShowMenu(!showMenu)}>\n// // //             <FiMoreVertical />\n// // //           </button>\n// // //           {showMenu && (\n// // //             <div className=\"dropdown-menu\">\n// // //               <button onClick={() => onViewDetails(project)}>\n// // //                 <FiEye /> View Details\n// // //               </button>\n// // //               <button onClick={() => onEdit(project)}>\n// // //                 <FiEdit /> Edit\n// // //               </button>\n// // //               <button onClick={() => onToggleFeatured(project)}>\n// // //                 <FiStar /> {project.isFeatured ? 'Remove Featured' : 'Make Featured'}\n// // //               </button>\n// // //               <button onClick={() => onMove(project)}>\n// // //                 <FiMove /> Move\n// // //               </button>\n// // //               <button onClick={() => onArchive(project)}>\n// // //                 <FiArchive /> {project.isActive ? 'Archive' : 'Restore'}\n// // //               </button>\n// // //               <button onClick={() => onDelete(project)} className=\"danger\">\n// // //                 <FiTrash2 /> Delete\n// // //               </button>\n// // //             </div>\n// // //           )}\n// // //         </div>\n// // //       </div>\n      \n// // //       <div className=\"project-content\">\n// // //         <h3 className=\"project-title\">{project.title}</h3>\n// // //         <p className=\"project-subdomain\">\n// // //           <FiFolder className=\"subdomain-icon\" />\n// // //           {project.subDomain?.title || 'No sub-domain'}\n// // //         </p>\n// // //         <p className=\"project-abstract\">\n// // //           {project.abstract?.substring(0, 100)}...\n// // //         </p>\n// // //       </div>\n      \n// // //       <div className=\"project-footer\">\n// // //         <div className=\"project-stats\">\n// // //           <div className=\"stat\">\n// // //             <FiEye />\n// // //             <span>{project.viewCount || 0}</span>\n// // //           </div>\n// // //           <div className=\"stat\">\n// // //             <FiUsers />\n// // //             <span>{project.leadCount || 0}</span>\n// // //           </div>\n// // //         </div>\n        \n// // //         <div className=\"project-actions\">\n// // //           <button onClick={() => onEdit(project)} className=\"edit-button\">\n// // //             <FiEdit />\n// // //           </button>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Modal Component (Add/Edit)\n// // // const ProjectModal = ({ project, domains, onClose, onSave }) => {\n// // //   const [formData, setFormData] = useState({\n// // //     title: project?.title || '',\n// // //     abstract: project?.abstract || '',\n// // //     specifications: project?.specifications || '',\n// // //     learningOutcomes: project?.learningOutcomes || '',\n// // //     subDomainId: project?.subDomainId || '',\n// // //     isFeatured: project?.isFeatured || false\n// // //   });\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [selectedDomain, setSelectedDomain] = useState('');\n// // //   const [subDomains, setSubDomains] = useState([]);\n\n// // //   useEffect(() => {\n// // //     if (selectedDomain) {\n// // //       fetchSubDomains(selectedDomain);\n// // //     }\n// // //   }, [selectedDomain]);\n\n// // //   const fetchSubDomains = async (domainId) => {\n// // //     try {\n// // //       const response = await authService.getLeafSubDomains(domainId);\n// // //       setSubDomains(response.data || []);\n// // //     } catch (error) {\n// // //       console.error('❌ Error fetching sub-domains:', error);\n// // //     }\n// // //   };\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     setLoading(true);\n\n// // //     try {\n// // //       if (project) {\n// // //         await authService.updateProject(project.id, formData);\n// // //         toast.success('Project updated successfully');\n// // //       } else {\n// // //         await authService.createProject(formData);\n// // //         toast.success('Project created successfully');\n// // //       }\n// // //       onSave();\n// // //     } catch (error) {\n// // //       console.error('❌ Error saving project:', error);\n// // //       toast.error('Failed to save project');\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div className=\"modal-overlay\">\n// // //       <div className=\"modal large\">\n// // //         <div className=\"modal-header\">\n// // //           <h2>{project ? 'Edit Project' : 'Add New Project'}</h2>\n// // //           <button onClick={onClose}>×</button>\n// // //         </div>\n        \n// // //         <form onSubmit={handleSubmit}>\n// // //           <div className=\"form-grid\">\n// // //             <div className=\"form-group\">\n// // //               <label>Project Title</label>\n// // //               <input\n// // //                 type=\"text\"\n// // //                 value={formData.title}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n// // //                 required\n// // //               />\n// // //             </div>\n            \n// // //             <div className=\"form-group\">\n// // //               <label>Domain</label>\n// // //               <select\n// // //                 value={selectedDomain}\n// // //                 onChange={(e) => setSelectedDomain(e.target.value)}\n// // //                 required={!project}\n// // //               >\n// // //                 <option value=\"\">Select Domain</option>\n// // //                 {domains.map(domain => (\n// // //                   <option key={domain.id} value={domain.id}>{domain.title}</option>\n// // //                 ))}\n// // //               </select>\n// // //             </div>\n            \n// // //             <div className=\"form-group\">\n// // //               <label>Sub-Domain</label>\n// // //               <select\n// // //                 value={formData.subDomainId}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, subDomainId: e.target.value }))}\n// // //                 required\n// // //               >\n// // //                 <option value=\"\">Select Sub-Domain</option>\n// // //                 {subDomains.map(sub => (\n// // //                   <option key={sub.id} value={sub.id}>{sub.title}</option>\n// // //                 ))}\n// // //               </select>\n// // //             </div>\n// // //           </div>\n          \n// // //           <div className=\"form-group\">\n// // //             <label>Abstract</label>\n// // //             <textarea\n// // //               value={formData.abstract}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, abstract: e.target.value }))}\n// // //               rows={4}\n// // //               required\n// // //             />\n// // //           </div>\n          \n// // //           <div className=\"form-group\">\n// // //             <label>Specifications</label>\n// // //             <textarea\n// // //               value={formData.specifications}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, specifications: e.target.value }))}\n// // //               rows={6}\n// // //               required\n// // //             />\n// // //           </div>\n          \n// // //           <div className=\"form-group\">\n// // //             <label>Learning Outcomes</label>\n// // //             <textarea\n// // //               value={formData.learningOutcomes}\n// // //               onChange={(e) => setFormData(prev => ({ ...prev, learningOutcomes: e.target.value }))}\n// // //               rows={4}\n// // //               required\n// // //             />\n// // //           </div>\n          \n// // //           <div className=\"form-group checkbox\">\n// // //             <label>\n// // //               <input\n// // //                 type=\"checkbox\"\n// // //                 checked={formData.isFeatured}\n// // //                 onChange={(e) => setFormData(prev => ({ ...prev, isFeatured: e.target.checked }))}\n// // //               />\n// // //               Featured Project\n// // //             </label>\n// // //           </div>\n          \n// // //           <div className=\"modal-actions\">\n// // //             <button type=\"button\" onClick={onClose} disabled={loading}>\n// // //               Cancel\n// // //             </button>\n// // //             <button type=\"submit\" className=\"primary-button\" disabled={loading}>\n// // //               {loading ? 'Saving...' : 'Save'}\n// // //             </button>\n// // //           </div>\n// // //         </form>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // // Project Details Modal\n// // // const ProjectDetailsModal = ({ project, onClose }) => {\n// // //   return (\n// // //     <div className=\"modal-overlay\">\n// // //       <div className=\"modal large\">\n// // //         <div className=\"modal-header\">\n// // //           <h2>{project.title}</h2>\n// // //           <button onClick={onClose}>×</button>\n// // //         </div>\n        \n// // //         <div className=\"project-details\">\n// // //           <div className=\"detail-section\">\n// // //             <h3>Abstract</h3>\n// // //             <p>{project.abstract}</p>\n// // //           </div>\n          \n// // //           <div className=\"detail-section\">\n// // //             <h3>Specifications</h3>\n// // //             <p>{project.specifications}</p>\n// // //           </div>\n          \n// // //           <div className=\"detail-section\">\n// // //             <h3>Learning Outcomes</h3>\n// // //             <p>{project.learningOutcomes}</p>\n// // //           </div>\n          \n// // //           <div className=\"detail-stats\">\n// // //             <div className=\"stat-item\">\n// // //               <strong>Views:</strong> {project.viewCount || 0}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Leads:</strong> {project.leadCount || 0}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Featured:</strong> {project.isFeatured ? 'Yes' : 'No'}\n// // //             </div>\n// // //             <div className=\"stat-item\">\n// // //               <strong>Status:</strong> {project.isActive ? 'Active' : 'Archived'}\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ProjectManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}